{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MkDoxy","text":"<p>MkDoxy plugin for MkDocs generates API documentation based on Doxygen comments and code snippets in your markdown files.</p> <p> </p> <p>Warning Extension is in development and few features are not working properly. More information in Discussions and Issues pages.</p>"},{"location":"#online-demo-and-demo-source-code","title":"Online Demo and  Demo source-code","text":"<p>Feature List - Installation - Quick start</p>"},{"location":"#feature-list","title":"Feature List","text":"<ul> <li>Easy to use:: Just add <code>mkdoxy</code> to your <code>mkdocs.yml</code> and configure the path to your source code.</li> <li>Code snippets: Generate code snippets in place of your standard Markdown documentation.</li> <li>Multiple projects: Support for multiple projects in one documentation (e.g. C++ and Python).</li> <li>Multiple source directories: Configure multiple source directories in one project.</li> <li>Custom Jinja templates: Define custom Jinja templates for rendering Doxygen documentation.</li> <li>Custom Doxygen configuration: Specify custom Doxygen configuration for each project.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>With pip: <pre><code>pip install mkdoxy\n</code></pre></p> <p>Install from source - development version: <pre><code>pip install git+https://github.com/JakubAndrysek/MkDoxy.git\n</code></pre></p>"},{"location":"#quick-start","title":"Quick start","text":"<p><code>mkdocs.yml</code>: <pre><code>site_name: \"My documentation\"\n\ntheme:\nname: material\n\nplugins:\n- search\n- mkdoxy:\nprojects:\nmyProjectCpp: # name of project must be alphanumeric + numbers (without spaces)\nsrc-dirs: path/to/src/project1 # path to source code (support multiple paths separated by space) =&gt; INPUT\nfull-doc: True # if you want to generate full documentation\ndoxy-cfg: # standard doxygen configuration (key: value)\nFILE_PATTERNS: \"*.cpp *.h*\" # specify file patterns to filter out\nRECURSIVE: True # recursive search in source directories\n</code></pre></p>"},{"location":"#contributing","title":"Contributing","text":"<p>Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.</p>"},{"location":"#do-you-enjoy-mkdoxy-or-does-it-save-you-time","title":"Do You Enjoy MkDoxy or Does It Save You Time?","text":"<p>Then definitely consider:</p> <ul> <li>supporting me on GitHub Sponsors: </li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <ul> <li>v1.0.0 - 2023-01-24<ul> <li>Initial release</li> </ul> </li> <li>v1.0.3 - 2023-03-21<ul> <li>Fix: Hash function support subfolders</li> </ul> </li> <li>v1.0.5 - 2023-04-01<ul> <li>Add support for custom templates</li> </ul> </li> <li>v1.0.6 - 2023-04-01<ul> <li>Add support disable plugin using environment variable</li> </ul> </li> </ul>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2021 Kuba Andr\u00fdsek\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"animal/","title":"Demo API for Animal CPP project","text":"<p>Source sode from doxybook demo.</p>"},{"location":"mkdoxyApi/","title":"API documentation for this tool","text":"<p>Documentation for MkDoxy is generated by this tool.</p>"},{"location":"snippets/","title":"Snippets for the Doxygen API documentation","text":"<p>Writing documentation snippets is one of the most important parts of the mkdoxy project. Uou can write standard markdown documentation and using the <code>::: doxy</code> tags embed your code snippets just in the right place. Using this tags is inspired from the mkdocstrings project.</p>"},{"location":"snippets/#using-the-tags","title":"Using the tags","text":"<p>Code tags consist of three parts: the tag keyword, the project name and the tag name separated by the <code>.</code> character. The parameters of the tag are passed as a YAML object (key:value) in the next line indented by 4 spaces or a tab.</p> Tag structureTag example <pre><code>::: doxy.&lt;project name&gt;.&lt;tag name&gt;\n&lt;key&gt;:&lt;value&gt;\n&lt;key&gt;:&lt;value&gt;\n</code></pre> <pre><code>::: doxy.mkdoxyApi.class.method\nname: mkdoxy::cache::Cache\nmethod: get\n</code></pre> <ul> <li><code>::: doxy</code> - the tag keyword is always same</li> <li><code>&lt;project name&gt;</code> - the name of the project. This is configured in the <code>mkdoxy.yml</code> file.</li> <li><code>&lt;tag name&gt;</code> - the name of the tag. List of available tags can be found in LINK TO TAGS.</li> <li><code>&lt;key&gt;:&lt;value&gt;</code> - the parameters of the tag. The parameters are passed as a YAML object (key:value) each <code>&lt;tag name&gt;</code> has its own set of parameters.</li> </ul>"},{"location":"snippets/classes/","title":"Snippets - Classes","text":""},{"location":"snippets/classes/#doxyprojectclass","title":"<code>::: doxy.&lt;project&gt;.class</code>","text":"<p>This tag generates full class documentation.</p> Parameter Description Required <code>name</code> The name of the class. Yes Tag usageTag result <pre><code>    ::: doxy.animal.class\nname: example::Bird\n</code></pre>"},{"location":"snippets/classes/#class-examplebird","title":"Class example::Bird","text":"<p>ClassList &gt; example &gt; Bird</p> <p>Inherits the following classes: example::Animal</p> <p>Inherited by the following classes: example::SpecialBird</p>"},{"location":"snippets/classes/#public-types-inherited-from-exampleanimal","title":"Public Types inherited from example::Animal","text":"<p>See example::Animal</p> Type Name typedef std::pair&lt; Animal *, Animal * &gt; Parents enum Type The 6 classes of animal kingdom."},{"location":"snippets/classes/#public-functions","title":"Public Functions","text":"Type Name Bird (const std::string &amp; name, Bird * mother=nullptr, Bird * father=nullptr)  Bird (const Bird &amp; other) = delete Bird (Bird &amp;&amp; Bird) noexcept virtual void make_sound () override virtual void move () override Bird &amp; operator= (const Bird &amp; other) = deleteDeleted copy operator. Bird &amp; operator= (Bird &amp;&amp; other) noexceptMove operator. void swap (Bird &amp; other) noexcept ~Bird () = default"},{"location":"snippets/classes/#public-functions-inherited-from-exampleanimal","title":"Public Functions inherited from example::Animal","text":"<p>See example::Animal</p> Type Name Animal (Type type, const std::string &amp; name, Animal * mother=nullptr, Animal * father=nullptr) The main constructor. Animal (const Animal &amp; other) = delete Animal (Animal &amp;&amp; animal) noexcept const std::string &amp; get_name () constGet the name of the animal. virtual int get_num_of_eyes () override constReturns the number of eyes. virtual int get_num_of_limbs () override constReturns the number of limbs. Parents get_parents () const virtual bool has_tail () override constReturns true if the animal has a tail. virtual void make_sound () = 0 virtual void move ()  operator bool () constReturns true if this is an valid animal. Animal &amp; operator= (const Animal &amp; other) = deleteDeleted copy operator. Animal &amp; operator= (Animal &amp;&amp; other) noexceptMove operator. void some_inline_member_function (Animal * animal) Lorem Ipsum. void swap (Animal &amp; other) noexcept virtual ~Animal () = default"},{"location":"snippets/classes/#public-functions-inherited-from-exampleanimalinterface","title":"Public Functions inherited from example::AnimalInterface","text":"<p>See example::AnimalInterface</p> Type Name virtual int get_num_of_eyes () const = 0Returns the number of eyes. virtual int get_num_of_limbs () const = 0Returns the number of limbs. virtual bool has_tail () const = 0Returns true if the animal has a tail."},{"location":"snippets/classes/#public-static-functions-inherited-from-exampleanimal","title":"Public Static Functions inherited from example::Animal","text":"<p>See example::Animal</p> Type Name Animal * find_child_by_name (Animal * parent)  Animal * find_parent_by_name (Animal * child)"},{"location":"snippets/classes/#protected-attributes-inherited-from-exampleanimal","title":"Protected Attributes inherited from example::Animal","text":"<p>See example::Animal</p> Type Name Animal * father The pointer to the father. Animal * mother The pointer to the mother. std::string name"},{"location":"snippets/classes/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"snippets/classes/#function-bird-13","title":"function Bird [1/3]","text":"<pre><code>example::Bird::Bird (\nconst std::string &amp; name,\nBird * mother=nullptr,\nBird * father=nullptr\n) </code></pre>"},{"location":"snippets/classes/#function-bird-23","title":"function Bird [2/3]","text":"<pre><code>example::Bird::Bird (\nconst Bird &amp; other\n) = delete\n</code></pre>"},{"location":"snippets/classes/#function-bird-33","title":"function Bird [3/3]","text":"<pre><code>example::Bird::Bird (\nBird &amp;&amp; Bird\n) noexcept\n</code></pre>"},{"location":"snippets/classes/#function-make_sound","title":"function make_sound","text":"<pre><code>virtual void example::Bird::make_sound () override\n</code></pre> <p>Implements example::Animal::make_sound</p>"},{"location":"snippets/classes/#function-move","title":"function move","text":"<pre><code>virtual void example::Bird::move () override\n</code></pre> <p>Implements example::Animal::move</p>"},{"location":"snippets/classes/#function-operator","title":"function operator=","text":"<pre><code>Bird &amp; example::Bird::operator= (\nconst Bird &amp; other\n) = delete\n</code></pre>"},{"location":"snippets/classes/#function-operator_1","title":"function operator=","text":"<pre><code>Bird &amp; example::Bird::operator= (\nBird &amp;&amp; other\n) noexcept\n</code></pre>"},{"location":"snippets/classes/#function-swap","title":"function swap","text":"<pre><code>void example::Bird::swap (\nBird &amp; other\n) noexcept\n</code></pre>"},{"location":"snippets/classes/#function-bird","title":"function ~Bird","text":"<pre><code>example::Bird::~Bird () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/bird.h</code></p>"},{"location":"snippets/classes/#doxyprojectclassmethod","title":"<code>::: doxy.&lt;project&gt;.class.method</code>","text":"<p>This tag generates documentation for a specific method of a class.</p> Parameter Description Required <code>name</code> The name of the class. Yes <code>method</code> The name of the method. Yes Tag usageTag result <pre><code>::: doxy.animal.class.method\nname: example::Bird\nmethod: void make_sound()\n</code></pre>"},{"location":"snippets/classes/#function-make_sound_1","title":"function make_sound","text":"<pre><code>virtual void example::Bird::make_sound () override\n</code></pre> <p>Implements example::Animal::make_sound</p>"},{"location":"snippets/classes/#doxyprojectclasslist","title":"<code>::: doxy.&lt;project&gt;.class.list</code>","text":"<p>This tag generates a list of all classes in the project.</p> <p>There are no parameters for this tag.</p> Tag usageTag result <pre><code>::: doxy.animal.class.list\n</code></pre>"},{"location":"snippets/classes/#class-list","title":"Class List","text":"<p>Here are the classes, structs, unions and interfaces with brief descriptions:</p> <ul> <li>struct BirdOrRodent </li> <li>class CuteChinchilla </li> <li>namespace example <ul> <li>class Animal Base class for all animals from which Bird derives. <ul> <li>struct Result Some random inner class of Animal . </li> </ul> </li> <li>interface AnimalInterface </li> <li>class Bird </li> <li>class CustomException </li> <li>class NumericException </li> <li>class SpecialBird </li> <li>namespace inner_namespace <ul> <li>class Vector </li> </ul> </li> </ul> </li> <li>namespace std </li> </ul>"},{"location":"snippets/classes/#doxyprojectclasshierarchy","title":"<code>::: doxy.&lt;project&gt;.class.hierarchy</code>","text":"<p>This tag generates a class hierarchy diagram.</p> <p>There are no parameters for this tag.</p> Tag usageTag result <pre><code>::: doxy.animal.class.hierarchy\n</code></pre>"},{"location":"snippets/classes/#class-hierarchy","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p> <ul> <li>interface example::AnimalInterface <ul> <li>class example::Animal Base class for all animals from which Bird derives. <ul> <li>class example::Bird <ul> <li>class example::SpecialBird </li> </ul> </li> </ul> </li> </ul> </li> <li>class example::inner_namespace::Vector </li> <li>struct BirdOrRodent </li> <li>struct example::Animal::Result Some random inner class of Animal .</li> <li>class QObject <ul> <li>class CuteChinchilla </li> </ul> </li> <li>class std::exception <ul> <li>class example::CustomException </li> <li>class example::NumericException </li> </ul> </li> </ul>"},{"location":"snippets/files/","title":"Snippets - Files","text":""},{"location":"snippets/files/#doxyprojectfilelist","title":"<code>::: doxy.&lt;project&gt;.file.list</code>","text":"<p>This tag generates a list of all files in the project.</p> <p>There are no parameters for this tag.</p> Tag usageTag result <pre><code>::: doxy.animal.file.list\n</code></pre>"},{"location":"snippets/files/#file-list","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p> <ul> <li>dir demo-projects <ul> <li>dir animal <ul> <li>file animal.h </li> <li>file animal_interface.h </li> <li>file bird.h </li> <li>file chinchilla.h </li> <li>file config.h This is a config file. </li> <li>dir examples <ul> <li>dir bird <ul> <li>file main.cpp </li> </ul> </li> </ul> </li> <li>dir utils <ul> <li>file exception.h </li> </ul> </li> <li>file example.h </li> <li>file special_bird.h </li> </ul> </li> </ul> </li> </ul>"},{"location":"snippets/functions/","title":"Snippets - Functions","text":""},{"location":"snippets/functions/#doxyprojectfunction","title":"<code>::: doxy.&lt;project&gt;.function</code>","text":"<p>This tag generates full function documentation.</p> Parameter Description Required <code>name</code> The name of the function. Yes Tag usageTag result <pre><code>::: doxy.animal.function\nname: int main(int argc, char const *argv[])\n</code></pre>"},{"location":"snippets/functions/#function-main","title":"function main","text":"<pre><code>int main (\nint argc,\nchar const * argv\n) </code></pre>"},{"location":"snippets/functions/#doxyprojectfunction-error-message","title":"<code>::: doxy.&lt;project&gt;.function</code> error message","text":"Tag usageTag result <pre><code>::: doxy.animal.function\nname: mEin\n</code></pre> <p> MkDoxy Error: Incorrect function configuration <p>Did not find Function with name: <code>mEin</code></p> Available functions: <pre><code>void some_global_function(example::Animal *animal)\nint main(int argc, char const *argv[])\n</code></pre> Snippet <pre><code>::: doxy.animal.function\nname: mEin\nindent_level: 4\n</code></pre>"},{"location":"snippets/intelli_sense_and_errors/","title":"Snippets - Intelli sense and errors","text":""},{"location":"snippets/intelli_sense_and_errors/#doxy-tag","title":"<code>::: doxy</code> tag","text":"<p>This tag shows all possible tags and their parameters.</p> Tag usageTag result <pre><code>::: doxy\n</code></pre> <p> MkDoxy Error: Incorrect project name:  <p>Project name have to contain [a-zA-Z0-9_]</p> A list of available projects: <pre><code>mkdoxyApi\nanimal\n</code></pre> Snippet <pre><code>::: doxy\nindent_level: 4\n</code></pre>"},{"location":"snippets/intelli_sense_and_errors/#error-handling","title":"Error handling","text":"<p>When you configured the snippet incorrectly, MkDoxy show you an error message with a hint how to fix it.</p> Tag usageTag result <pre><code>::: doxy.animal\n</code></pre> <p> MkDoxy Error: Add argument to snippet: animal <p>Argument have to be based on this diagram \u2192 :::doxy.animal.&lt;argument&gt;</p> A list of available arguments: <pre><code>code\nfunction\nclass\nclass.method\nclass.list\nclass.index\nclass.hierarchy\nnamespace.list\nfile.list\n</code></pre> Snippet <pre><code>::: doxy.animal\nindent_level: 4\n</code></pre>"},{"location":"snippets/intelli_sense_and_errors/#incorrect-arguments","title":"Incorrect arguments","text":"<p>When you configured the snippet with incorrect arguments, mkdoxyApi will show you an error message.</p> Tag usageTag result <pre><code>::: doxy.animal.class.method\nname: cat\n</code></pre> <p> MkDoxy Error: Incorrect class configuration <p>Did not find Class with name: <code>example::Cat</code></p> Available classes: <pre><code>CuteChinchilla\nexample::Animal\nexample::Bird\nexample::CustomException\nexample::NumericException\nexample::SpecialBird\nexample::inner\\_namespace::Vector\n</code></pre> Snippet <pre><code>::: doxy.animal.class\nname: example::Cat\nindent_level: 4\n</code></pre>"},{"location":"snippets/intelli_sense_and_errors/#hints-for-parameters","title":"Hints for parameters","text":"Tag usageTag result <pre><code>::: doxy.animal.class.method\nname: mkdoxy::cache::Cache\n</code></pre> <p> MkDoxy Error: Missing parameter: method <p>This parameter is required</p> Required parameters: <pre><code>name\nmethod\n</code></pre> Snippet <pre><code>::: doxy.animal.class.method\nname: mkdoxy::cache::Cache\nindent_level: 4\n</code></pre>"},{"location":"snippets/links/","title":"Snippets - Links","text":"<p>Warning</p> <p>This snippet is a work in progress.</p> <p>See GitHub Discussion for more information.</p>"},{"location":"snippets/namespaces/","title":"Snippets - Lists","text":""},{"location":"snippets/namespaces/#doxyprojectnamespacelist","title":"<code>::: doxy.&lt;project&gt;.namespace.list</code>","text":"<p>This tag generates a list of all namespaces in the project.</p> Tag usageTag result <pre><code>::: doxy.animal.namespace.list\n</code></pre>"},{"location":"snippets/namespaces/#namespace-list","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p> <ul> <li>namespace example <ul> <li>namespace inner_namespace </li> </ul> </li> <li>namespace std </li> </ul>"},{"location":"snippets/source_code/","title":"Snippets - Source code","text":""},{"location":"snippets/source_code/#doxyprojectcode","title":"<code>::: doxy.&lt;project&gt;.code</code>","text":"<p>This tag generates a code snippet from a file.</p> Parameter Description Required <code>file</code> The name of the file. Yes <code>start</code> The line number where the snippet starts. No <code>end</code> The line number where the snippet ends. No Tag usageTag result <pre><code>::: doxy.animal.code\nfile: bird.h\nstart: 4\nend: 20\n</code></pre> <p>bird.h</p> <pre><code>#include \"animal.h\"\n\nnamespace example {\nclass Bird: public Animal {\npublic:\nBird(const std::string&amp; name, Bird* mother = nullptr, Bird* father = nullptr);\nBird(const Bird&amp; other) = delete;\nBird(Bird&amp;&amp; Bird) noexcept;\n~Bird() = default;\n\nvoid swap(Bird&amp; other) noexcept;\n\nvoid move() override;\nvoid make_sound() override;\nBird&amp; operator = (const Bird&amp; other) = delete;\nBird&amp; operator = (Bird&amp;&amp; other) noexcept;\n};\n</code></pre>"},{"location":"snippets/source_code/#doxyprojectcode-error-message","title":"<code>::: doxy.&lt;project&gt;.code</code> error messageMkDoxy Error: Did not find File: <code>cat.h</code>","text":"Tag usageTag result <pre><code>::: doxy.animal.code\nfile: cat.h\n</code></pre> <p> <p>Check your file name</p> Available files in animal project: <pre><code>animal.h\nanimal\\_interface.h\nbird.h\nchinchilla.h\nconfig.h\nmain.cpp\nexception.h\nexample.h\nspecial\\_bird.h\n</code></pre> Snippet <pre><code>::: doxy.animal.code\nfile: cat.h\nindent_level: 4\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>MkDoxy creates API documentation based on Doxygen comments and code snippets in your markdown files.</p> <pre><code>site_name: \"My documentation\"\n\ntheme:\nname: material\n\nplugins:\n- search\n- mkdoxy:\nprojects:\nmyProjectCpp: # name of project must be alphanumeric + numbers (without spaces)\nsrc-dirs: path/to/src/project1 # path to source code (support multiple paths separated by space) =&gt; INPUT\nfull-doc: True # if you want to generate full documentation\ndoxy-cfg: # standard doxygen configuration (key: value)\nFILE_PATTERNS: \"*.cpp *.h*\" # specify file patterns to filter out\nRECURSIVE: True # recursive search in source directories\n</code></pre>"},{"location":"usage/#how-does-it-work","title":"How does it work","text":"<ol> <li>MkDoxy runs Doxygen to generate XML files from your source code (this is executed only if the source code has changed).</li> <li>MkDoxy parses the XML files and creates a recursive structure of each project.</li> <li>Plugin generates markdown files from the recursive structure based on Jinja templates.</li> <li>Find snippets tags in the markdown files and replace them with the configured code snippets.</li> <li>Plugin includes the generated markdown files in the final documentation.</li> <li>MkDocs generates the final documentation.</li> </ol>"},{"location":"usage/#multiple-projects","title":"Multiple projects","text":"<p>MkDoxy supports multiple projects in one repository. Each project must have its own configuration. The configuration is specified in the <code>projects</code> section of the MkDoxy configuration. The name of the project must be alphanumeric + numbers (without spaces). The name of the project is used to identify the project in the snippet tags.</p> Configure multiple projects <pre><code>plugins:\n- mkdoxy:\nprojects:\napiProject1: # name of project must be alphanumeric + numbers (without spaces)\nsrc-dirs: path/to/src/project1\n...\napiProject2:\nsrc-dirs: path/to/src/project2\n...\npredefinedProject3:\nsrc-dirs: path/to/src/project3\n...\n</code></pre>"},{"location":"usage/#custom-jinja-templates","title":"Custom Jinja templates","text":"<p>Custom templates can be used to change the appearance of the generated documentation. Each custom template file will replace the default template file.  So you do not have to create a custom template for the whole documentation, but only for the parts you want to change.</p> Configure multiple projects <pre><code>plugins:\n- mkdoxy:\nprojects:\nprojectWithCustomTemplate:\nsrc-dirs: path/to/src/project1\ntemplate-dir: path/to/userDefined/templates # optional (default is mkdoxy/templates) - custom template will replace default template\n</code></pre>"},{"location":"usage/#custom-doxygen-configuration","title":"Custom Doxygen configuration","text":"<p>MkDoxy supports custom Doxygen configuration for each project. The configuration is specified in the <code>doxy-cfg</code> section of the project configuration. The configuration is passed to Doxygen as a string. The configuration is merged with the default configuration.</p> Default Doxygen configuration <pre><code>\"INPUT\": self.doxygenSource, # path to source code\n\"OUTPUT_DIRECTORY\": self.tempDoxyFolder, # path to temporary folder\n\"DOXYFILE_ENCODING\": \"UTF-8\", # encoding of doxygen configuration file\n\"GENERATE_XML\": \"YES\", # generate XML files (required by mkdoxy)\n\"RECURSIVE\": \"YES\", # recursive search for source files\n\"SHOW_NAMESPACES\": \"YES\", # show namespaces in documentation\n\"GENERATE_HTML\": \"NO\", # do not generate HTML files (mkdoxy generates documentation from XML files)\n\"GENERATE_LATEX\": \"NO\", # do not generate LaTeX files\n</code></pre> <p>Doxygen configuration options: www.doxygen.nl/manual/config.html</p> Custom Doxygen configuration - override default configuration <pre><code>plugins:\n- mkdoxy:\nprojects:\npythonProject:\nsrc-dirs: path/to/src/pythonProject\nfull-doc: True\ndoxy-cfg:\nFILE_PATTERNS: \"*.py\"\nEXAMPLE_PATH: \"\"\nRECURSIVE: True\nOPTIMIZE_OUTPUT_JAVA: True\nJAVADOC_AUTOBRIEF: True\nEXTRACT_ALL: True\n...\n</code></pre>"},{"location":"usage/#advanced-configuration","title":"Advanced configuration","text":"mkdocs.yml configuration <pre><code>plugins:\n- mkdoxy:\nprojects:\napiProject1: # name of project must be alphanumeric + numbers (without spaces)\nsrc-dirs: path/to/src/project1\nfull-doc: True\ndoxy-cfg:\nFILE_PATTERNS: \"*.cpp *.h*\"\nEXAMPLE_PATH: examples\nRECURSIVE: True\napiProject2:\nsrc-dirs: path/to/src/project2\nfull-doc: True\ntemplate-dir: path/to/userDefined/templates # optional (default is mkdoxy/templates) - custom template will replace default template\n# Example of custom template: https://mkdoxy-demo.kubaandrysek.cz/esp/annotated/\ndoxy-cfg:\nFILE_PATTERNS: \"*.py\"\nEXAMPLE_PATH: \"\"\nRECURSIVE: True\nOPTIMIZE_OUTPUT_JAVA: True\nJAVADOC_AUTOBRIEF: True\nEXTRACT_ALL: True\npredefinedProject3:\nsrc-dirs: path/to/src/project3\nfull-doc: False\ndoxy-cfg:\nPREDEFINED: __cplusplus # example there: https://github.com/kuba2k2/libretuya/blob/master/mkdocs.yml\nCASE_SENSE_NAMES: NO\n...\nnav:\n- Home: 'index.md'\n- API:\n- Project 1:\n- 'Links': 'apiProject1/links.md'\n- 'Classes':\n- 'Class List': 'apiProject1/annotated.md'\n- 'Class Index': 'apiProject1/classes.md'\n- 'Class Hierarchy': 'apiProject1/hierarchy.md'\n- 'Class Members': 'apiProject1/class_members.md'\n- 'Class Member Functions': 'apiProject1/class_member_functions.md'\n- 'Class Member Variables': 'apiProject1/class_member_variables.md'\n- 'Class Member Typedefs': 'apiProject1/class_member_typedefs.md'\n- 'Class Member Enumerations': 'apiProject1/class_member_enums.md'\n- 'Namespaces':\n- 'Namespace List': 'apiProject1/namespaces.md'\n- 'Namespace Members': 'apiProject1/namespace_members.md'\n- 'Namespace Member Functions': 'apiProject1/namespace_member_functions.md'\n- 'Namespace Member Variables': 'apiProject1/namespace_member_variables.md'\n- 'Namespace Member Typedefs': 'apiProject1/namespace_member_typedefs.md'\n- 'Namespace Member Enumerations': 'apiProject1/namespace_member_enums.md'\n- 'Functions': 'apiProject1/functions.md'\n- 'Variables': 'apiProject1/variables.md'\n- 'Macros': 'apiProject1/macros.md'\n- 'Files': 'apiProject1/files.md'\n- Project 2:\n...\n\nuse_directory_urls: true # (optional) for better links without .html extension\n</code></pre>"},{"location":"usage/advanced/","title":"Advanced usage","text":""},{"location":"usage/advanced/#disabling-the-plugin","title":"Disabling the plugin","text":"<p>You can use the <code>enabled</code> option to optionally disable this plugin. A possible use case is local development where you might want faster build times.</p> <pre><code>plugins:\n- mkdoxy:\nenabled: !ENV [ENABLE_MKDOXY, True]\n...\n</code></pre> <p>This will disable the plugin if the <code>ENABLE_MKDOXY</code> environment variable is not set or is set to <code>False</code>. Inspirated by mkdocs-simple-hooks</p> <pre><code>export ENABLE_MKDOXY=False\nmkdocs serve\n</code></pre>"},{"location":"usage/advanced/#configure-custom-doxygen-binary","title":"Configure custom Doxygen binary","text":"<p>By default, the plugin will use the <code>doxygen</code> binary from the system path. You can configure a custom binary using the <code>doxygen-bin-path</code> option.</p> <ul> <li>addad by thb-sb</li> </ul> <pre><code>plugins:\n- mkdoxy:\ndoxygen-bin-path: /path/to/doxygen\n...\n</code></pre> <p>Hi, I have released new version, please try it and let me know if it has been fixed. Thanks</p>"},{"location":"mkdoxyApi/annotated/","title":"Class List","text":"<p>Here are the classes, structs, unions and interfaces with brief descriptions:</p> <ul> <li>namespace mkdoxy <ul> <li>namespace DoxyTagParser <ul> <li>class DoxyTagParser </li> </ul> </li> <li>namespace cache <ul> <li>class Cache </li> </ul> </li> <li>namespace constants <ul> <li>class Kind </li> <li>class Visibility </li> </ul> </li> <li>namespace doxygen <ul> <li>class Doxygen </li> </ul> </li> <li>namespace doxyrun <ul> <li>class DoxygenRun Class for running Doxygen. </li> </ul> </li> <li>namespace finder <ul> <li>class Finder </li> </ul> </li> <li>namespace generatorAuto <ul> <li>class GeneratorAuto </li> </ul> </li> <li>namespace generatorBase <ul> <li>class GeneratorBase Base class for all generators. </li> </ul> </li> <li>namespace generatorSnippets <ul> <li>class GeneratorSnippets </li> <li>class SnippetClass </li> </ul> </li> <li>namespace markdown <ul> <li>class Br </li> <li>class Code </li> <li>class Md </li> <li>class MdBlockQuote </li> <li>class MdBold </li> <li>class MdCodeBlock </li> <li>class MdHeader </li> <li>class MdHint </li> <li>class MdImage </li> <li>class MdItalic </li> <li>class MdLine </li> <li>class MdLink </li> <li>class MdList </li> <li>class MdParagraph </li> <li>class MdRenderer </li> <li>class MdTable </li> <li>class MdTableCell </li> <li>class MdTableRow </li> <li>class Text </li> </ul> </li> <li>namespace node <ul> <li>class DummyNode </li> <li>class Node </li> </ul> </li> <li>namespace plugin <ul> <li>class MkDoxy MkDocs plugin for generating documentation from Doxygen XML files. </li> </ul> </li> <li>namespace property <ul> <li>class Property <ul> <li>class Brief </li> <li>class CodeBlock </li> <li>class Definition </li> <li>class Details </li> <li>class Includes </li> <li>class Initializer </li> <li>class Location </li> <li>class Params </li> <li>class Programlisting </li> <li>class Specifiers </li> <li>class TemplateParams </li> <li>class Type </li> <li>class Values </li> </ul> </li> </ul> </li> <li>namespace utils </li> <li>namespace xml_parser <ul> <li>class XmlParser </li> </ul> </li> </ul> </li> <li>namespace pprint </li> </ul>"},{"location":"mkdoxyApi/files/","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p> <ul> <li>dir mkdoxy <ul> <li>file DoxyTagParser.py </li> <li>file __init__.py </li> <li>file cache.py </li> <li>file constants.py </li> <li>file doxygen.py </li> <li>file doxyrun.py </li> <li>file finder.py </li> <li>file generatorAuto.py </li> <li>file generatorBase.py </li> <li>file generatorSnippets.py </li> <li>file markdown.py </li> <li>file node.py </li> <li>file plugin.py </li> <li>file property.py </li> <li>file utils.py </li> <li>file xml_parser.py </li> </ul> </li> </ul>"},{"location":"mkdoxyApi/namespacemkdoxy/","title":"Namespace mkdoxy","text":"<p>Namespace List &gt; mkdoxy</p>"},{"location":"mkdoxyApi/namespacemkdoxy/#namespaces","title":"Namespaces","text":"Type Name namespace DoxyTagParser namespace cache namespace constants namespace doxygen namespace doxyrun namespace finder namespace generatorAuto namespace generatorBase namespace generatorSnippets namespace markdown namespace node namespace plugin namespace property namespace utils namespace xml_parser <p>The documentation for this class was generated from the following file <code>mkdoxy/__init__.py</code></p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1DoxyTagParser/","title":"Namespace mkdoxy::DoxyTagParser","text":"<p>Namespace List &gt; mkdoxy &gt; DoxyTagParser</p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1DoxyTagParser/#classes","title":"Classes","text":"Type Name class DoxyTagParser <p>The documentation for this class was generated from the following file <code>mkdoxy/DoxyTagParser.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/","title":"Class mkdoxy::DoxyTagParser::DoxyTagParser","text":"<p>ClassList &gt; mkdoxy &gt; DoxyTagParser &gt; DoxyTagParser</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#public-attributes","title":"Public Attributes","text":"Type Name debug dot doxy_key indent key look_ahead markdown_page optional_dot project"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, str markdown_page, bool debug=False)  def parseEmptyTag (self self, str replacement)  def parseProject (self self, str replacement)  def parseProjectTagMulti (self self, str replacement)  def parseProjectTagSingle (self self, str replacement)  def replaceMarkdown (self self, int start, int end, str replace_format, ** kwargs)  def returnMarkdown (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#variable-debug","title":"variable debug","text":"<pre><code>mkdoxy.DoxyTagParser.DoxyTagParser::debug;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#variable-dot","title":"variable dot","text":"<pre><code>mkdoxy.DoxyTagParser.DoxyTagParser::dot;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#variable-doxy_key","title":"variable doxy_key","text":"<pre><code>mkdoxy.DoxyTagParser.DoxyTagParser::doxy_key;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#variable-indent","title":"variable indent","text":"<pre><code>mkdoxy.DoxyTagParser.DoxyTagParser::indent;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#variable-key","title":"variable key","text":"<pre><code>mkdoxy.DoxyTagParser.DoxyTagParser::key;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#variable-look_ahead","title":"variable look_ahead","text":"<pre><code>mkdoxy.DoxyTagParser.DoxyTagParser::look_ahead;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#variable-markdown_page","title":"variable markdown_page","text":"<pre><code>mkdoxy.DoxyTagParser.DoxyTagParser::markdown_page;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#variable-optional_dot","title":"variable optional_dot","text":"<pre><code>mkdoxy.DoxyTagParser.DoxyTagParser::optional_dot;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#variable-project","title":"variable project","text":"<pre><code>mkdoxy.DoxyTagParser.DoxyTagParser::project;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::DoxyTagParser::DoxyTagParser::__init__ (\n    self self,\n    str markdown_page,\n    bool debug=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#function-parseemptytag","title":"function parseEmptyTag","text":"<pre><code>def mkdoxy::DoxyTagParser::DoxyTagParser::parseEmptyTag (\n    self self,\n    str replacement\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#function-parseproject","title":"function parseProject","text":"<pre><code>def mkdoxy::DoxyTagParser::DoxyTagParser::parseProject (\n    self self,\n    str replacement\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#function-parseprojecttagmulti","title":"function parseProjectTagMulti","text":"<pre><code>def mkdoxy::DoxyTagParser::DoxyTagParser::parseProjectTagMulti (\n    self self,\n    str replacement\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#function-parseprojecttagsingle","title":"function parseProjectTagSingle","text":"<pre><code>def mkdoxy::DoxyTagParser::DoxyTagParser::parseProjectTagSingle (\n    self self,\n    str replacement\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#function-replacemarkdown","title":"function replaceMarkdown","text":"<pre><code>def mkdoxy::DoxyTagParser::DoxyTagParser::replaceMarkdown (\n    self self,\n    int start,\n    int end,\n    str replace_format,\n    ** kwargs\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1DoxyTagParser_1_1DoxyTagParser/#function-returnmarkdown","title":"function returnMarkdown","text":"<pre><code>def mkdoxy::DoxyTagParser::DoxyTagParser::returnMarkdown (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/DoxyTagParser.py</code></p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1cache/","title":"Namespace mkdoxy::cache","text":"<p>Namespace List &gt; mkdoxy &gt; cache</p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1cache/#classes","title":"Classes","text":"Type Name class Cache <p>The documentation for this class was generated from the following file <code>mkdoxy/cache.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1cache_1_1Cache/","title":"Class mkdoxy::cache::Cache","text":"<p>ClassList &gt; mkdoxy &gt; cache &gt; Cache</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1cache_1_1Cache/#public-attributes","title":"Public Attributes","text":"Type Name cache"},{"location":"mkdoxyApi/classmkdoxy_1_1cache_1_1Cache/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self)  def add (self self, str key, value value)  def get (self self, str key)"},{"location":"mkdoxyApi/classmkdoxy_1_1cache_1_1Cache/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1cache_1_1Cache/#variable-cache","title":"variable cache","text":"<pre><code>mkdoxy.cache.Cache::cache;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1cache_1_1Cache/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1cache_1_1Cache/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::cache::Cache::__init__ (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1cache_1_1Cache/#function-add","title":"function add","text":"<pre><code>def mkdoxy::cache::Cache::add (\n    self self,\n    str key,\n    value value\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1cache_1_1Cache/#function-get","title":"function get","text":"<pre><code>def mkdoxy::cache::Cache::get (\n    self self,\n    str key\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/cache.py</code></p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1constants/","title":"Namespace mkdoxy::constants","text":"<p>Namespace List &gt; mkdoxy &gt; constants</p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1constants/#classes","title":"Classes","text":"Type Name class Kind class Visibility"},{"location":"mkdoxyApi/namespacemkdoxy_1_1constants/#public-attributes","title":"Public Attributes","text":"Type Name list OVERLOAD_OPERATORS"},{"location":"mkdoxyApi/namespacemkdoxy_1_1constants/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/namespacemkdoxy_1_1constants/#variable-overload_operators","title":"variable OVERLOAD_OPERATORS","text":"<pre><code>list mkdoxy::constants.OVERLOAD_OPERATORS;\n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/constants.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/","title":"Class mkdoxy::constants::Kind","text":"<p>ClassList &gt; mkdoxy &gt; constants &gt; Kind</p> <p>Inherits the following classes: Enum</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#public-static-attributes","title":"Public Static Attributes","text":"Type Name string CLASS   = =  'class' string DEFINE   = =  'define' string DIR   = =  'dir' string ENUM   = =  'enum' string ENUMVALUE   = =  'enumvalue' string EXAMPLE   = =  'example' string FILE   = =  'file' string FRIEND   = =  'friend' string FUNCTION   = =  'function' string GROUP   = =  'group' string INTERFACE   = =  'interface' string NAMESPACE   = =  'namespace' string NONE   = =  'none' string PAGE   = =  'page' string PROPERTY   = =  'property' string ROOT   = =  'root' string SIGNAL   = =  'signal' string SLOT   = =  'slot' string STRUCT   = =  'struct' string TYPEDEF   = =  'typedef' string UNION   = =  'union' string VARIABLE   = =  'variable'"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#public-functions","title":"Public Functions","text":"Type Name bool is_class (self self)  bool is_class_or_struct (self self)  bool is_define (self self)  bool is_dir (self self)  bool is_enum (self self)  bool is_example (self self)  bool is_file (self self)  bool is_friend (self self)  bool is_function (self self)  bool is_group (self self)  bool is_interface (self self)  bool is_language (self self)  bool is_member (self self)  bool is_namespace (self self)  bool is_page (self self)  bool is_parent (self self)  bool is_root (self self)  bool is_struct (self self)  bool is_typedef (self self)  bool is_union (self self)  bool is_variable (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#public-static-functions","title":"Public Static Functions","text":"Type Name 'Kind' from_str (str s)"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-class","title":"variable CLASS","text":"<pre><code>string mkdoxy.constants.Kind::CLASS;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-define","title":"variable DEFINE","text":"<pre><code>string mkdoxy.constants.Kind::DEFINE;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-dir","title":"variable DIR","text":"<pre><code>string mkdoxy.constants.Kind::DIR;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-enum","title":"variable ENUM","text":"<pre><code>string mkdoxy.constants.Kind::ENUM;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-enumvalue","title":"variable ENUMVALUE","text":"<pre><code>string mkdoxy.constants.Kind::ENUMVALUE;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-example","title":"variable EXAMPLE","text":"<pre><code>string mkdoxy.constants.Kind::EXAMPLE;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-file","title":"variable FILE","text":"<pre><code>string mkdoxy.constants.Kind::FILE;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-friend","title":"variable FRIEND","text":"<pre><code>string mkdoxy.constants.Kind::FRIEND;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-function","title":"variable FUNCTION","text":"<pre><code>string mkdoxy.constants.Kind::FUNCTION;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-group","title":"variable GROUP","text":"<pre><code>string mkdoxy.constants.Kind::GROUP;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-interface","title":"variable INTERFACE","text":"<pre><code>string mkdoxy.constants.Kind::INTERFACE;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-namespace","title":"variable NAMESPACE","text":"<pre><code>string mkdoxy.constants.Kind::NAMESPACE;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-none","title":"variable NONE","text":"<pre><code>string mkdoxy.constants.Kind::NONE;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-page","title":"variable PAGE","text":"<pre><code>string mkdoxy.constants.Kind::PAGE;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-property","title":"variable PROPERTY","text":"<pre><code>string mkdoxy.constants.Kind::PROPERTY;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-root","title":"variable ROOT","text":"<pre><code>string mkdoxy.constants.Kind::ROOT;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-signal","title":"variable SIGNAL","text":"<pre><code>string mkdoxy.constants.Kind::SIGNAL;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-slot","title":"variable SLOT","text":"<pre><code>string mkdoxy.constants.Kind::SLOT;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-struct","title":"variable STRUCT","text":"<pre><code>string mkdoxy.constants.Kind::STRUCT;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-typedef","title":"variable TYPEDEF","text":"<pre><code>string mkdoxy.constants.Kind::TYPEDEF;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-union","title":"variable UNION","text":"<pre><code>string mkdoxy.constants.Kind::UNION;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#variable-variable","title":"variable VARIABLE","text":"<pre><code>string mkdoxy.constants.Kind::VARIABLE;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_class","title":"function is_class","text":"<pre><code>bool mkdoxy::constants::Kind::is_class (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_class_or_struct","title":"function is_class_or_struct","text":"<pre><code>bool mkdoxy::constants::Kind::is_class_or_struct (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_define","title":"function is_define","text":"<pre><code>bool mkdoxy::constants::Kind::is_define (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_dir","title":"function is_dir","text":"<pre><code>bool mkdoxy::constants::Kind::is_dir (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_enum","title":"function is_enum","text":"<pre><code>bool mkdoxy::constants::Kind::is_enum (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_example","title":"function is_example","text":"<pre><code>bool mkdoxy::constants::Kind::is_example (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_file","title":"function is_file","text":"<pre><code>bool mkdoxy::constants::Kind::is_file (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_friend","title":"function is_friend","text":"<pre><code>bool mkdoxy::constants::Kind::is_friend (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_function","title":"function is_function","text":"<pre><code>bool mkdoxy::constants::Kind::is_function (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_group","title":"function is_group","text":"<pre><code>bool mkdoxy::constants::Kind::is_group (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_interface","title":"function is_interface","text":"<pre><code>bool mkdoxy::constants::Kind::is_interface (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_language","title":"function is_language","text":"<pre><code>bool mkdoxy::constants::Kind::is_language (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_member","title":"function is_member","text":"<pre><code>bool mkdoxy::constants::Kind::is_member (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_namespace","title":"function is_namespace","text":"<pre><code>bool mkdoxy::constants::Kind::is_namespace (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_page","title":"function is_page","text":"<pre><code>bool mkdoxy::constants::Kind::is_page (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_parent","title":"function is_parent","text":"<pre><code>bool mkdoxy::constants::Kind::is_parent (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_root","title":"function is_root","text":"<pre><code>bool mkdoxy::constants::Kind::is_root (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_struct","title":"function is_struct","text":"<pre><code>bool mkdoxy::constants::Kind::is_struct (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_typedef","title":"function is_typedef","text":"<pre><code>bool mkdoxy::constants::Kind::is_typedef (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_union","title":"function is_union","text":"<pre><code>bool mkdoxy::constants::Kind::is_union (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-is_variable","title":"function is_variable","text":"<pre><code>bool mkdoxy::constants::Kind::is_variable (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Kind/#function-from_str","title":"function from_str","text":"<pre><code>static ' Kind ' mkdoxy::constants::Kind::from_str (\n    str s\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/constants.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Visibility/","title":"Class mkdoxy::constants::Visibility","text":"<p>ClassList &gt; mkdoxy &gt; constants &gt; Visibility</p> <p>Inherits the following classes: Enum</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Visibility/#public-static-attributes","title":"Public Static Attributes","text":"Type Name string PRIVATE   = =  'private' string PROTECTED   = =  'protected' string PUBLIC   = =  'public'"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Visibility/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Visibility/#variable-private","title":"variable PRIVATE","text":"<pre><code>string mkdoxy.constants.Visibility::PRIVATE;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Visibility/#variable-protected","title":"variable PROTECTED","text":"<pre><code>string mkdoxy.constants.Visibility::PROTECTED;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1constants_1_1Visibility/#variable-public","title":"variable PUBLIC","text":"<pre><code>string mkdoxy.constants.Visibility::PUBLIC;\n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/constants.py</code></p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1doxygen/","title":"Namespace mkdoxy::doxygen","text":"<p>Namespace List &gt; mkdoxy &gt; doxygen</p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1doxygen/#classes","title":"Classes","text":"Type Name class Doxygen"},{"location":"mkdoxyApi/namespacemkdoxy_1_1doxygen/#public-attributes","title":"Public Attributes","text":"Type Name Logger"},{"location":"mkdoxyApi/namespacemkdoxy_1_1doxygen/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/namespacemkdoxy_1_1doxygen/#variable-logger","title":"variable Logger","text":"<pre><code>mkdoxy::doxygen.Logger;\n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/doxygen.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxygen_1_1Doxygen/","title":"Class mkdoxy::doxygen::Doxygen","text":"<p>ClassList &gt; mkdoxy &gt; doxygen &gt; Doxygen</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxygen_1_1Doxygen/#public-attributes","title":"Public Attributes","text":"Type Name cache debug examples files groups pages parser root"},{"location":"mkdoxyApi/classmkdoxy_1_1doxygen_1_1Doxygen/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, path index_path, XmlParser parser, Cache cache)  def printStructure (self self)  def print_node (self self, Node node, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1doxygen_1_1Doxygen/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1doxygen_1_1Doxygen/#variable-cache","title":"variable cache","text":"<pre><code>mkdoxy.doxygen.Doxygen::cache;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxygen_1_1Doxygen/#variable-debug","title":"variable debug","text":"<pre><code>mkdoxy.doxygen.Doxygen::debug;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxygen_1_1Doxygen/#variable-examples","title":"variable examples","text":"<pre><code>mkdoxy.doxygen.Doxygen::examples;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxygen_1_1Doxygen/#variable-files","title":"variable files","text":"<pre><code>mkdoxy.doxygen.Doxygen::files;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxygen_1_1Doxygen/#variable-groups","title":"variable groups","text":"<pre><code>mkdoxy.doxygen.Doxygen::groups;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxygen_1_1Doxygen/#variable-pages","title":"variable pages","text":"<pre><code>mkdoxy.doxygen.Doxygen::pages;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxygen_1_1Doxygen/#variable-parser","title":"variable parser","text":"<pre><code>mkdoxy.doxygen.Doxygen::parser;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxygen_1_1Doxygen/#variable-root","title":"variable root","text":"<pre><code>mkdoxy.doxygen.Doxygen::root;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxygen_1_1Doxygen/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1doxygen_1_1Doxygen/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::doxygen::Doxygen::__init__ (\n    self self,\n    path index_path,\n    XmlParser parser,\n    Cache cache\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxygen_1_1Doxygen/#function-printstructure","title":"function printStructure","text":"<pre><code>def mkdoxy::doxygen::Doxygen::printStructure (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxygen_1_1Doxygen/#function-print_node","title":"function print_node","text":"<pre><code>def mkdoxy::doxygen::Doxygen::print_node (\n    self self,\n    Node node,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/doxygen.py</code></p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1doxyrun/","title":"Namespace mkdoxy::doxyrun","text":"<p>Namespace List &gt; mkdoxy &gt; doxyrun</p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1doxyrun/#classes","title":"Classes","text":"Type Name class DoxygenRun Class for running Doxygen."},{"location":"mkdoxyApi/namespacemkdoxy_1_1doxyrun/#public-attributes","title":"Public Attributes","text":"Type Name Logger"},{"location":"mkdoxyApi/namespacemkdoxy_1_1doxyrun/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/namespacemkdoxy_1_1doxyrun/#variable-logger","title":"variable Logger","text":"<pre><code>mkdoxy::doxyrun.Logger;\n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/doxyrun.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxyrun_1_1DoxygenRun/","title":"Class mkdoxy::doxyrun::DoxygenRun","text":"<p>ClassList &gt; mkdoxy &gt; doxyrun &gt; DoxygenRun</p> <p>Class for running Doxygen. More...</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxyrun_1_1DoxygenRun/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, str doxygenBinPath, str doxygenSource, str tempDoxyFolder, doxyCfgNew doxyCfgNew) Constructor. def checkAndRun (self self) Check if the source files have changed since the last run and run Doxygen if they have. str dox_dict2str (self self, dict dox_dict) Convert a dictionary to a string that can be written to a doxygen config file. PurePath getOutputFolder (self self) Get the path to the XML output folder. def hasChanged (self self) Check if the source files have changed since the last run. def run (self self) Run Doxygen with the current configuration using the Popen class."},{"location":"mkdoxyApi/classmkdoxy_1_1doxyrun_1_1DoxygenRun/#detailed-description","title":"Detailed Description","text":"<p>This class is used to run Doxygen and parse the XML output. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxyrun_1_1DoxygenRun/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1doxyrun_1_1DoxygenRun/#function-__init__","title":"function __init__","text":"<p>Constructor. <pre><code>def mkdoxy::doxyrun::DoxygenRun::__init__ (\n    self self,\n    str doxygenBinPath,\n    str doxygenSource,\n    str tempDoxyFolder,\n    doxyCfgNew doxyCfgNew\n) \n</code></pre></p> <p>Default Doxygen config options:</p> <ul> <li>INPUT: &lt;doxygenSource&gt;</li> <li>OUTPUT_DIRECTORY: &lt;tempDoxyFolder&gt;</li> <li>DOXYFILE_ENCODING: UTF-8</li> <li>GENERATE_XML: YES</li> <li>RECURSIVE: YES</li> <li>EXAMPLE_PATH: examples</li> <li>SHOW_NAMESPACES: YES</li> <li>GENERATE_HTML: NO</li> <li>GENERATE_LATEX: NO</li> </ul> <p>Parameters:</p> <ul> <li><code>doxygenBinPath</code> (str) Path to the Doxygen binary. </li> <li><code>doxygenSource</code> (str) Source files for Doxygen. </li> <li><code>tempDoxyFolder</code> (str) Temporary folder for Doxygen. </li> <li><code>doxyCfgNew</code> (dict) New Doxygen config options that will be added to the default config (new options will overwrite default options) </li> </ul>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxyrun_1_1DoxygenRun/#function-checkandrun","title":"function checkAndRun","text":"<p>Check if the source files have changed since the last run and run Doxygen if they have. <pre><code>def mkdoxy::doxyrun::DoxygenRun::checkAndRun (\n    self self\n) \n</code></pre></p> Returns: <p>(bool) True if Doxygen was run. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxyrun_1_1DoxygenRun/#function-dox_dict2str","title":"function dox_dict2str","text":"<p>Convert a dictionary to a string that can be written to a doxygen config file. <pre><code>str mkdoxy::doxyrun::DoxygenRun::dox_dict2str (\n    self self,\n    dict dox_dict\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>dox_dict</code> (dict) Dictionary to convert. </li> </ul> Returns: <p>(str) String that can be written to a doxygen config file. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxyrun_1_1DoxygenRun/#function-getoutputfolder","title":"function getOutputFolder","text":"<p>Get the path to the XML output folder. <pre><code>PurePath mkdoxy::doxyrun::DoxygenRun::getOutputFolder (\n    self self\n) \n</code></pre></p> Returns: <p>(PurePath) Path to the XML output folder. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxyrun_1_1DoxygenRun/#function-haschanged","title":"function hasChanged","text":"<p>Check if the source files have changed since the last run. <pre><code>def mkdoxy::doxyrun::DoxygenRun::hasChanged (\n    self self\n) \n</code></pre></p> Returns: <p>(bool) True if the source files have changed since the last run. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1doxyrun_1_1DoxygenRun/#function-run","title":"function run","text":"<pre><code>def mkdoxy::doxyrun::DoxygenRun::run (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/doxyrun.py</code></p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1finder/","title":"Namespace mkdoxy::finder","text":"<p>Namespace List &gt; mkdoxy &gt; finder</p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1finder/#classes","title":"Classes","text":"Type Name class Finder <p>The documentation for this class was generated from the following file <code>mkdoxy/finder.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1finder_1_1Finder/","title":"Class mkdoxy::finder::Finder","text":"<p>ClassList &gt; mkdoxy &gt; finder &gt; Finder</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1finder_1_1Finder/#public-attributes","title":"Public Attributes","text":"Type Name debug doxygen"},{"location":"mkdoxyApi/classmkdoxy_1_1finder_1_1Finder/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Dict doxygen, bool debug=False)  def doxyClass (self self, project project, str className)  def doxyClassMethod (self self, project project, str className, str methodName)  def doxyCode (self self, project project, fileName fileName)  def doxyFunction (self self, project project, str functionName)  def listToNames (self self, list list)"},{"location":"mkdoxyApi/classmkdoxy_1_1finder_1_1Finder/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1finder_1_1Finder/#variable-debug","title":"variable debug","text":"<pre><code>mkdoxy.finder.Finder::debug;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1finder_1_1Finder/#variable-doxygen","title":"variable doxygen","text":"<pre><code>mkdoxy.finder.Finder::doxygen;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1finder_1_1Finder/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1finder_1_1Finder/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::finder::Finder::__init__ (\n    self self,\n    Dict doxygen,\n    bool debug=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1finder_1_1Finder/#function-doxyclass","title":"function doxyClass","text":"<pre><code>def mkdoxy::finder::Finder::doxyClass (\n    self self,\n    project project,\n    str className\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1finder_1_1Finder/#function-doxyclassmethod","title":"function doxyClassMethod","text":"<pre><code>def mkdoxy::finder::Finder::doxyClassMethod (\n    self self,\n    project project,\n    str className,\n    str methodName\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1finder_1_1Finder/#function-doxycode","title":"function doxyCode","text":"<pre><code>def mkdoxy::finder::Finder::doxyCode (\n    self self,\n    project project,\n    fileName fileName\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1finder_1_1Finder/#function-doxyfunction","title":"function doxyFunction","text":"<pre><code>def mkdoxy::finder::Finder::doxyFunction (\n    self self,\n    project project,\n    str functionName\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1finder_1_1Finder/#function-listtonames","title":"function listToNames","text":"<pre><code>def mkdoxy::finder::Finder::listToNames (\n    self self,\n    list list\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/finder.py</code></p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorAuto/","title":"Namespace mkdoxy::generatorAuto","text":"<p>Namespace List &gt; mkdoxy &gt; generatorAuto</p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorAuto/#classes","title":"Classes","text":"Type Name class GeneratorAuto"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorAuto/#public-attributes","title":"Public Attributes","text":"Type Name dictionary ADDITIONAL_FILES   = =  { 'Namespace ListNamespace List': 'namespaces.md', 'Namespace Members': 'namespace_members.md', 'Namespace Member Functions': 'namespace_member_functions.md', 'Namespace Member Variables': 'namespace_member_variables.md', 'Namespace Member Typedefs': 'namespace_member_typedefs.md', 'Namespace Member Enumerations': 'namespace_member_enums.md', 'Class Index': 'classes.md', 'Class Hierarchy': 'hierarchy.md', 'Class Members': 'class_members.md', 'Class Member Functions': 'class_member_functions.md', 'Class Member Variables': 'class_member_variables.md', 'Class Member Typedefs': 'class_member_typedefs.md', 'Class Member Enumerations': 'class_member_enums.md', } Logger"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorAuto/#public-functions","title":"Public Functions","text":"Type Name str generate_link (name name, url url, end end=\"\\n\")"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorAuto/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorAuto/#variable-additional_files","title":"variable ADDITIONAL_FILES","text":"<pre><code>dictionary mkdoxy::generatorAuto.ADDITIONAL_FILES;\n</code></pre>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorAuto/#variable-logger","title":"variable Logger","text":"<pre><code>mkdoxy::generatorAuto.Logger;\n</code></pre>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorAuto/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorAuto/#function-generate_link","title":"function generate_link","text":"<pre><code>str mkdoxy::generatorAuto::generate_link (\n    name name,\n    url url,\n    end end=\"\\n\"\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/generatorAuto.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/","title":"Class mkdoxy::generatorAuto::GeneratorAuto","text":"<p>ClassList &gt; mkdoxy &gt; generatorAuto &gt; GeneratorAuto</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#public-attributes","title":"Public Attributes","text":"Type Name apiPath debug doxygen fullDocFiles generatorBase siteDir tempDoxyDir useDirectoryUrls"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, GeneratorBase generatorBase, str tempDoxyDir, str siteDir, str apiPath, Doxygen doxygen, bool useDirectoryUrls)  def annotated (self self, nodes nodes, dict config=None)  def classes (self self, nodes nodes, dict config=None)  def example (self self, Node node, dict config=None)  def examples (self self, nodes nodes, dict config=None)  def file (self self, Node node, dict config=None)  def fileindex (self self, nodes nodes, dict config=None)  def files (self self, nodes nodes, dict config=None)  def fullDoc (self self, dict defaultTemplateConfig)  def hierarchy (self self, nodes nodes, dict config=None)  def index (self self, nodes nodes, Kind kind_filters, kind_parents kind_parents, str title, dict config=None)  def member (self self, Node node, dict config=None)  def members (self self, nodes nodes, dict config=None)  def modules (self self, nodes nodes, dict config=None)  def namespaces (self self, nodes nodes, dict config=None)  def page (self self, Node node, dict config=None)  def pages (self self, nodes nodes, dict config=None)  def programlisting (self self, node node, dict config=None)  def relatedpages (self self, nodes nodes, dict config=None)  def save (self self, str path, str output)  def summary (self self, dict defaultTemplateConfig)"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#variable-apipath","title":"variable apiPath","text":"<pre><code>mkdoxy.generatorAuto.GeneratorAuto::apiPath;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#variable-debug","title":"variable debug","text":"<pre><code>mkdoxy.generatorAuto.GeneratorAuto::debug;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#variable-doxygen","title":"variable doxygen","text":"<pre><code>mkdoxy.generatorAuto.GeneratorAuto::doxygen;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#variable-fulldocfiles","title":"variable fullDocFiles","text":"<pre><code>mkdoxy.generatorAuto.GeneratorAuto::fullDocFiles;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#variable-generatorbase","title":"variable generatorBase","text":"<pre><code>mkdoxy.generatorAuto.GeneratorAuto::generatorBase;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#variable-sitedir","title":"variable siteDir","text":"<pre><code>mkdoxy.generatorAuto.GeneratorAuto::siteDir;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#variable-tempdoxydir","title":"variable tempDoxyDir","text":"<pre><code>mkdoxy.generatorAuto.GeneratorAuto::tempDoxyDir;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#variable-usedirectoryurls","title":"variable useDirectoryUrls","text":"<pre><code>mkdoxy.generatorAuto.GeneratorAuto::useDirectoryUrls;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::__init__ (\n    self self,\n    GeneratorBase generatorBase,\n    str tempDoxyDir,\n    str siteDir,\n    str apiPath,\n    Doxygen doxygen,\n    bool useDirectoryUrls\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-annotated","title":"function annotated","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::annotated (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-classes","title":"function classes","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::classes (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-example","title":"function example","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::example (\n    self self,\n    Node node,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-examples","title":"function examples","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::examples (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-file","title":"function file","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::file (\n    self self,\n    Node node,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-fileindex","title":"function fileindex","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::fileindex (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-files","title":"function files","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::files (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-fulldoc","title":"function fullDoc","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::fullDoc (\n    self self,\n    dict defaultTemplateConfig\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-hierarchy","title":"function hierarchy","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::hierarchy (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-index","title":"function index","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::index (\n    self self,\n    nodes nodes,\n    Kind kind_filters,\n    kind_parents kind_parents,\n    str title,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-member","title":"function member","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::member (\n    self self,\n    Node node,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-members","title":"function members","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::members (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-modules","title":"function modules","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::modules (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-namespaces","title":"function namespaces","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::namespaces (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-page","title":"function page","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::page (\n    self self,\n    Node node,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-pages","title":"function pages","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::pages (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-programlisting","title":"function programlisting","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::programlisting (\n    self self,\n    node node,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-relatedpages","title":"function relatedpages","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::relatedpages (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-save","title":"function save","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::save (\n    self self,\n    str path,\n    str output\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorAuto_1_1GeneratorAuto/#function-summary","title":"function summary","text":"<pre><code>def mkdoxy::generatorAuto::GeneratorAuto::summary (\n    self self,\n    dict defaultTemplateConfig\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/generatorAuto.py</code></p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorBase/","title":"Namespace mkdoxy::generatorBase","text":"<p>Namespace List &gt; mkdoxy &gt; generatorBase</p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorBase/#classes","title":"Classes","text":"Type Name class GeneratorBase Base class for all generators."},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorBase/#public-attributes","title":"Public Attributes","text":"Type Name string LETTERS   = =  string.ascii_lowercase + '~_@\\' Logger"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorBase/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorBase/#variable-letters","title":"variable LETTERS","text":"<pre><code>string mkdoxy::generatorBase.LETTERS;\n</code></pre>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorBase/#variable-logger","title":"variable Logger","text":"<pre><code>mkdoxy::generatorBase.Logger;\n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/generatorBase.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/","title":"Class mkdoxy::generatorBase::GeneratorBase","text":"<p>ClassList &gt; mkdoxy &gt; generatorBase &gt; GeneratorBase</p> <p>Base class for all generators. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, str templateDir=\"\", bool ignore_errors=False, bool debug=False) Constructor. def annotated (self self, nodes nodes, dict config=None) Render an annotated page. def classes (self self, nodes nodes, dict config=None) Render a classes page. def code (self self, node node, dict config=None, str code=\"\") Render a code page. def error (self self, dict config, str title, str description, str code_header=\"\", str code=\"\", str code_language=\"\", str snippet_code=\"\") Render an error page. def example (self self, Node node, dict config=None) Render an example page. def examples (self self, nodes nodes, config config=None) Render an examples page. def file (self self, Node node, dict config=None) Render a file page. def fileindex (self self, nodes nodes, dict config=None) Render a fileindex page. def function (self self, Node node, dict config=None) Render a function page. def hierarchy (self self, nodes nodes, dict config=None) Render a hierarchy page. def index (self self, nodes nodes, Kind kind_filters, kind_parents kind_parents, str title, dict config=None) Render an index page. [Template, dict] loadConfigAndTemplate (self self, str name)  def member (self self, Node node, dict config=None) Render a member page. def modules (self self, nodes nodes, dict config=None) Render a modules page. def namespaces (self self, nodes nodes, dict config=None) Render a namespaces page. def page (self self, Node node, dict config=None) Render a page. def programlisting (self self, node node, dict config=None) Render a programlisting page. def relatedpages (self self, nodes nodes, dict config=None) Render a related pages page. str render (self self, Template tmpl, dict data) Render a template with given data."},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#public-static-functions","title":"Public Static Functions","text":"Type Name str shift_each_line (str value, str shift_char='\\t') Shift each line of a given string for a given character."},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-__init__","title":"function __init__","text":"<p>Constructor. <pre><code>def mkdoxy::generatorBase::GeneratorBase::__init__ (\n    self self,\n    str templateDir=\"\",\n    bool ignore_errors=False,\n    bool debug=False\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>templateDir</code> (str): Path to the directory with custom templates (default: \"\") </li> <li><code>ignore_errors</code> (bool): If True, errors will be ignored (default: False) </li> <li><code>debug</code> (bool): If True, debug messages will be printed (default: False) </li> </ul>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-annotated","title":"function annotated","text":"<p>Render an annotated page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::annotated (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>nodes</code> ([Node]): List of nodes to render. </li> <li><code>config</code> (dict): Config for the template (default: None) </li> </ul> <p>Returns:</p> <p>(str): Rendered annotated page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-classes","title":"function classes","text":"<p>Render a classes page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::classes (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>nodes</code> ([Node]): List of nodes to render. </li> <li><code>config</code> (dict): Config for the template. (default: None) </li> </ul> <p>Returns:</p> <p>(str): Rendered classes page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-code","title":"function code","text":"<p>Render a code page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::code (\n    self self,\n    node node,\n    dict config=None,\n    str code=\"\"\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>node</code> ([Node]): Node to render. </li> <li><code>config</code> (dict): Config for the template (default: None) </li> <li><code>code</code> (str): Code to render (default: \"\") </li> </ul> <p>Returns:</p> <p>(str): Rendered code page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-error","title":"function error","text":"<p>Render an error page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::error (\n    self self,\n    dict config,\n    str title,\n    str description,\n    str code_header=\"\",\n    str code=\"\",\n    str code_language=\"\",\n    str snippet_code=\"\"\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>title</code> (str): Title of the error page (default: \"\") </li> <li><code>message</code> (str): Message of the error page (default: \"\") </li> <li><code>language</code> (str): Programming language of the error page (default: \"\") </li> </ul> <p>Returns:</p> <p>(str): Rendered error page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-example","title":"function example","text":"<p>Render an example page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::example (\n    self self,\n    Node node,\n    dict config=None\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>node</code> (Node): Node to render. </li> <li><code>config</code> (dict): Config for the template. (default: None) </li> </ul> <p>Returns:</p> <p>(str): Rendered example page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-examples","title":"function examples","text":"<p>Render an examples page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::examples (\n    self self,\n    nodes nodes,\n    config config=None\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>nodes</code> ([Node]): List of nodes to render. </li> <li><code>config</code> (dict): Config for the template (default: None) </li> </ul> <p>Returns:</p> <p>(str): Rendered examples page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-file","title":"function file","text":"<p>Render a file page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::file (\n    self self,\n    Node node,\n    dict config=None\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>node</code> (Node): Node to render. </li> <li><code>config</code> (dict): Config for the template. (default: None) </li> </ul> <p>Returns:</p> <p>(str): Rendered file page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-fileindex","title":"function fileindex","text":"<p>Render a fileindex page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::fileindex (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>nodes</code> ([Node]): List of nodes to render. </li> <li><code>config</code> (dict): Config for the template (default: None) </li> </ul> <p>Returns:</p> <p>(str): Rendered fileindex page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-function","title":"function function","text":"<p>Render a function page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::function (\n    self self,\n    Node node,\n    dict config=None\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>node</code> (Node): Node to render. </li> <li><code>config</code> (dict): Config for the template. (default: None) </li> </ul> <p>Returns:</p> <p>(str): Rendered function page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-hierarchy","title":"function hierarchy","text":"<p>Render a hierarchy page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::hierarchy (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>nodes</code> ([Node]): List of nodes to render. </li> <li><code>config</code> (dict): Config for the template. (default: None) </li> </ul> <p>Returns:</p> <p>(str): Rendered hierarchy page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-index","title":"function index","text":"<p>Render an index page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::index (\n    self self,\n    nodes nodes,\n    Kind kind_filters,\n    kind_parents kind_parents,\n    str title,\n    dict config=None\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>nodes</code> ([Node]): List of nodes to render. </li> <li><code>kind_filters</code> (Kind): Kind of nodes to render. </li> <li><code>kind_parents</code> ([Kind]): List of parent kinds of nodes to render. </li> <li><code>title</code> (str): Title of the index page. </li> <li><code>config</code> (dict): Config for the template. (default: None) </li> </ul> <p>Returns:</p> <p>(str): Rendered index page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-loadconfigandtemplate","title":"function loadConfigAndTemplate","text":"<pre><code>[Template, dict] mkdoxy::generatorBase::GeneratorBase::loadConfigAndTemplate (\n    self self,\n    str name\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-member","title":"function member","text":"<p>Render a member page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::member (\n    self self,\n    Node node,\n    dict config=None\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>node</code> (Node): Node to render. </li> <li><code>config</code> (dict): Config for the template. (default: None) </li> </ul> <p>Returns:</p> <p>(str): Rendered member page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-modules","title":"function modules","text":"<p>Render a modules page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::modules (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>nodes</code> ([Node]): List of nodes to render. </li> <li><code>config</code> (dict): Config for the template. (default: None) </li> </ul> <p>Returns:</p> <p>(str): Rendered modules page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-namespaces","title":"function namespaces","text":"<p>Render a namespaces page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::namespaces (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>nodes</code> ([Node]): List of nodes to render. </li> <li><code>config</code> (dict): Config for the template. (default: None) </li> </ul> <p>Returns:</p> <p>(str): Rendered namespaces page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-page","title":"function page","text":"<p>Render a page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::page (\n    self self,\n    Node node,\n    dict config=None\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>node</code> (Node): Node to render. </li> <li><code>config</code> (dict): Config for the template. (default: None) </li> </ul> <p>Returns:</p> <p>(str): Rendered page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-programlisting","title":"function programlisting","text":"<p>Render a programlisting page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::programlisting (\n    self self,\n    node node,\n    dict config=None\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>node</code> ([Node]): Node to render. </li> <li><code>config</code> (dict): Config for the template (default: None) </li> </ul> <p>Returns:</p> <p>(str): Rendered programlisting page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-relatedpages","title":"function relatedpages","text":"<p>Render a related pages page. <pre><code>def mkdoxy::generatorBase::GeneratorBase::relatedpages (\n    self self,\n    nodes nodes,\n    dict config=None\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>nodes</code> ([Node]): List of nodes to render. </li> <li><code>config</code> (dict): Config for the template. (default: None) </li> </ul> <p>Returns:</p> <p>(str): Rendered related pages page. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-render","title":"function render","text":"<p>Render a template with given data. <pre><code>str mkdoxy::generatorBase::GeneratorBase::render (\n    self self,\n    Template tmpl,\n    dict data\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>tmpl</code> (Template): Template to render. </li> <li><code>data</code> (dict): Data to render the template. </li> </ul> <p>Returns:</p> <p>(str): Rendered template. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1generatorBase_1_1GeneratorBase/#function-shift_each_line","title":"function shift_each_line","text":"<p>Shift each line of a given string for a given character. <pre><code>static str mkdoxy::generatorBase::GeneratorBase::shift_each_line (\n    str value,\n    str shift_char='\\t'\n) \n</code></pre></p> <p>It is used to shift the content for Markdown code blocks or other content that should be shifted. </p> <p>Parameters:</p> <ul> <li><code>value</code> (str): String to shift. </li> <li><code>shift_char</code> (str): Character to shift the string (default: '\\t'). </li> </ul> <p>Returns:</p> <p>(str): Shifted string. </p> <p>The documentation for this class was generated from the following file <code>mkdoxy/generatorBase.py</code></p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorSnippets/","title":"Namespace mkdoxy::generatorSnippets","text":"<p>Namespace List &gt; mkdoxy &gt; generatorSnippets</p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorSnippets/#classes","title":"Classes","text":"Type Name class GeneratorSnippets class SnippetClass"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorSnippets/#public-attributes","title":"Public Attributes","text":"Type Name Logger string regexIncorrect   = =  r\"(?s)(?&lt;!```yaml\\n)(^::: doxy)(.(?P&lt;project&gt;[a-zA-Z0-9_]+))?[.]?[\\s]*\\n(?P&lt;yaml&gt;.*?)\\s*\\n(?:(?=\\n)|(?=:::)|\\Z)\" string regexLong   = =  r\"(?s)(?&lt;!<code>``yaml\\n)(^::: doxy\\.(?P&amp;lt;project&amp;gt;[a-zA-Z0-9\\_]+)\\.(?P&amp;lt;argument&amp;gt;[a-zA-Z0-9\\_.]+))\\s\\*\\n(?P&amp;lt;yaml&amp;gt;.\\*?)(?:(?:(?:\\r\\*\\n)(?=\\n))\\|(?=:::)\\|</code>|\\Z)\" string regexShort   = =  r\"(?s)(?&lt;!```yaml\\n)(^::: doxy.(?P&lt;project&gt;[a-zA-Z0-9_]+).(?P&lt;argument&gt;[a-zA-Z0-9_.]+))\\s*\\n(?:(?=\\n)|(?=:::)|\\Z)\""},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorSnippets/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorSnippets/#variable-logger","title":"variable Logger","text":"<pre><code>mkdoxy::generatorSnippets.Logger;\n</code></pre>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorSnippets/#variable-regexincorrect","title":"variable regexIncorrect","text":"<pre><code>string mkdoxy::generatorSnippets.regexIncorrect;\n</code></pre>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorSnippets/#variable-regexlong","title":"variable regexLong","text":"<pre><code>string mkdoxy::generatorSnippets.regexLong;\n</code></pre>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1generatorSnippets/#variable-regexshort","title":"variable regexShort","text":"<pre><code>string mkdoxy::generatorSnippets.regexShort;\n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/generatorSnippets.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/","title":"Class mkdoxy::generatorSnippets::GeneratorSnippets","text":"<p>ClassList &gt; mkdoxy &gt; generatorSnippets &gt; GeneratorSnippets</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#public-attributes","title":"Public Attributes","text":"Type Name config debug doxy_arguments doxygen finder generatorBase markdown page pageUrlPrefix projects useDirectoryUrls"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, str markdown, dict generatorBase, dict doxygen, dict] projects, bool useDirectoryUrls, pages.Page page, dict config, bool debug=False)  str call_doxy_by_name (self self, snippet snippet, str project, str argument, dict config)  bool checkConfig (self self, snippet snippet, str project, config config, required_params required_params)  def codeStrip (self self, codeRaw codeRaw, str codeLanguage, int start=1, int end=None)  def doxyClass (self self, snippet snippet, str project, dict config)  def doxyClassHierarchy (self self, snippet snippet, str project, config config)  def doxyClassIndex (self self, snippet snippet, str project, config config)  def doxyClassList (self self, snippet snippet, str project, config config)  def doxyClassMethod (self self, snippet snippet, str project, config config)  def doxyCode (self self, snippet snippet, str project, config config)  str doxyError (self self, project project, dict config, str title, str description, str code_header=\"\", str code=\"\", str code_language=\"\", str snippet_code=\"\") Create documentation generator callbacks. def doxyFileList (self self, snippet snippet, str project, config config)  def doxyFunction (self self, snippet snippet, str project, dict config)  def doxyNamespaceList (self self, snippet snippet, str project, config config)  def generate (self self)  str incorrect_argument (self self, str project, str argument, dict config, str snippet)  str incorrect_project (self self, str project, dict config, str snippet)  def is_doxy_inactive (self self, dict config)  def is_project_exist (self self, str project)  def replace_markdown (self self, int start, int end, str replacement)  dict try_load_yaml (self self, str yaml_raw, str project, str snippet, dict config)"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#variable-config","title":"variable config","text":"<pre><code>mkdoxy.generatorSnippets.GeneratorSnippets::config;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#variable-debug","title":"variable debug","text":"<pre><code>mkdoxy.generatorSnippets.GeneratorSnippets::debug;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#variable-doxy_arguments","title":"variable doxy_arguments","text":"<pre><code>mkdoxy.generatorSnippets.GeneratorSnippets::doxy_arguments;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#variable-doxygen","title":"variable doxygen","text":"<pre><code>mkdoxy.generatorSnippets.GeneratorSnippets::doxygen;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#variable-finder","title":"variable finder","text":"<pre><code>mkdoxy.generatorSnippets.GeneratorSnippets::finder;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#variable-generatorbase","title":"variable generatorBase","text":"<pre><code>mkdoxy.generatorSnippets.GeneratorSnippets::generatorBase;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#variable-markdown","title":"variable markdown","text":"<pre><code>mkdoxy.generatorSnippets.GeneratorSnippets::markdown;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#variable-page","title":"variable page","text":"<pre><code>mkdoxy.generatorSnippets.GeneratorSnippets::page;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#variable-pageurlprefix","title":"variable pageUrlPrefix","text":"<pre><code>mkdoxy.generatorSnippets.GeneratorSnippets::pageUrlPrefix;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#variable-projects","title":"variable projects","text":"<pre><code>mkdoxy.generatorSnippets.GeneratorSnippets::projects;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#variable-usedirectoryurls","title":"variable useDirectoryUrls","text":"<pre><code>mkdoxy.generatorSnippets.GeneratorSnippets::useDirectoryUrls;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::generatorSnippets::GeneratorSnippets::__init__ (\n    self self,\n    str markdown,\n    dict generatorBase,\n    dict doxygen,\n    dict] projects,\n    bool useDirectoryUrls,\n    pages.Page page,\n    dict config,\n    bool debug=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-call_doxy_by_name","title":"function call_doxy_by_name","text":"<pre><code>str mkdoxy::generatorSnippets::GeneratorSnippets::call_doxy_by_name (\n    self self,\n    snippet snippet,\n    str project,\n    str argument,\n    dict config\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-checkconfig","title":"function checkConfig","text":"<pre><code>bool mkdoxy::generatorSnippets::GeneratorSnippets::checkConfig (\n    self self,\n    snippet snippet,\n    str project,\n    config config,\n    required_params required_params\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-codestrip","title":"function codeStrip","text":"<pre><code>def mkdoxy::generatorSnippets::GeneratorSnippets::codeStrip (\n    self self,\n    codeRaw codeRaw,\n    str codeLanguage,\n    int start=1,\n    int end=None\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-doxyclass","title":"function doxyClass","text":"<pre><code>def mkdoxy::generatorSnippets::GeneratorSnippets::doxyClass (\n    self self,\n    snippet snippet,\n    str project,\n    dict config\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-doxyclasshierarchy","title":"function doxyClassHierarchy","text":"<pre><code>def mkdoxy::generatorSnippets::GeneratorSnippets::doxyClassHierarchy (\n    self self,\n    snippet snippet,\n    str project,\n    config config\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-doxyclassindex","title":"function doxyClassIndex","text":"<pre><code>def mkdoxy::generatorSnippets::GeneratorSnippets::doxyClassIndex (\n    self self,\n    snippet snippet,\n    str project,\n    config config\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-doxyclasslist","title":"function doxyClassList","text":"<pre><code>def mkdoxy::generatorSnippets::GeneratorSnippets::doxyClassList (\n    self self,\n    snippet snippet,\n    str project,\n    config config\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-doxyclassmethod","title":"function doxyClassMethod","text":"<pre><code>def mkdoxy::generatorSnippets::GeneratorSnippets::doxyClassMethod (\n    self self,\n    snippet snippet,\n    str project,\n    config config\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-doxycode","title":"function doxyCode","text":"<pre><code>def mkdoxy::generatorSnippets::GeneratorSnippets::doxyCode (\n    self self,\n    snippet snippet,\n    str project,\n    config config\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-doxyerror","title":"function doxyError","text":"<pre><code>str mkdoxy::generatorSnippets::GeneratorSnippets::doxyError (\n    self self,\n    project project,\n    dict config,\n    str title,\n    str description,\n    str code_header=\"\",\n    str code=\"\",\n    str code_language=\"\",\n    str snippet_code=\"\"\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-doxyfilelist","title":"function doxyFileList","text":"<pre><code>def mkdoxy::generatorSnippets::GeneratorSnippets::doxyFileList (\n    self self,\n    snippet snippet,\n    str project,\n    config config\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-doxyfunction","title":"function doxyFunction","text":"<pre><code>def mkdoxy::generatorSnippets::GeneratorSnippets::doxyFunction (\n    self self,\n    snippet snippet,\n    str project,\n    dict config\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-doxynamespacelist","title":"function doxyNamespaceList","text":"<pre><code>def mkdoxy::generatorSnippets::GeneratorSnippets::doxyNamespaceList (\n    self self,\n    snippet snippet,\n    str project,\n    config config\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-generate","title":"function generate","text":"<pre><code>def mkdoxy::generatorSnippets::GeneratorSnippets::generate (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-incorrect_argument","title":"function incorrect_argument","text":"<pre><code>str mkdoxy::generatorSnippets::GeneratorSnippets::incorrect_argument (\n    self self,\n    str project,\n    str argument,\n    dict config,\n    str snippet\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-incorrect_project","title":"function incorrect_project","text":"<pre><code>str mkdoxy::generatorSnippets::GeneratorSnippets::incorrect_project (\n    self self,\n    str project,\n    dict config,\n    str snippet\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-is_doxy_inactive","title":"function is_doxy_inactive","text":"<pre><code>def mkdoxy::generatorSnippets::GeneratorSnippets::is_doxy_inactive (\n    self self,\n    dict config\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-is_project_exist","title":"function is_project_exist","text":"<pre><code>def mkdoxy::generatorSnippets::GeneratorSnippets::is_project_exist (\n    self self,\n    str project\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-replace_markdown","title":"function replace_markdown","text":"<pre><code>def mkdoxy::generatorSnippets::GeneratorSnippets::replace_markdown (\n    self self,\n    int start,\n    int end,\n    str replacement\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1GeneratorSnippets/#function-try_load_yaml","title":"function try_load_yaml","text":"<pre><code>dict mkdoxy::generatorSnippets::GeneratorSnippets::try_load_yaml (\n    self self,\n    str yaml_raw,\n    str project,\n    str snippet,\n    dict config\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/generatorSnippets.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1SnippetClass/","title":"Class mkdoxy::generatorSnippets::SnippetClass","text":"<p>ClassList &gt; mkdoxy &gt; generatorSnippets &gt; SnippetClass</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1SnippetClass/#public-attributes","title":"Public Attributes","text":"Type Name config"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1SnippetClass/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, config config)  def default (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1SnippetClass/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1SnippetClass/#variable-config","title":"variable config","text":"<pre><code>mkdoxy.generatorSnippets.SnippetClass::config;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1SnippetClass/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1SnippetClass/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::generatorSnippets::SnippetClass::__init__ (\n    self self,\n    config config\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1generatorSnippets_1_1SnippetClass/#function-default","title":"function default","text":"<pre><code>def mkdoxy::generatorSnippets::SnippetClass::default (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/generatorSnippets.py</code></p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1markdown/","title":"Namespace mkdoxy::markdown","text":"<p>Namespace List &gt; mkdoxy &gt; markdown</p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1markdown/#classes","title":"Classes","text":"Type Name class Br class Code class Md class MdBlockQuote class MdBold class MdCodeBlock class MdHeader class MdHint class MdImage class MdItalic class MdLine class MdLink class MdList class MdParagraph class MdRenderer class MdTable class MdTableCell class MdTableRow class Text"},{"location":"mkdoxyApi/namespacemkdoxy_1_1markdown/#public-functions","title":"Public Functions","text":"Type Name str escape (str s)"},{"location":"mkdoxyApi/namespacemkdoxy_1_1markdown/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/namespacemkdoxy_1_1markdown/#function-escape","title":"function escape","text":"<pre><code>str mkdoxy::markdown::escape (\n    str s\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Br/","title":"Class mkdoxy::markdown::Br","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; Br</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Br/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Br/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Br/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::Br::__init__ (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Br/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::Br::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Code/","title":"Class mkdoxy::markdown::Code","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; Code</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Code/#public-attributes","title":"Public Attributes","text":"Type Name text"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Code/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, str text)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Code/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Code/#variable-text","title":"variable text","text":"<pre><code>mkdoxy.markdown.Code::text;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Code/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Code/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::Code::__init__ (\n    self self,\n    str text\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Code/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::Code::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Md/","title":"Class mkdoxy::markdown::Md","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; Md</p> <p>Inherited by the following classes: mkdoxy::markdown::MdBlockQuote,  mkdoxy::markdown::MdBold,  mkdoxy::markdown::MdHeader,  mkdoxy::markdown::MdHint,  mkdoxy::markdown::MdItalic,  mkdoxy::markdown::MdLink,  mkdoxy::markdown::MdList,  mkdoxy::markdown::MdParagraph,  mkdoxy::markdown::MdTable,  mkdoxy::markdown::MdTableCell,  mkdoxy::markdown::MdTableRow</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Md/#public-attributes","title":"Public Attributes","text":"Type Name children"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Md/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, List children)  def append (self self, 'Md' child)  def extend (self self, List child)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Md/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Md/#variable-children","title":"variable children","text":"<pre><code>mkdoxy.markdown.Md::children;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Md/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Md/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::Md::__init__ (\n    self self,\n    List children\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Md/#function-append","title":"function append","text":"<pre><code>def mkdoxy::markdown::Md::append (\n    self self,\n    ' Md ' child\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Md/#function-extend","title":"function extend","text":"<pre><code>def mkdoxy::markdown::Md::extend (\n    self self,\n    List child\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdBlockQuote/","title":"Class mkdoxy::markdown::MdBlockQuote","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; MdBlockQuote</p> <p>Inherits the following classes: mkdoxy::markdown::Md</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdBlockQuote/#public-attributes-inherited-from-mkdoxymarkdownmd","title":"Public Attributes inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name children"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdBlockQuote/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, List children)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdBlockQuote/#public-functions-inherited-from-mkdoxymarkdownmd","title":"Public Functions inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name def __init__ (self self, List children)  def append (self self, 'Md' child)  def extend (self self, List child)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdBlockQuote/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdBlockQuote/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::MdBlockQuote::__init__ (\n    self self,\n    List children\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdBlockQuote/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::MdBlockQuote::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdBold/","title":"Class mkdoxy::markdown::MdBold","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; MdBold</p> <p>Inherits the following classes: mkdoxy::markdown::Md</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdBold/#public-attributes-inherited-from-mkdoxymarkdownmd","title":"Public Attributes inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name children"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdBold/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, List children)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdBold/#public-functions-inherited-from-mkdoxymarkdownmd","title":"Public Functions inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name def __init__ (self self, List children)  def append (self self, 'Md' child)  def extend (self self, List child)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdBold/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdBold/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::MdBold::__init__ (\n    self self,\n    List children\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdBold/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::MdBold::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdCodeBlock/","title":"Class mkdoxy::markdown::MdCodeBlock","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; MdCodeBlock</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdCodeBlock/#public-attributes","title":"Public Attributes","text":"Type Name lines"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdCodeBlock/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, List lines)  def append (self self, str line)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdCodeBlock/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdCodeBlock/#variable-lines","title":"variable lines","text":"<pre><code>mkdoxy.markdown.MdCodeBlock::lines;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdCodeBlock/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdCodeBlock/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::MdCodeBlock::__init__ (\n    self self,\n    List lines\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdCodeBlock/#function-append","title":"function append","text":"<pre><code>def mkdoxy::markdown::MdCodeBlock::append (\n    self self,\n    str line\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdCodeBlock/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::MdCodeBlock::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHeader/","title":"Class mkdoxy::markdown::MdHeader","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; MdHeader</p> <p>Inherits the following classes: mkdoxy::markdown::Md</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHeader/#public-attributes","title":"Public Attributes","text":"Type Name level"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHeader/#public-attributes-inherited-from-mkdoxymarkdownmd","title":"Public Attributes inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name children"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHeader/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, int level, List children)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHeader/#public-functions-inherited-from-mkdoxymarkdownmd","title":"Public Functions inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name def __init__ (self self, List children)  def append (self self, 'Md' child)  def extend (self self, List child)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHeader/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHeader/#variable-level","title":"variable level","text":"<pre><code>mkdoxy.markdown.MdHeader::level;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHeader/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHeader/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::MdHeader::__init__ (\n    self self,\n    int level,\n    List children\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHeader/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::MdHeader::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHint/","title":"Class mkdoxy::markdown::MdHint","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; MdHint</p> <p>Inherits the following classes: mkdoxy::markdown::Md</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHint/#public-attributes","title":"Public Attributes","text":"Type Name title typ"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHint/#public-attributes-inherited-from-mkdoxymarkdownmd","title":"Public Attributes inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name children"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHint/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, List children, str typ, str title)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHint/#public-functions-inherited-from-mkdoxymarkdownmd","title":"Public Functions inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name def __init__ (self self, List children)  def append (self self, 'Md' child)  def extend (self self, List child)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHint/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHint/#variable-title","title":"variable title","text":"<pre><code>mkdoxy.markdown.MdHint::title;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHint/#variable-typ","title":"variable typ","text":"<pre><code>mkdoxy.markdown.MdHint::typ;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHint/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHint/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::MdHint::__init__ (\n    self self,\n    List children,\n    str typ,\n    str title\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdHint/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::MdHint::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdImage/","title":"Class mkdoxy::markdown::MdImage","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; MdImage</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdImage/#public-attributes","title":"Public Attributes","text":"Type Name url"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdImage/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, str url)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdImage/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdImage/#variable-url","title":"variable url","text":"<pre><code>mkdoxy.markdown.MdImage::url;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdImage/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdImage/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::MdImage::__init__ (\n    self self,\n    str url\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdImage/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::MdImage::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdItalic/","title":"Class mkdoxy::markdown::MdItalic","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; MdItalic</p> <p>Inherits the following classes: mkdoxy::markdown::Md</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdItalic/#public-attributes-inherited-from-mkdoxymarkdownmd","title":"Public Attributes inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name children"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdItalic/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, List children)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdItalic/#public-functions-inherited-from-mkdoxymarkdownmd","title":"Public Functions inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name def __init__ (self self, List children)  def append (self self, 'Md' child)  def extend (self self, List child)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdItalic/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdItalic/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::MdItalic::__init__ (\n    self self,\n    List children\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdItalic/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::MdItalic::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdLine/","title":"Class mkdoxy::markdown::MdLine","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; MdLine</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdLine/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdLine/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdLine/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::MdLine::__init__ (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdLine/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::MdLine::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdLink/","title":"Class mkdoxy::markdown::MdLink","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; MdLink</p> <p>Inherits the following classes: mkdoxy::markdown::Md</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdLink/#public-attributes","title":"Public Attributes","text":"Type Name url"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdLink/#public-attributes-inherited-from-mkdoxymarkdownmd","title":"Public Attributes inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name children"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdLink/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, List children, str url)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdLink/#public-functions-inherited-from-mkdoxymarkdownmd","title":"Public Functions inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name def __init__ (self self, List children)  def append (self self, 'Md' child)  def extend (self self, List child)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdLink/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdLink/#variable-url","title":"variable url","text":"<pre><code>mkdoxy.markdown.MdLink::url;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdLink/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdLink/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::MdLink::__init__ (\n    self self,\n    List children,\n    str url\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdLink/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::MdLink::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdList/","title":"Class mkdoxy::markdown::MdList","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; MdList</p> <p>Inherits the following classes: mkdoxy::markdown::Md</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdList/#public-attributes-inherited-from-mkdoxymarkdownmd","title":"Public Attributes inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name children"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdList/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, List children)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdList/#public-functions-inherited-from-mkdoxymarkdownmd","title":"Public Functions inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name def __init__ (self self, List children)  def append (self self, 'Md' child)  def extend (self self, List child)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdList/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdList/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::MdList::__init__ (\n    self self,\n    List children\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdList/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::MdList::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdParagraph/","title":"Class mkdoxy::markdown::MdParagraph","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; MdParagraph</p> <p>Inherits the following classes: mkdoxy::markdown::Md</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdParagraph/#public-attributes-inherited-from-mkdoxymarkdownmd","title":"Public Attributes inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name children"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdParagraph/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, List children)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdParagraph/#public-functions-inherited-from-mkdoxymarkdownmd","title":"Public Functions inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name def __init__ (self self, List children)  def append (self self, 'Md' child)  def extend (self self, List child)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdParagraph/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdParagraph/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::MdParagraph::__init__ (\n    self self,\n    List children\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdParagraph/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::MdParagraph::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdRenderer/","title":"Class mkdoxy::markdown::MdRenderer","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; MdRenderer</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdRenderer/#public-attributes","title":"Public Attributes","text":"Type Name eol_flag output"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdRenderer/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self)  def eol (self self)  def write (self self, str s)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdRenderer/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdRenderer/#variable-eol_flag","title":"variable eol_flag","text":"<pre><code>mkdoxy.markdown.MdRenderer::eol_flag;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdRenderer/#variable-output","title":"variable output","text":"<pre><code>mkdoxy.markdown.MdRenderer::output;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdRenderer/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdRenderer/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::MdRenderer::__init__ (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdRenderer/#function-eol","title":"function eol","text":"<pre><code>def mkdoxy::markdown::MdRenderer::eol (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdRenderer/#function-write","title":"function write","text":"<pre><code>def mkdoxy::markdown::MdRenderer::write (\n    self self,\n    str s\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTable/","title":"Class mkdoxy::markdown::MdTable","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; MdTable</p> <p>Inherits the following classes: mkdoxy::markdown::Md</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTable/#public-attributes-inherited-from-mkdoxymarkdownmd","title":"Public Attributes inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name children"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTable/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTable/#public-functions-inherited-from-mkdoxymarkdownmd","title":"Public Functions inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name def __init__ (self self, List children)  def append (self self, 'Md' child)  def extend (self self, List child)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTable/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTable/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::MdTable::__init__ (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTable/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::MdTable::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTableCell/","title":"Class mkdoxy::markdown::MdTableCell","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; MdTableCell</p> <p>Inherits the following classes: mkdoxy::markdown::Md</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTableCell/#public-attributes-inherited-from-mkdoxymarkdownmd","title":"Public Attributes inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name children"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTableCell/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, List children)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTableCell/#public-functions-inherited-from-mkdoxymarkdownmd","title":"Public Functions inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name def __init__ (self self, List children)  def append (self self, 'Md' child)  def extend (self self, List child)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTableCell/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTableCell/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::MdTableCell::__init__ (\n    self self,\n    List children\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTableCell/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::MdTableCell::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTableRow/","title":"Class mkdoxy::markdown::MdTableRow","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; MdTableRow</p> <p>Inherits the following classes: mkdoxy::markdown::Md</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTableRow/#public-attributes-inherited-from-mkdoxymarkdownmd","title":"Public Attributes inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name children"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTableRow/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, List children)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTableRow/#public-functions-inherited-from-mkdoxymarkdownmd","title":"Public Functions inherited from mkdoxy::markdown::Md","text":"<p>See mkdoxy::markdown::Md</p> Type Name def __init__ (self self, List children)  def append (self self, 'Md' child)  def extend (self self, List child)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTableRow/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTableRow/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::MdTableRow::__init__ (\n    self self,\n    List children\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1MdTableRow/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::MdTableRow::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Text/","title":"Class mkdoxy::markdown::Text","text":"<p>ClassList &gt; mkdoxy &gt; markdown &gt; Text</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Text/#public-attributes","title":"Public Attributes","text":"Type Name text"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Text/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, str text)  def render (self self, MdRenderer f, str indent)"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Text/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Text/#variable-text","title":"variable text","text":"<pre><code>mkdoxy.markdown.Text::text;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Text/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Text/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::markdown::Text::__init__ (\n    self self,\n    str text\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1markdown_1_1Text/#function-render","title":"function render","text":"<pre><code>def mkdoxy::markdown::Text::render (\n    self self,\n    MdRenderer f,\n    str indent\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1node/","title":"Namespace mkdoxy::node","text":"<p>Namespace List &gt; mkdoxy &gt; node</p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1node/#classes","title":"Classes","text":"Type Name class DummyNode class Node"},{"location":"mkdoxyApi/namespacemkdoxy_1_1node/#public-attributes","title":"Public Attributes","text":"Type Name Logger"},{"location":"mkdoxyApi/namespacemkdoxy_1_1node/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/namespacemkdoxy_1_1node/#variable-logger","title":"variable Logger","text":"<pre><code>mkdoxy::node.Logger;\n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/node.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1DummyNode/","title":"Class mkdoxy::node::DummyNode","text":"<p>ClassList &gt; mkdoxy &gt; node &gt; DummyNode</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1DummyNode/#public-attributes","title":"Public Attributes","text":"Type Name derived_classes kind name_long"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1DummyNode/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, str name_long, derived_classes derived_classes, Kind kind)  bool is_resolved (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1DummyNode/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1DummyNode/#variable-derived_classes","title":"variable derived_classes","text":"<pre><code>mkdoxy.node.DummyNode::derived_classes;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1DummyNode/#variable-kind","title":"variable kind","text":"<pre><code>mkdoxy.node.DummyNode::kind;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1DummyNode/#variable-name_long","title":"variable name_long","text":"<pre><code>mkdoxy.node.DummyNode::name_long;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1DummyNode/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1DummyNode/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::node::DummyNode::__init__ (\n    self self,\n    str name_long,\n    derived_classes derived_classes,\n    Kind kind\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1DummyNode/#function-is_resolved","title":"function is_resolved","text":"<pre><code>bool mkdoxy::node::DummyNode::is_resolved (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/node.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/","title":"Class mkdoxy::node::Node","text":"<p>ClassList &gt; mkdoxy &gt; node &gt; Node</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#public-attributes","title":"Public Attributes","text":"Type Name debug linkPrefix"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, str xml_file, Element xml, Cache cache, XmlParser parser, 'Node' parent, str refid=None, bool debug=False)  def __repr__ (self self)  def add_child (self self, 'Node' child)  str anchor (self self)  [ 'Node'] base_classes (self self)  str base_name (self self)  str base_url (self self)  str brief (self self)  [ 'Node'] children (self self)  str code_language (self self)  str codeblock (self self)  str definition (self self)  [ 'Node'] derived_classes (self self)  str details (self self)  str filename (self self)  bool has (self self, str visibility, kinds kinds, bool static)  bool has_base_classes (self self)  bool has_brief (self self)  bool has_children (self self)  bool has_definition (self self)  bool has_derived_classes (self self)  bool has_details (self self)  bool has_includes (self self)  bool has_initializer (self self)  bool has_location (self self)  bool has_params (self self)  bool has_programlisting (self self)  bool has_specifiers (self self)  bool has_templateparams (self self)  bool has_type (self self)  bool has_values (self self)  str includes (self self)  str initializer (self self)  bool is_class (self self)  bool is_class_or_struct (self self)  bool is_const (self self)  bool is_define (self self)  bool is_dir (self self)  bool is_enum (self self)  bool is_example (self self)  bool is_explicit (self self)  bool is_file (self self)  bool is_friend (self self)  bool is_function (self self)  bool is_group (self self)  bool is_inline (self self)  bool is_interface (self self)  bool is_language (self self)  bool is_mutable (self self)  bool is_namespace (self self)  bool is_operator (self self)  bool is_overloaded (self self)  bool is_page (self self)  bool is_parent (self self)  bool is_pure (self self)  bool is_resolved (self self)  bool is_root (self self)  bool is_static (self self)  bool is_struct (self self)  bool is_typedef (self self)  bool is_union (self self)  bool is_variable (self self)  bool is_virtual (self self)  str kind (self self)  str location (self self)  int location_bodyend (self self)  int location_bodystart (self self)  str name (self self)  str name_full_unescaped (self self)  str name_long (self self)  str name_params (self self)  str name_short (self self)  [str] name_tokens (self self)  str name_url_safe (self self)  int operator_num (self self)  int operators_total (self self)  int overload_num (self self)  str overload_suffix (self self)  int overload_total (self self)  str params (self self)  'Node' parent (self self)  [ 'Node'] parents (self self)  str prefix (self self)  str print_node_recursive (self self)  str programlisting (self self)  [ 'Node'] query (self self, str visibility, kinds kinds, bool static)  str refid (self self)  'Node' reimplements (self self)  'Node' root (self self)  def setLinkPrefix (self self, str linkPrefix)  def sort_children (self self)  str specifiders (self self)  str suffix (self self)  str templateparams (self self)  str title (self self)  str type (self self)  str url (self self)  str url_source (self self)  str values (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#variable-debug","title":"variable debug","text":"<pre><code>mkdoxy.node.Node::debug;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#variable-linkprefix","title":"variable linkPrefix","text":"<pre><code>mkdoxy.node.Node::linkPrefix;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::node::Node::__init__ (\n    self self,\n    str xml_file,\n    Element xml,\n    Cache cache,\n    XmlParser parser,\n    ' Node ' parent,\n    str refid=None,\n    bool debug=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-__repr__","title":"function __repr__","text":"<pre><code>def mkdoxy::node::Node::__repr__ (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-add_child","title":"function add_child","text":"<pre><code>def mkdoxy::node::Node::add_child (\n    self self,\n    ' Node ' child\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-anchor","title":"function anchor","text":"<pre><code>str mkdoxy::node::Node::anchor (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-base_classes","title":"function base_classes","text":"<pre><code>[ ' Node '] mkdoxy::node::Node::base_classes (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-base_name","title":"function base_name","text":"<pre><code>str mkdoxy::node::Node::base_name (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-base_url","title":"function base_url","text":"<pre><code>str mkdoxy::node::Node::base_url (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-brief","title":"function brief","text":"<pre><code>str mkdoxy::node::Node::brief (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-children","title":"function children","text":"<pre><code>[ ' Node '] mkdoxy::node::Node::children (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-code_language","title":"function code_language","text":"<pre><code>str mkdoxy::node::Node::code_language (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-codeblock","title":"function codeblock","text":"<pre><code>str mkdoxy::node::Node::codeblock (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-definition","title":"function definition","text":"<pre><code>str mkdoxy::node::Node::definition (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-derived_classes","title":"function derived_classes","text":"<pre><code>[ ' Node '] mkdoxy::node::Node::derived_classes (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-details","title":"function details","text":"<pre><code>str mkdoxy::node::Node::details (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-filename","title":"function filename","text":"<pre><code>str mkdoxy::node::Node::filename (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-has","title":"function has","text":"<pre><code>bool mkdoxy::node::Node::has (\n    self self,\n    str visibility,\n    kinds kinds,\n    bool static\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-has_base_classes","title":"function has_base_classes","text":"<pre><code>bool mkdoxy::node::Node::has_base_classes (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-has_brief","title":"function has_brief","text":"<pre><code>bool mkdoxy::node::Node::has_brief (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-has_children","title":"function has_children","text":"<pre><code>bool mkdoxy::node::Node::has_children (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-has_definition","title":"function has_definition","text":"<pre><code>bool mkdoxy::node::Node::has_definition (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-has_derived_classes","title":"function has_derived_classes","text":"<pre><code>bool mkdoxy::node::Node::has_derived_classes (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-has_details","title":"function has_details","text":"<pre><code>bool mkdoxy::node::Node::has_details (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-has_includes","title":"function has_includes","text":"<pre><code>bool mkdoxy::node::Node::has_includes (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-has_initializer","title":"function has_initializer","text":"<pre><code>bool mkdoxy::node::Node::has_initializer (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-has_location","title":"function has_location","text":"<pre><code>bool mkdoxy::node::Node::has_location (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-has_params","title":"function has_params","text":"<pre><code>bool mkdoxy::node::Node::has_params (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-has_programlisting","title":"function has_programlisting","text":"<pre><code>bool mkdoxy::node::Node::has_programlisting (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-has_specifiers","title":"function has_specifiers","text":"<pre><code>bool mkdoxy::node::Node::has_specifiers (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-has_templateparams","title":"function has_templateparams","text":"<pre><code>bool mkdoxy::node::Node::has_templateparams (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-has_type","title":"function has_type","text":"<pre><code>bool mkdoxy::node::Node::has_type (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-has_values","title":"function has_values","text":"<pre><code>bool mkdoxy::node::Node::has_values (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-includes","title":"function includes","text":"<pre><code>str mkdoxy::node::Node::includes (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-initializer","title":"function initializer","text":"<pre><code>str mkdoxy::node::Node::initializer (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_class","title":"function is_class","text":"<pre><code>bool mkdoxy::node::Node::is_class (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_class_or_struct","title":"function is_class_or_struct","text":"<pre><code>bool mkdoxy::node::Node::is_class_or_struct (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_const","title":"function is_const","text":"<pre><code>bool mkdoxy::node::Node::is_const (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_define","title":"function is_define","text":"<pre><code>bool mkdoxy::node::Node::is_define (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_dir","title":"function is_dir","text":"<pre><code>bool mkdoxy::node::Node::is_dir (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_enum","title":"function is_enum","text":"<pre><code>bool mkdoxy::node::Node::is_enum (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_example","title":"function is_example","text":"<pre><code>bool mkdoxy::node::Node::is_example (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_explicit","title":"function is_explicit","text":"<pre><code>bool mkdoxy::node::Node::is_explicit (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_file","title":"function is_file","text":"<pre><code>bool mkdoxy::node::Node::is_file (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_friend","title":"function is_friend","text":"<pre><code>bool mkdoxy::node::Node::is_friend (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_function","title":"function is_function","text":"<pre><code>bool mkdoxy::node::Node::is_function (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_group","title":"function is_group","text":"<pre><code>bool mkdoxy::node::Node::is_group (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_inline","title":"function is_inline","text":"<pre><code>bool mkdoxy::node::Node::is_inline (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_interface","title":"function is_interface","text":"<pre><code>bool mkdoxy::node::Node::is_interface (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_language","title":"function is_language","text":"<pre><code>bool mkdoxy::node::Node::is_language (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_mutable","title":"function is_mutable","text":"<pre><code>bool mkdoxy::node::Node::is_mutable (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_namespace","title":"function is_namespace","text":"<pre><code>bool mkdoxy::node::Node::is_namespace (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_operator","title":"function is_operator","text":"<pre><code>bool mkdoxy::node::Node::is_operator (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_overloaded","title":"function is_overloaded","text":"<pre><code>bool mkdoxy::node::Node::is_overloaded (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_page","title":"function is_page","text":"<pre><code>bool mkdoxy::node::Node::is_page (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_parent","title":"function is_parent","text":"<pre><code>bool mkdoxy::node::Node::is_parent (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_pure","title":"function is_pure","text":"<pre><code>bool mkdoxy::node::Node::is_pure (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_resolved","title":"function is_resolved","text":"<pre><code>bool mkdoxy::node::Node::is_resolved (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_root","title":"function is_root","text":"<pre><code>bool mkdoxy::node::Node::is_root (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_static","title":"function is_static","text":"<pre><code>bool mkdoxy::node::Node::is_static (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_struct","title":"function is_struct","text":"<pre><code>bool mkdoxy::node::Node::is_struct (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_typedef","title":"function is_typedef","text":"<pre><code>bool mkdoxy::node::Node::is_typedef (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_union","title":"function is_union","text":"<pre><code>bool mkdoxy::node::Node::is_union (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_variable","title":"function is_variable","text":"<pre><code>bool mkdoxy::node::Node::is_variable (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-is_virtual","title":"function is_virtual","text":"<pre><code>bool mkdoxy::node::Node::is_virtual (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-kind","title":"function kind","text":"<pre><code>str mkdoxy::node::Node::kind (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-location","title":"function location","text":"<pre><code>str mkdoxy::node::Node::location (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-location_bodyend","title":"function location_bodyend","text":"<pre><code>int mkdoxy::node::Node::location_bodyend (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-location_bodystart","title":"function location_bodystart","text":"<pre><code>int mkdoxy::node::Node::location_bodystart (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-name","title":"function name","text":"<pre><code>str mkdoxy::node::Node::name (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-name_full_unescaped","title":"function name_full_unescaped","text":"<pre><code>str mkdoxy::node::Node::name_full_unescaped (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-name_long","title":"function name_long","text":"<pre><code>str mkdoxy::node::Node::name_long (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-name_params","title":"function name_params","text":"<pre><code>str mkdoxy::node::Node::name_params (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-name_short","title":"function name_short","text":"<pre><code>str mkdoxy::node::Node::name_short (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-name_tokens","title":"function name_tokens","text":"<pre><code>[str] mkdoxy::node::Node::name_tokens (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-name_url_safe","title":"function name_url_safe","text":"<pre><code>str mkdoxy::node::Node::name_url_safe (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-operator_num","title":"function operator_num","text":"<pre><code>int mkdoxy::node::Node::operator_num (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-operators_total","title":"function operators_total","text":"<pre><code>int mkdoxy::node::Node::operators_total (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-overload_num","title":"function overload_num","text":"<pre><code>int mkdoxy::node::Node::overload_num (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-overload_suffix","title":"function overload_suffix","text":"<pre><code>str mkdoxy::node::Node::overload_suffix (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-overload_total","title":"function overload_total","text":"<pre><code>int mkdoxy::node::Node::overload_total (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-params","title":"function params","text":"<pre><code>str mkdoxy::node::Node::params (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-parent","title":"function parent","text":"<pre><code>' Node ' mkdoxy::node::Node::parent (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-parents","title":"function parents","text":"<pre><code>[ ' Node '] mkdoxy::node::Node::parents (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-prefix","title":"function prefix","text":"<pre><code>str mkdoxy::node::Node::prefix (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-print_node_recursive","title":"function print_node_recursive","text":"<pre><code>str mkdoxy::node::Node::print_node_recursive (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-programlisting","title":"function programlisting","text":"<pre><code>str mkdoxy::node::Node::programlisting (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-query","title":"function query","text":"<pre><code>[ ' Node '] mkdoxy::node::Node::query (\n    self self,\n    str visibility,\n    kinds kinds,\n    bool static\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-refid","title":"function refid","text":"<pre><code>str mkdoxy::node::Node::refid (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-reimplements","title":"function reimplements","text":"<pre><code>' Node ' mkdoxy::node::Node::reimplements (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-root","title":"function root","text":"<pre><code>' Node ' mkdoxy::node::Node::root (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-setlinkprefix","title":"function setLinkPrefix","text":"<pre><code>def mkdoxy::node::Node::setLinkPrefix (\n    self self,\n    str linkPrefix\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-sort_children","title":"function sort_children","text":"<pre><code>def mkdoxy::node::Node::sort_children (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-specifiders","title":"function specifiders","text":"<pre><code>str mkdoxy::node::Node::specifiders (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-suffix","title":"function suffix","text":"<pre><code>str mkdoxy::node::Node::suffix (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-templateparams","title":"function templateparams","text":"<pre><code>str mkdoxy::node::Node::templateparams (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-title","title":"function title","text":"<pre><code>str mkdoxy::node::Node::title (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-type","title":"function type","text":"<pre><code>str mkdoxy::node::Node::type (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-url","title":"function url","text":"<pre><code>str mkdoxy::node::Node::url (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-url_source","title":"function url_source","text":"<pre><code>str mkdoxy::node::Node::url_source (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1node_1_1Node/#function-values","title":"function values","text":"<pre><code>str mkdoxy::node::Node::values (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/node.py</code></p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1plugin/","title":"Namespace mkdoxy::plugin","text":"<p>Namespace List &gt; mkdoxy &gt; plugin</p> <p>More...</p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1plugin/#classes","title":"Classes","text":"Type Name class MkDoxy MkDocs plugin for generating documentation from Doxygen XML files."},{"location":"mkdoxyApi/namespacemkdoxy_1_1plugin/#public-attributes","title":"Public Attributes","text":"Type Name Logger str"},{"location":"mkdoxyApi/namespacemkdoxy_1_1plugin/#detailed-description","title":"Detailed Description","text":""},{"location":"mkdoxyApi/namespacemkdoxy_1_1plugin/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/namespacemkdoxy_1_1plugin/#variable-logger","title":"variable Logger","text":"<pre><code>mkdoxy::plugin.Logger;\n</code></pre>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1plugin/#variable-str","title":"variable str","text":"<pre><code>mkdoxy::plugin.str;\n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/plugin.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1plugin_1_1MkDoxy/","title":"Class mkdoxy::plugin::MkDoxy","text":"<p>ClassList &gt; mkdoxy &gt; plugin &gt; MkDoxy</p> <p>MkDocs plugin for generating documentation from Doxygen XML files. </p> <p>Inherits the following classes: BasePlugin</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1plugin_1_1MkDoxy/#public-attributes","title":"Public Attributes","text":"Type Name debug doxygen generatorBase"},{"location":"mkdoxyApi/classmkdoxy_1_1plugin_1_1MkDoxy/#public-static-attributes","title":"Public Static Attributes","text":"Type Name tuple config_project   = =  ( ('src-dirs', config_options.Type(str)), ('full-doc', config_options.Type(bool, default=True)), ('debug', config_options.Type(bool, default=False)), # ('ignore-errors', config_options.Type(bool, default=False)), ('doxy-cfg', config_options.Type(dict, default={}, required=False)), ('template-dir', config_options.Type(str, default=\"\", required=False)), ) tuple config_scheme   = =  ( ('projects', config_options.Type(dict, default={})), ('full-doc', config_options.Type(bool, default=True)), ('debug', config_options.Type(bool, default=False)), ('ignore-errors', config_options.Type(bool, default=False)), ('save-api', config_options.Type(str, default=\"\")), (\"enabled\", config_options.Type(bool, default=True)), (\"doxygen-bin-path\", config_options.Type(str, default=\"doxygen\", required=False)), )"},{"location":"mkdoxyApi/classmkdoxy_1_1plugin_1_1MkDoxy/#public-functions","title":"Public Functions","text":"Type Name bool is_enabled (self self) Checks if the plugin is enabled. files.Files on_files (self self, files.Files files, base.Config config) Called after files have been gathered by MkDocs. str on_page_markdown (self self, str markdown, pages.Page page, base.Config config, files.Files files) Generate snippets and append them to the markdown."},{"location":"mkdoxyApi/classmkdoxy_1_1plugin_1_1MkDoxy/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1plugin_1_1MkDoxy/#variable-debug","title":"variable debug","text":"<pre><code>mkdoxy.plugin.MkDoxy::debug;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1plugin_1_1MkDoxy/#variable-doxygen","title":"variable doxygen","text":"<pre><code>mkdoxy.plugin.MkDoxy::doxygen;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1plugin_1_1MkDoxy/#variable-generatorbase","title":"variable generatorBase","text":"<pre><code>mkdoxy.plugin.MkDoxy::generatorBase;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1plugin_1_1MkDoxy/#public-static-attributes-documentation","title":"Public Static Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1plugin_1_1MkDoxy/#variable-config_project","title":"variable config_project","text":"<pre><code>tuple mkdoxy.plugin.MkDoxy::config_project;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1plugin_1_1MkDoxy/#variable-config_scheme","title":"variable config_scheme","text":"<pre><code>tuple mkdoxy.plugin.MkDoxy::config_scheme;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1plugin_1_1MkDoxy/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1plugin_1_1MkDoxy/#function-is_enabled","title":"function is_enabled","text":"<p>Checks if the plugin is enabled. <pre><code>bool mkdoxy::plugin::MkDoxy::is_enabled (\n    self self\n) \n</code></pre></p> Returns: <p>(bool) True if the plugin is enabled. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1plugin_1_1MkDoxy/#function-on_files","title":"function on_files","text":"<p>Called after files have been gathered by MkDocs. <pre><code>files.Files mkdoxy::plugin::MkDoxy::on_files (\n    self self,\n    files.Files files,\n    base.Config config\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>files</code> (Files) The files gathered by MkDocs. </li> <li><code>config</code> (Config) The global configuration object. </li> </ul> Returns: <p>(Files) The files gathered by MkDocs. </p>"},{"location":"mkdoxyApi/classmkdoxy_1_1plugin_1_1MkDoxy/#function-on_page_markdown","title":"function on_page_markdown","text":"<p>Generate snippets and append them to the markdown. <pre><code>str mkdoxy::plugin::MkDoxy::on_page_markdown (\n    self self,\n    str markdown,\n    pages.Page page,\n    base.Config config,\n    files.Files files\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>markdown</code> (str): The markdown. </li> <li><code>page</code> (Page): The MkDocs page. </li> <li><code>config</code> (Config): The MkDocs config. </li> <li><code>files</code> (Files): The MkDocs files. </li> </ul> Returns: <p>(str) The markdown. </p> <p>The documentation for this class was generated from the following file <code>mkdoxy/plugin.py</code></p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1property/","title":"Namespace mkdoxy::property","text":"<p>Namespace List &gt; mkdoxy &gt; property</p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1property/#classes","title":"Classes","text":"Type Name class Property <p>The documentation for this class was generated from the following file <code>mkdoxy/property.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property/","title":"Class mkdoxy::property::Property","text":"<p>ClassList &gt; mkdoxy &gt; property &gt; Property</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property/#classes","title":"Classes","text":"Type Name class Brief class CodeBlock class Definition class Details class Includes class Initializer class Location class Params class Programlisting class Specifiers class TemplateParams class Type class Values <p>The documentation for this class was generated from the following file <code>mkdoxy/property.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Brief/","title":"Class mkdoxy::property::Property::Brief","text":"<p>ClassList &gt; mkdoxy &gt; property &gt; Property &gt; Brief</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Brief/#public-attributes","title":"Public Attributes","text":"Type Name kind parser xml"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Brief/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Element xml, XmlParser parser, Kind kind)  bool has (self self)  str md (self self, bool plain=False)  str plain (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Brief/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Brief/#variable-kind","title":"variable kind","text":"<pre><code>mkdoxy.property.Property.Brief::kind;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Brief/#variable-parser","title":"variable parser","text":"<pre><code>mkdoxy.property.Property.Brief::parser;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Brief/#variable-xml","title":"variable xml","text":"<pre><code>mkdoxy.property.Property.Brief::xml;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Brief/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Brief/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::property::Property::Brief::__init__ (\n    self self,\n    Element xml,\n    XmlParser parser,\n    Kind kind\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Brief/#function-has","title":"function has","text":"<pre><code>bool mkdoxy::property::Property::Brief::has (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Brief/#function-md","title":"function md","text":"<pre><code>str mkdoxy::property::Property::Brief::md (\n    self self,\n    bool plain=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Brief/#function-plain","title":"function plain","text":"<pre><code>str mkdoxy::property::Property::Brief::plain (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/property.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1CodeBlock/","title":"Class mkdoxy::property::Property::CodeBlock","text":"<p>ClassList &gt; mkdoxy &gt; property &gt; Property &gt; CodeBlock</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1CodeBlock/#public-attributes","title":"Public Attributes","text":"Type Name kind parser xml"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1CodeBlock/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Element xml, XmlParser parser, Kind kind)  bool has (self self)  str md (self self, bool plain=False)  str plain (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1CodeBlock/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1CodeBlock/#variable-kind","title":"variable kind","text":"<pre><code>mkdoxy.property.Property.CodeBlock::kind;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1CodeBlock/#variable-parser","title":"variable parser","text":"<pre><code>mkdoxy.property.Property.CodeBlock::parser;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1CodeBlock/#variable-xml","title":"variable xml","text":"<pre><code>mkdoxy.property.Property.CodeBlock::xml;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1CodeBlock/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1CodeBlock/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::property::Property::CodeBlock::__init__ (\n    self self,\n    Element xml,\n    XmlParser parser,\n    Kind kind\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1CodeBlock/#function-has","title":"function has","text":"<pre><code>bool mkdoxy::property::Property::CodeBlock::has (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1CodeBlock/#function-md","title":"function md","text":"<pre><code>str mkdoxy::property::Property::CodeBlock::md (\n    self self,\n    bool plain=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1CodeBlock/#function-plain","title":"function plain","text":"<pre><code>str mkdoxy::property::Property::CodeBlock::plain (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/property.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Definition/","title":"Class mkdoxy::property::Property::Definition","text":"<p>ClassList &gt; mkdoxy &gt; property &gt; Property &gt; Definition</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Definition/#public-attributes","title":"Public Attributes","text":"Type Name kind parser xml"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Definition/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Element xml, XmlParser parser, Kind kind)  bool has (self self)  str md (self self, bool plain=False)  str plain (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Definition/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Definition/#variable-kind","title":"variable kind","text":"<pre><code>mkdoxy.property.Property.Definition::kind;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Definition/#variable-parser","title":"variable parser","text":"<pre><code>mkdoxy.property.Property.Definition::parser;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Definition/#variable-xml","title":"variable xml","text":"<pre><code>mkdoxy.property.Property.Definition::xml;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Definition/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Definition/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::property::Property::Definition::__init__ (\n    self self,\n    Element xml,\n    XmlParser parser,\n    Kind kind\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Definition/#function-has","title":"function has","text":"<pre><code>bool mkdoxy::property::Property::Definition::has (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Definition/#function-md","title":"function md","text":"<pre><code>str mkdoxy::property::Property::Definition::md (\n    self self,\n    bool plain=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Definition/#function-plain","title":"function plain","text":"<pre><code>str mkdoxy::property::Property::Definition::plain (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/property.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Details/","title":"Class mkdoxy::property::Property::Details","text":"<p>ClassList &gt; mkdoxy &gt; property &gt; Property &gt; Details</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Details/#public-attributes","title":"Public Attributes","text":"Type Name kind parser xml"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Details/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Element xml, XmlParser parser, Kind kind)  bool has (self self)  str md (self self, bool plain=False)  str plain (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Details/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Details/#variable-kind","title":"variable kind","text":"<pre><code>mkdoxy.property.Property.Details::kind;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Details/#variable-parser","title":"variable parser","text":"<pre><code>mkdoxy.property.Property.Details::parser;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Details/#variable-xml","title":"variable xml","text":"<pre><code>mkdoxy.property.Property.Details::xml;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Details/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Details/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::property::Property::Details::__init__ (\n    self self,\n    Element xml,\n    XmlParser parser,\n    Kind kind\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Details/#function-has","title":"function has","text":"<pre><code>bool mkdoxy::property::Property::Details::has (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Details/#function-md","title":"function md","text":"<pre><code>str mkdoxy::property::Property::Details::md (\n    self self,\n    bool plain=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Details/#function-plain","title":"function plain","text":"<pre><code>str mkdoxy::property::Property::Details::plain (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/property.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Includes/","title":"Class mkdoxy::property::Property::Includes","text":"<p>ClassList &gt; mkdoxy &gt; property &gt; Property &gt; Includes</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Includes/#public-attributes","title":"Public Attributes","text":"Type Name kind parser xml"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Includes/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Element xml, XmlParser parser, Kind kind)  [str] array (self self, bool plain=False)  bool has (self self)  [str] md (self self, bool plain=False)  [str] plain (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Includes/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Includes/#variable-kind","title":"variable kind","text":"<pre><code>mkdoxy.property.Property.Includes::kind;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Includes/#variable-parser","title":"variable parser","text":"<pre><code>mkdoxy.property.Property.Includes::parser;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Includes/#variable-xml","title":"variable xml","text":"<pre><code>mkdoxy.property.Property.Includes::xml;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Includes/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Includes/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::property::Property::Includes::__init__ (\n    self self,\n    Element xml,\n    XmlParser parser,\n    Kind kind\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Includes/#function-array","title":"function array","text":"<pre><code>[str] mkdoxy::property::Property::Includes::array (\n    self self,\n    bool plain=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Includes/#function-has","title":"function has","text":"<pre><code>bool mkdoxy::property::Property::Includes::has (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Includes/#function-md","title":"function md","text":"<pre><code>[str] mkdoxy::property::Property::Includes::md (\n    self self,\n    bool plain=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Includes/#function-plain","title":"function plain","text":"<pre><code>[str] mkdoxy::property::Property::Includes::plain (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/property.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Initializer/","title":"Class mkdoxy::property::Property::Initializer","text":"<p>ClassList &gt; mkdoxy &gt; property &gt; Property &gt; Initializer</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Initializer/#public-attributes","title":"Public Attributes","text":"Type Name kind parser xml"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Initializer/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Element xml, XmlParser parser, Kind kind)  bool has (self self)  str md (self self, bool plain=False)  str plain (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Initializer/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Initializer/#variable-kind","title":"variable kind","text":"<pre><code>mkdoxy.property.Property.Initializer::kind;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Initializer/#variable-parser","title":"variable parser","text":"<pre><code>mkdoxy.property.Property.Initializer::parser;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Initializer/#variable-xml","title":"variable xml","text":"<pre><code>mkdoxy.property.Property.Initializer::xml;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Initializer/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Initializer/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::property::Property::Initializer::__init__ (\n    self self,\n    Element xml,\n    XmlParser parser,\n    Kind kind\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Initializer/#function-has","title":"function has","text":"<pre><code>bool mkdoxy::property::Property::Initializer::has (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Initializer/#function-md","title":"function md","text":"<pre><code>str mkdoxy::property::Property::Initializer::md (\n    self self,\n    bool plain=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Initializer/#function-plain","title":"function plain","text":"<pre><code>str mkdoxy::property::Property::Initializer::plain (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/property.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Location/","title":"Class mkdoxy::property::Property::Location","text":"<p>ClassList &gt; mkdoxy &gt; property &gt; Property &gt; Location</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Location/#public-attributes","title":"Public Attributes","text":"Type Name kind parser xml"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Location/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Element xml, XmlParser parser, Kind kind)  int bodyend (self self)  int bodystart (self self)  int column (self self)  bool has (self self)  int line (self self)  str md (self self, bool plain=False)  str plain (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Location/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Location/#variable-kind","title":"variable kind","text":"<pre><code>mkdoxy.property.Property.Location::kind;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Location/#variable-parser","title":"variable parser","text":"<pre><code>mkdoxy.property.Property.Location::parser;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Location/#variable-xml","title":"variable xml","text":"<pre><code>mkdoxy.property.Property.Location::xml;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Location/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Location/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::property::Property::Location::__init__ (\n    self self,\n    Element xml,\n    XmlParser parser,\n    Kind kind\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Location/#function-bodyend","title":"function bodyend","text":"<pre><code>int mkdoxy::property::Property::Location::bodyend (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Location/#function-bodystart","title":"function bodystart","text":"<pre><code>int mkdoxy::property::Property::Location::bodystart (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Location/#function-column","title":"function column","text":"<pre><code>int mkdoxy::property::Property::Location::column (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Location/#function-has","title":"function has","text":"<pre><code>bool mkdoxy::property::Property::Location::has (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Location/#function-line","title":"function line","text":"<pre><code>int mkdoxy::property::Property::Location::line (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Location/#function-md","title":"function md","text":"<pre><code>str mkdoxy::property::Property::Location::md (\n    self self,\n    bool plain=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Location/#function-plain","title":"function plain","text":"<pre><code>str mkdoxy::property::Property::Location::plain (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/property.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Params/","title":"Class mkdoxy::property::Property::Params","text":"<p>ClassList &gt; mkdoxy &gt; property &gt; Property &gt; Params</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Params/#public-attributes","title":"Public Attributes","text":"Type Name kind parser xml"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Params/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Element xml, XmlParser parser, Kind kind)  [str] array (self self, bool plain=False)  bool has (self self)  str md (self self, bool plain=False)  str plain (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Params/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Params/#variable-kind","title":"variable kind","text":"<pre><code>mkdoxy.property.Property.Params::kind;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Params/#variable-parser","title":"variable parser","text":"<pre><code>mkdoxy.property.Property.Params::parser;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Params/#variable-xml","title":"variable xml","text":"<pre><code>mkdoxy.property.Property.Params::xml;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Params/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Params/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::property::Property::Params::__init__ (\n    self self,\n    Element xml,\n    XmlParser parser,\n    Kind kind\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Params/#function-array","title":"function array","text":"<pre><code>[str] mkdoxy::property::Property::Params::array (\n    self self,\n    bool plain=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Params/#function-has","title":"function has","text":"<pre><code>bool mkdoxy::property::Property::Params::has (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Params/#function-md","title":"function md","text":"<pre><code>str mkdoxy::property::Property::Params::md (\n    self self,\n    bool plain=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Params/#function-plain","title":"function plain","text":"<pre><code>str mkdoxy::property::Property::Params::plain (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/property.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Programlisting/","title":"Class mkdoxy::property::Property::Programlisting","text":"<p>ClassList &gt; mkdoxy &gt; property &gt; Property &gt; Programlisting</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Programlisting/#public-attributes","title":"Public Attributes","text":"Type Name kind parser xml"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Programlisting/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Element xml, XmlParser parser, Kind kind)  bool has (self self)  str md (self self, bool plain=False)"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Programlisting/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Programlisting/#variable-kind","title":"variable kind","text":"<pre><code>mkdoxy.property.Property.Programlisting::kind;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Programlisting/#variable-parser","title":"variable parser","text":"<pre><code>mkdoxy.property.Property.Programlisting::parser;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Programlisting/#variable-xml","title":"variable xml","text":"<pre><code>mkdoxy.property.Property.Programlisting::xml;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Programlisting/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Programlisting/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::property::Property::Programlisting::__init__ (\n    self self,\n    Element xml,\n    XmlParser parser,\n    Kind kind\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Programlisting/#function-has","title":"function has","text":"<pre><code>bool mkdoxy::property::Property::Programlisting::has (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Programlisting/#function-md","title":"function md","text":"<pre><code>str mkdoxy::property::Property::Programlisting::md (\n    self self,\n    bool plain=False\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/property.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Specifiers/","title":"Class mkdoxy::property::Property::Specifiers","text":"<p>ClassList &gt; mkdoxy &gt; property &gt; Property &gt; Specifiers</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Specifiers/#public-attributes","title":"Public Attributes","text":"Type Name kind parser xml"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Specifiers/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Element xml, XmlParser parser, Kind kind)  bool has (self self)  str md (self self, bool plain=False)  str parsed (self self)  str plain (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Specifiers/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Specifiers/#variable-kind","title":"variable kind","text":"<pre><code>mkdoxy.property.Property.Specifiers::kind;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Specifiers/#variable-parser","title":"variable parser","text":"<pre><code>mkdoxy.property.Property.Specifiers::parser;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Specifiers/#variable-xml","title":"variable xml","text":"<pre><code>mkdoxy.property.Property.Specifiers::xml;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Specifiers/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Specifiers/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::property::Property::Specifiers::__init__ (\n    self self,\n    Element xml,\n    XmlParser parser,\n    Kind kind\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Specifiers/#function-has","title":"function has","text":"<pre><code>bool mkdoxy::property::Property::Specifiers::has (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Specifiers/#function-md","title":"function md","text":"<pre><code>str mkdoxy::property::Property::Specifiers::md (\n    self self,\n    bool plain=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Specifiers/#function-parsed","title":"function parsed","text":"<pre><code>str mkdoxy::property::Property::Specifiers::parsed (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Specifiers/#function-plain","title":"function plain","text":"<pre><code>str mkdoxy::property::Property::Specifiers::plain (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/property.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1TemplateParams/","title":"Class mkdoxy::property::Property::TemplateParams","text":"<p>ClassList &gt; mkdoxy &gt; property &gt; Property &gt; TemplateParams</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1TemplateParams/#public-attributes","title":"Public Attributes","text":"Type Name kind parser xml"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1TemplateParams/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Element xml, XmlParser parser, Kind kind)  [str] array (self self, bool plain=False, bool notype=False)  bool has (self self)  str md (self self, bool plain=False)  str plain (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1TemplateParams/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1TemplateParams/#variable-kind","title":"variable kind","text":"<pre><code>mkdoxy.property.Property.TemplateParams::kind;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1TemplateParams/#variable-parser","title":"variable parser","text":"<pre><code>mkdoxy.property.Property.TemplateParams::parser;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1TemplateParams/#variable-xml","title":"variable xml","text":"<pre><code>mkdoxy.property.Property.TemplateParams::xml;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1TemplateParams/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1TemplateParams/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::property::Property::TemplateParams::__init__ (\n    self self,\n    Element xml,\n    XmlParser parser,\n    Kind kind\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1TemplateParams/#function-array","title":"function array","text":"<pre><code>[str] mkdoxy::property::Property::TemplateParams::array (\n    self self,\n    bool plain=False,\n    bool notype=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1TemplateParams/#function-has","title":"function has","text":"<pre><code>bool mkdoxy::property::Property::TemplateParams::has (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1TemplateParams/#function-md","title":"function md","text":"<pre><code>str mkdoxy::property::Property::TemplateParams::md (\n    self self,\n    bool plain=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1TemplateParams/#function-plain","title":"function plain","text":"<pre><code>str mkdoxy::property::Property::TemplateParams::plain (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/property.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Type/","title":"Class mkdoxy::property::Property::Type","text":"<p>ClassList &gt; mkdoxy &gt; property &gt; Property &gt; Type</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Type/#public-attributes","title":"Public Attributes","text":"Type Name kind parser xml"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Type/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Element xml, XmlParser parser, Kind kind)  bool has (self self)  str md (self self, bool plain=False)  str plain (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Type/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Type/#variable-kind","title":"variable kind","text":"<pre><code>mkdoxy.property.Property.Type::kind;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Type/#variable-parser","title":"variable parser","text":"<pre><code>mkdoxy.property.Property.Type::parser;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Type/#variable-xml","title":"variable xml","text":"<pre><code>mkdoxy.property.Property.Type::xml;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Type/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Type/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::property::Property::Type::__init__ (\n    self self,\n    Element xml,\n    XmlParser parser,\n    Kind kind\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Type/#function-has","title":"function has","text":"<pre><code>bool mkdoxy::property::Property::Type::has (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Type/#function-md","title":"function md","text":"<pre><code>str mkdoxy::property::Property::Type::md (\n    self self,\n    bool plain=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Type/#function-plain","title":"function plain","text":"<pre><code>str mkdoxy::property::Property::Type::plain (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/property.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Values/","title":"Class mkdoxy::property::Property::Values","text":"<p>ClassList &gt; mkdoxy &gt; property &gt; Property &gt; Values</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Values/#public-attributes","title":"Public Attributes","text":"Type Name kind parser xml"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Values/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Element xml, XmlParser parser, Kind kind)  [str] array (self self, bool plain=False)  bool has (self self)  str md (self self, bool plain=False)  str plain (self self)"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Values/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Values/#variable-kind","title":"variable kind","text":"<pre><code>mkdoxy.property.Property.Values::kind;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Values/#variable-parser","title":"variable parser","text":"<pre><code>mkdoxy.property.Property.Values::parser;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Values/#variable-xml","title":"variable xml","text":"<pre><code>mkdoxy.property.Property.Values::xml;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Values/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Values/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::property::Property::Values::__init__ (\n    self self,\n    Element xml,\n    XmlParser parser,\n    Kind kind\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Values/#function-array","title":"function array","text":"<pre><code>[str] mkdoxy::property::Property::Values::array (\n    self self,\n    bool plain=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Values/#function-has","title":"function has","text":"<pre><code>bool mkdoxy::property::Property::Values::has (\n    self self\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Values/#function-md","title":"function md","text":"<pre><code>str mkdoxy::property::Property::Values::md (\n    self self,\n    bool plain=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1property_1_1Property_1_1Values/#function-plain","title":"function plain","text":"<pre><code>str mkdoxy::property::Property::Values::plain (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/property.py</code></p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1utils/","title":"Namespace mkdoxy::utils","text":"<p>Namespace List &gt; mkdoxy &gt; utils</p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1utils/#public-attributes","title":"Public Attributes","text":"Type Name Logger string regex   = =  r\"(-{3}|.{3})\\n(?P&lt;meta&gt;([\\S\\s])*)\\n(-{3}|.{3})\\n(?P&lt;template&gt;([\\S\\s])*)\""},{"location":"mkdoxyApi/namespacemkdoxy_1_1utils/#public-functions","title":"Public Functions","text":"Type Name None check_enabled_markdown_extensions (Config config, Config mkdoxyConfig)  def contains (a a, pos pos, b b)  def lookahead (iterable iterable)  def merge_two_dicts (base base, new new)  def parseTemplateFile (str templateFile)  def recursive_find (nodes nodes, kind kind)  def recursive_find_with_parent (nodes nodes, kinds kinds, parent_kinds parent_kinds)  [str] split_safe (str s, str delim)"},{"location":"mkdoxyApi/namespacemkdoxy_1_1utils/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/namespacemkdoxy_1_1utils/#variable-logger","title":"variable Logger","text":"<pre><code>mkdoxy::utils.Logger;\n</code></pre>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1utils/#variable-regex","title":"variable regex","text":"<pre><code>string mkdoxy::utils.regex;\n</code></pre>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1utils/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/namespacemkdoxy_1_1utils/#function-check_enabled_markdown_extensions","title":"function check_enabled_markdown_extensions","text":"<pre><code>None mkdoxy::utils::check_enabled_markdown_extensions (\n    Config config,\n    Config mkdoxyConfig\n) \n</code></pre>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1utils/#function-contains","title":"function contains","text":"<pre><code>def mkdoxy::utils::contains (\n    a a,\n    pos pos,\n    b b\n) \n</code></pre>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1utils/#function-lookahead","title":"function lookahead","text":"<pre><code>def mkdoxy::utils::lookahead (\n    iterable iterable\n) \n</code></pre>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1utils/#function-merge_two_dicts","title":"function merge_two_dicts","text":"<pre><code>def mkdoxy::utils::merge_two_dicts (\n    base base,\n    new new\n) \n</code></pre>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1utils/#function-parsetemplatefile","title":"function parseTemplateFile","text":"<pre><code>def mkdoxy::utils::parseTemplateFile (\n    str templateFile\n) \n</code></pre>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1utils/#function-recursive_find","title":"function recursive_find","text":"<pre><code>def mkdoxy::utils::recursive_find (\n    nodes nodes,\n    kind kind\n) \n</code></pre>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1utils/#function-recursive_find_with_parent","title":"function recursive_find_with_parent","text":"<pre><code>def mkdoxy::utils::recursive_find_with_parent (\n    nodes nodes,\n    kinds kinds,\n    parent_kinds parent_kinds\n) \n</code></pre>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1utils/#function-split_safe","title":"function split_safe","text":"<pre><code>[str] mkdoxy::utils::split_safe (\n    str s,\n    str delim\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/utils.py</code></p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1xml__parser/","title":"Namespace mkdoxy::xml_parser","text":"<p>Namespace List &gt; mkdoxy &gt; xml_parser</p>"},{"location":"mkdoxyApi/namespacemkdoxy_1_1xml__parser/#classes","title":"Classes","text":"Type Name class XmlParser"},{"location":"mkdoxyApi/namespacemkdoxy_1_1xml__parser/#public-attributes","title":"Public Attributes","text":"Type Name dictionary SIMPLE_SECTIONS   = =  { 'see': 'See also:', 'note': 'Note:', 'bug': 'Bug:', 'warning': 'Warning:', 'return': 'Returns:', 'returns': 'Returns:', 'param': 'Parameters:', 'templateparam': 'Template parameters:', 'retval': 'Return value:', 'author': 'Author:', 'authors': 'Authors:', 'since': 'Since:', 'pre': 'Precondition:', 'remark': 'Remark:', 'copyright': 'Copyright:', 'post': 'Postcondition:', 'rcs': 'Rcs:', 'attention': 'Attention:', 'invariant': 'Invariant:', 'exception': 'Exception:', 'date': 'Date:', 'version': 'Version:', }"},{"location":"mkdoxyApi/namespacemkdoxy_1_1xml__parser/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/namespacemkdoxy_1_1xml__parser/#variable-simple_sections","title":"variable SIMPLE_SECTIONS","text":"<pre><code>dictionary mkdoxy::xml_parser.SIMPLE_SECTIONS;\n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/xml_parser.py</code></p>"},{"location":"mkdoxyApi/classmkdoxy_1_1xml__parser_1_1XmlParser/","title":"Class mkdoxy::xml_parser::XmlParser","text":"<p>ClassList &gt; mkdoxy &gt; xml_parser &gt; XmlParser</p>"},{"location":"mkdoxyApi/classmkdoxy_1_1xml__parser_1_1XmlParser/#public-attributes","title":"Public Attributes","text":"Type Name cache debug"},{"location":"mkdoxyApi/classmkdoxy_1_1xml__parser_1_1XmlParser/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Cache cache, bool debug=False)  str anchor (self self, str name)  [Md] paras (self self, Element p, bool italic=False)  str paras_as_str (self self, Element p, bool italic=False, bool plain=False)  [str] plain (self self, Element p)  str plain_as_str (self self, Element p)  [Md] programlisting (self self, Element p)  str programlisting_as_str (self self, Element p)  str reference_as_str (self self, Element p)"},{"location":"mkdoxyApi/classmkdoxy_1_1xml__parser_1_1XmlParser/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1xml__parser_1_1XmlParser/#variable-cache","title":"variable cache","text":"<pre><code>mkdoxy.xml_parser.XmlParser::cache;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1xml__parser_1_1XmlParser/#variable-debug","title":"variable debug","text":"<pre><code>mkdoxy.xml_parser.XmlParser::debug;\n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1xml__parser_1_1XmlParser/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mkdoxyApi/classmkdoxy_1_1xml__parser_1_1XmlParser/#function-__init__","title":"function __init__","text":"<pre><code>def mkdoxy::xml_parser::XmlParser::__init__ (\n    self self,\n    Cache cache,\n    bool debug=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1xml__parser_1_1XmlParser/#function-anchor","title":"function anchor","text":"<pre><code>str mkdoxy::xml_parser::XmlParser::anchor (\n    self self,\n    str name\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1xml__parser_1_1XmlParser/#function-paras","title":"function paras","text":"<pre><code>[ Md ] mkdoxy::xml_parser::XmlParser::paras (\n    self self,\n    Element p,\n    bool italic=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1xml__parser_1_1XmlParser/#function-paras_as_str","title":"function paras_as_str","text":"<pre><code>str mkdoxy::xml_parser::XmlParser::paras_as_str (\n    self self,\n    Element p,\n    bool italic=False,\n    bool plain=False\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1xml__parser_1_1XmlParser/#function-plain","title":"function plain","text":"<pre><code>[str] mkdoxy::xml_parser::XmlParser::plain (\n    self self,\n    Element p\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1xml__parser_1_1XmlParser/#function-plain_as_str","title":"function plain_as_str","text":"<pre><code>str mkdoxy::xml_parser::XmlParser::plain_as_str (\n    self self,\n    Element p\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1xml__parser_1_1XmlParser/#function-programlisting","title":"function programlisting","text":"<pre><code>[ Md ] mkdoxy::xml_parser::XmlParser::programlisting (\n    self self,\n    Element p\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1xml__parser_1_1XmlParser/#function-programlisting_as_str","title":"function programlisting_as_str","text":"<pre><code>str mkdoxy::xml_parser::XmlParser::programlisting_as_str (\n    self self,\n    Element p\n) \n</code></pre>"},{"location":"mkdoxyApi/classmkdoxy_1_1xml__parser_1_1XmlParser/#function-reference_as_str","title":"function reference_as_str","text":"<pre><code>str mkdoxy::xml_parser::XmlParser::reference_as_str (\n    self self,\n    Element p\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>mkdoxy/xml_parser.py</code></p>"},{"location":"mkdoxyApi/namespacepprint/","title":"Namespace pprint","text":"<p>Namespace List &gt; pprint</p> <p>The documentation for this class was generated from the following file <code>mkdoxy/generatorSnippets.py</code></p>"},{"location":"mkdoxyApi/dir_2818837351fcf31f6a51513c51689cdd/","title":"Dir mkdoxy","text":"<p>FileList &gt; mkdoxy</p>"},{"location":"mkdoxyApi/dir_2818837351fcf31f6a51513c51689cdd/#files","title":"Files","text":"Type Name file DoxyTagParser.py file __init__.py file cache.py file constants.py file doxygen.py file doxyrun.py file finder.py file generatorAuto.py file generatorBase.py file generatorSnippets.py file markdown.py file node.py file plugin.py file property.py file utils.py file xml_parser.py <p>The documentation for this class was generated from the following file <code>mkdoxy/</code></p>"},{"location":"mkdoxyApi/DoxyTagParser_8py/","title":"File DoxyTagParser.py","text":"<p>FileList &gt; mkdoxy &gt; DoxyTagParser.py</p> <p>Go to the source code of this file</p>"},{"location":"mkdoxyApi/DoxyTagParser_8py/#namespaces","title":"Namespaces","text":"Type Name namespace DoxyTagParser"},{"location":"mkdoxyApi/DoxyTagParser_8py/#classes","title":"Classes","text":"Type Name class DoxyTagParser <p>The documentation for this class was generated from the following file <code>mkdoxy/DoxyTagParser.py</code></p>"},{"location":"mkdoxyApi/DoxyTagParser_8py_source/","title":"File DoxyTagParser.py","text":"<p>File List &gt; mkdoxy &gt; DoxyTagParser.py</p> <p>Go to the documentation of this file</p> <pre><code>import re\n\nclass DoxyTagParser:\n\n    def __init__(\n            self,\n            markdown_page: str,\n            debug: bool = False\n    ):\n        self.markdown_pagemarkdown_page = markdown_page\n        self.debugdebug = debug\n        self.doxy_keydoxy_key = \"::: doxy\"\n        self.indentindent = \"(?P&lt;indent&gt;[\\t ]*)\"\n        self.projectproject = \"(?P&lt;project&gt;[a-zA-Z]+)\"\n        self.keykey = \"(?P&lt;key&gt;[a-zA-Z.-_]+)\"\n        self.dotdot = \"\\.\"\n        self.optional_dotoptional_dot = \"[.]?\"\n        self.look_aheadlook_ahead = \"(?=\\n)\" # it's a look ahead because we don't want to capture the newline\n\n    def replaceMarkdown(self, start: int, end: int, replace_format: str, **kwargs):\n        self.markdown_pagemarkdown_page = self.markdown_pagemarkdown_page.replace(self.markdown_pagemarkdown_page[start:end], replace_format.format(**kwargs))\n\n    def returnMarkdown(self):\n        return self.markdown_pagemarkdown_page\n\n    def parseEmptyTag(self, replacement: str):\n        empty_tag = fr\"{self.indent}{self.doxy_key}{self.optional_dot}{self.look_ahead}\" # https://regex101.com/r/Zh38uo/1\n        matches = re.finditer(empty_tag, self.markdown_pagemarkdown_page, re.MULTILINE)\n        for match in reversed(list(matches)):\n            self.replaceMarkdownreplaceMarkdown(match.start(), match.end(), replacement, indent=match.group('indent'))\n\n    def parseProject(self, replacement: str):\n        project_tag = fr\"{self.indent}{self.doxy_key}{self.dot}{self.project}{self.optional_dot}{self.look_ahead}\" # https://regex101.com/r/TfAsmE/1\n        matches = re.finditer(project_tag, self.markdown_pagemarkdown_page, re.MULTILINE)\n        for match in reversed(list(matches)):\n            self.replaceMarkdownreplaceMarkdown(match.start(), match.end(), replacement, indent=match.group('indent'), project=match.group('project'))\n\n    def parseProjectTagSingle(self, replacement: str):\n        project_tag = fr\"{self.indent}{self.doxy_key}{self.dot}{self.project}{self.dot}(?P&lt;key&gt;[a-zA-Z-_]+){self.look_ahead}\"\n        matches = re.finditer(project_tag, self.markdown_pagemarkdown_page, re.MULTILINE)\n        for match in reversed(list(matches)):\n            self.replaceMarkdownreplaceMarkdown(match.start(), match.end(), replacement, project=match.group('project'), key=match.group('key'))\n\n    def parseProjectTagMulti(self, replacement: str):\n        project_tag = fr\"{self.indent}{self.doxy_key}{self.dot}{self.project}{self.dot}(?P&lt;key&gt;[a-zA-Z-_]+)\\s*\\n(?:(?=\\n)|(?=:::)|\\Z)\"\n        matches = re.finditer(project_tag, self.markdown_pagemarkdown_page, re.MULTILINE)\n        for match in reversed(list(matches)):\n            list_keys = match.group('key').split('.') # split keys by . to allow for nested keys\n            self.replaceMarkdownreplaceMarkdown(match.start(), match.end(), replacement, project=match.group('project'), keys=list_keys)\n</code></pre>"},{"location":"mkdoxyApi/____init_____8py/","title":"File __init__.py","text":"<p>FileList &gt; mkdoxy &gt; __init__.py</p> <p>Go to the source code of this file</p>"},{"location":"mkdoxyApi/____init_____8py/#namespaces","title":"Namespaces","text":"Type Name namespace mkdoxy <p>The documentation for this class was generated from the following file <code>mkdoxy/__init__.py</code></p>"},{"location":"mkdoxyApi/____init_____8py_source/","title":"File __init__.py","text":"<p>File List &gt; mkdoxy &gt; __init__.py</p> <p>Go to the documentation of this file</p>"},{"location":"mkdoxyApi/cache_8py/","title":"File cache.py","text":"<p>FileList &gt; mkdoxy &gt; cache.py</p> <p>Go to the source code of this file</p>"},{"location":"mkdoxyApi/cache_8py/#namespaces","title":"Namespaces","text":"Type Name namespace cache"},{"location":"mkdoxyApi/cache_8py/#classes","title":"Classes","text":"Type Name class Cache <p>The documentation for this class was generated from the following file <code>mkdoxy/cache.py</code></p>"},{"location":"mkdoxyApi/cache_8py_source/","title":"File cache.py","text":"<p>File List &gt; mkdoxy &gt; cache.py</p> <p>Go to the documentation of this file</p> <pre><code>class Cache:\n    def __init__(self):\n        self.cachecache = {}\n\n    def add(self, key: str, value):\n        self.cachecache[key] = value\n\n    def get(self, key: str):\n        if key in self.cachecache:\n            return self.cachecache[key]\n        else:\n            raise IndexError(f'Key: {key} not found in cache!')\n</code></pre>"},{"location":"mkdoxyApi/constants_8py/","title":"File constants.py","text":"<p>FileList &gt; mkdoxy &gt; constants.py</p> <p>Go to the source code of this file</p>"},{"location":"mkdoxyApi/constants_8py/#namespaces","title":"Namespaces","text":"Type Name namespace constants"},{"location":"mkdoxyApi/constants_8py/#classes","title":"Classes","text":"Type Name class Kind class Visibility <p>The documentation for this class was generated from the following file <code>mkdoxy/constants.py</code></p>"},{"location":"mkdoxyApi/constants_8py_source/","title":"File constants.py","text":"<p>File List &gt; mkdoxy &gt; constants.py</p> <p>Go to the documentation of this file</p> <pre><code>from enum import Enum\n\nOVERLOAD_OPERATORS = [\n    'operator=',\n    'operator+',\n    'operator-',\n    'operator*',\n    'operator/',\n    'operator+=',\n    'operator-=',\n    'operator*=',\n    'operator/=',\n    'operator==',\n    'operator%',\n    'operator%=',\n    'operator++',\n    'operator--',\n    'operator==',\n    'operator!=',\n    'operator&lt;=',\n    'operator&gt;=',\n    'operator&gt;',\n    'operator&lt;',\n    'operator!',\n    'operator&amp;&amp;',\n    'operator||',\n    'operator~',\n    'operator&amp;',\n    'operator|',\n    'operator^',\n    'operator&lt;&lt;',\n    'operator&gt;&gt;',\n    'operator~=',\n    'operator&amp;=',\n    'operator|=',\n    'operator^=',\n    'operator&lt;&lt;=',\n    'operator&gt;&gt;=',\n    'operator[]',\n    'operator*',\n    'operator&amp;',\n    'operator-&gt;',\n    'operator-&gt;*'\n]\n\n\nclass Kind(Enum):\n    NONE = 'none'\n    ROOT = 'root'\n    NAMESPACE = 'namespace'\n    CLASS = 'class'\n    STRUCT = 'struct'\n    UNION = 'union'\n    FUNCTION = 'function'\n    VARIABLE = 'variable'\n    DEFINE = 'define'\n    TYPEDEF = 'typedef'\n    ENUM = 'enum'\n    ENUMVALUE = 'enumvalue'\n    FRIEND = 'friend'\n    FILE = 'file'\n    DIR = 'dir'\n    PAGE = 'page'\n    EXAMPLE = 'example'\n    GROUP = 'group'\n    INTERFACE = 'interface'\n    SIGNAL = 'signal'\n    SLOT = 'slot'\n    PROPERTY = 'property'\n\n    def is_function(self) -&gt; bool:\n        return self == Kind.FUNCTION\n\n    def is_variable(self) -&gt; bool:\n        return self == Kind.VARIABLE\n\n    def is_namespace(self) -&gt; bool:\n        return self == Kind.NAMESPACE\n\n    def is_class(self) -&gt; bool:\n        return self == Kind.CLASS\n\n    def is_struct(self) -&gt; bool:\n        return self == Kind.STRUCT\n\n    def is_enum(self) -&gt; bool:\n        return self == Kind.ENUM\n\n    def is_interface(self) -&gt; bool:\n        return self == Kind.INTERFACE\n\n    def is_class_or_struct(self) -&gt; bool:\n        return self in [Kind.CLASS, Kind.STRUCT, Kind.INTERFACE]\n\n    def is_typedef(self) -&gt; bool:\n        return self == Kind.TYPEDEF\n\n    def is_define(self) -&gt; bool:\n        return self == Kind.DEFINE\n\n    def is_union(self) -&gt; bool:\n        return self == Kind.UNION\n\n    def is_group(self) -&gt; bool:\n        return self == Kind.GROUP\n\n    def is_root(self) -&gt; bool:\n        return self == Kind.ROOT\n\n    def is_friend(self) -&gt; bool:\n        return self == Kind.FRIEND\n\n    def is_file(self) -&gt; bool:\n        return self == Kind.FILE\n\n    def is_dir(self) -&gt; bool:\n        return self == Kind.DIR\n\n    def is_page(self) -&gt; bool:\n        return self == Kind.PAGE\n\n    def is_example(self) -&gt; bool:\n        return self == Kind.EXAMPLE\n\n    def is_language(self) -&gt; bool:\n        LANGUAGE = [\n            Kind.FUNCTION,\n            Kind.VARIABLE,\n            Kind.NAMESPACE,\n            Kind.DEFINE,\n            Kind.CLASS,\n            Kind.STRUCT,\n            Kind.TYPEDEF,\n            Kind.ENUM,\n            Kind.ENUMVALUE,\n            Kind.UNION,\n            Kind.INTERFACE,\n            Kind.FRIEND,\n            Kind.SIGNAL,\n            Kind.SLOT,\n            Kind.PROPERTY,\n        ]\n\n        return self in LANGUAGE\n\n    def is_parent(self) -&gt; bool:\n        return self in [\n            Kind.NAMESPACE,\n            Kind.CLASS,\n            Kind.STRUCT,\n            Kind.UNION,\n            Kind.INTERFACE,\n        ]\n\n    def is_member(self) -&gt; bool:\n        return self.is_languageis_language() and not self.is_parentis_parent()\n\n    @staticmethod\n    def from_str(s: str) -&gt; 'Kind':\n        try:\n            return Kind(s)\n        except Exception as e:\n            return Kind.NONE\n\n\nclass Visibility(Enum):\n    PUBLIC = 'public'\n    PROTECTED = 'protected'\n    PRIVATE = 'private'\n</code></pre>"},{"location":"mkdoxyApi/doxygen_8py/","title":"File doxygen.py","text":"<p>FileList &gt; mkdoxy &gt; doxygen.py</p> <p>Go to the source code of this file</p>"},{"location":"mkdoxyApi/doxygen_8py/#namespaces","title":"Namespaces","text":"Type Name namespace doxygen"},{"location":"mkdoxyApi/doxygen_8py/#classes","title":"Classes","text":"Type Name class Doxygen <p>The documentation for this class was generated from the following file <code>mkdoxy/doxygen.py</code></p>"},{"location":"mkdoxyApi/doxygen_8py_source/","title":"File doxygen.py","text":"<p>File List &gt; mkdoxy &gt; doxygen.py</p> <p>Go to the documentation of this file</p> <pre><code>import logging\nimport os\nfrom xml.etree import ElementTree\n\nimport path as path\n\nfrom mkdoxy.cache import Cache\nfrom mkdoxy.constants import Kind, Visibility\nfrom mkdoxy.node import Node\nfrom mkdoxy.xml_parser import XmlParser\n\nlog: logging.Logger = logging.getLogger(\"mkdocs\")\n\n\n\nclass Doxygen:\n    def __init__(self, index_path: path, parser: XmlParser, cache: Cache):\n        self.debugdebug = parser.debug\n        path_xml = os.path.join(index_path, 'index.xml')\n        if self.debugdebug:\n            log.info(f'Loading XML from: {path_xml}')\n        xml = ElementTree.parse(path_xml).getroot()\n\n        self.parserparser = parser\n        self.cachecache = cache\n\n        self.rootroot = Node('root', None, self.cachecache, self.parserparser, None)\n        self.groupsgroups = Node('root', None, self.cachecache, self.parserparser, None)\n        self.filesfiles = Node('root', None, self.cachecache, self.parserparser, None)\n        self.pagespages = Node('root', None, self.cachecache, self.parserparser, None)\n        self.examplesexamples = Node('root', None, self.cachecache, self.parserparser, None)\n\n        for compound in xml.findall('compound'):\n            kind = Kind.from_str(compound.get('kind'))\n            refid = compound.get('refid')\n            if kind.is_language():\n                node = Node(\n                    os.path.join(index_path, f'{refid}.xml'),\n                    None,\n                    self.cachecache,\n                    self.parserparser,\n                    self.rootroot,\n                )\n                node._visibility = Visibility.PUBLIC\n                self.rootroot.add_child(node)\n            if kind == Kind.GROUP:\n                node = Node(\n                    os.path.join(index_path, f'{refid}.xml'),\n                    None,\n                    self.cachecache,\n                    self.parserparser,\n                    self.rootroot,\n                )\n                node._visibility = Visibility.PUBLIC\n                self.groupsgroups.add_child(node)\n            if kind in [Kind.FILE, Kind.DIR]:\n                node = Node(\n                    os.path.join(index_path, f'{refid}.xml'),\n                    None,\n                    self.cachecache,\n                    self.parserparser,\n                    self.rootroot,\n                )\n                node._visibility = Visibility.PUBLIC\n                self.filesfiles.add_child(node)\n            if kind == Kind.PAGE:\n                node = Node(\n                    os.path.join(index_path, f'{refid}.xml'),\n                    None,\n                    self.cachecache,\n                    self.parserparser,\n                    self.rootroot,\n                )\n                node._visibility = Visibility.PUBLIC\n                self.pagespages.add_child(node)\n            if kind == Kind.EXAMPLE:\n                node = Node(\n                    os.path.join(index_path, f'{refid}.xml'),\n                    None,\n                    self.cachecache,\n                    self.parserparser,\n                    self.rootroot,\n                )\n                node._visibility = Visibility.PUBLIC\n                self.examplesexamples.add_child(node)\n\n        if self.debugdebug:\n            log.info('Deduplicating data... (may take a minute!)')\n        for child in self.rootroot.children.copy():\n            self._fix_duplicates_fix_duplicates(child, self.rootroot, [])\n\n        for child in self.groupsgroups.children.copy():\n            self._fix_duplicates_fix_duplicates(child, self.groupsgroups, [Kind.GROUP])\n\n        for child in self.filesfiles.children.copy():\n            self._fix_duplicates_fix_duplicates(child, self.filesfiles, [Kind.FILE, Kind.DIR])\n\n        for child in self.examplesexamples.children.copy():\n            self._fix_duplicates_fix_duplicates(child, self.examplesexamples, [Kind.EXAMPLE])\n\n        self._fix_parents_fix_parents(self.filesfiles)\n\n        if self.debugdebug:\n            log.info('Sorting...')\n        self._recursive_sort_recursive_sort(self.rootroot)\n        self._recursive_sort_recursive_sort(self.groupsgroups)\n        self._recursive_sort_recursive_sort(self.filesfiles)\n        self._recursive_sort_recursive_sort(self.pagespages)\n        self._recursive_sort_recursive_sort(self.examplesexamples)\n\n    def _fix_parents(self, node: Node):\n        if node.is_dir or node.is_root:\n            for child in node.children:\n                if child.is_file:\n                    child._parent = node\n                if child.is_dir:\n                    self._fix_parents_fix_parents(child)\n\n    def _recursive_sort(self, node: Node):\n        node.sort_children()\n        for child in node.children:\n            self._recursive_sort_recursive_sort(child)\n\n    def _is_in_root(self, node: Node, root: Node):\n        return any(node.refid == child.refid for child in root.children)\n\n    def _remove_from_root(self, refid: str, root: Node):\n        for i, child in enumerate(root.children):\n            if child.refid == refid:\n                root.children.pop(i)\n                return\n\n    def _fix_duplicates(self, node: Node, root: Node, filter: [Kind]):\n        for child in node.children:\n            if len(filter) &gt; 0 and child.kind not in filter:\n                continue\n            if self._is_in_root_is_in_root(child, root):\n                self._remove_from_root_remove_from_root(child.refid, root)\n            self._fix_duplicates_fix_duplicates(child, root, filter)\n\n    def printStructure(self):\n        if not self.debugdebug:\n            return\n        print('\\n')\n        log.info(\"Print root\")\n        for node in self.rootroot.children:\n            self.print_nodeprint_node(node, '')\n        print('\\n')\n\n        log.info(\"Print groups\")\n        for node in self.groupsgroups.children:\n            self.print_nodeprint_node(node, '')\n        print('\\n')\n\n        log.info(\"Print files\")\n        for node in self.filesfiles.children:\n            self.print_nodeprint_node(node, '')\n\n    def print_node(self, node: Node, indent: str):\n        if self.debugdebug:\n            log.info(f\"{indent} {node.kind} {node.name}\")\n        for child in node.children:\n            self.print_nodeprint_node(child, f'{indent}  ')\n</code></pre>"},{"location":"mkdoxyApi/doxyrun_8py/","title":"File doxyrun.py","text":"<p>FileList &gt; mkdoxy &gt; doxyrun.py</p> <p>Go to the source code of this file</p>"},{"location":"mkdoxyApi/doxyrun_8py/#namespaces","title":"Namespaces","text":"Type Name namespace doxyrun"},{"location":"mkdoxyApi/doxyrun_8py/#classes","title":"Classes","text":"Type Name class DoxygenRun Class for running Doxygen. <p>The documentation for this class was generated from the following file <code>mkdoxy/doxyrun.py</code></p>"},{"location":"mkdoxyApi/doxyrun_8py_source/","title":"File doxyrun.py","text":"<p>File List &gt; mkdoxy &gt; doxyrun.py</p> <p>Go to the documentation of this file</p> <pre><code>import hashlib\nimport logging\nimport tempfile\nfrom pathlib import Path, PurePath\nfrom subprocess import Popen, PIPE\n\nlog: logging.Logger = logging.getLogger(\"mkdocs\")\n\n\nclass DoxygenRun:\n\"\"\"! Class for running Doxygen.\n    @details This class is used to run Doxygen and parse the XML output.\n    \"\"\"\n    def __init__(self, doxygenBinPath: str, doxygenSource: str, tempDoxyFolder: str, doxyCfgNew):\n\"\"\"! Constructor.\n        Default Doxygen config options:\n\n        - INPUT: &lt;doxygenSource&gt;\n        - OUTPUT_DIRECTORY: &lt;tempDoxyFolder&gt;\n        - DOXYFILE_ENCODING: UTF-8\n        - GENERATE_XML: YES\n        - RECURSIVE: YES\n        - EXAMPLE_PATH: examples\n        - SHOW_NAMESPACES: YES\n        - GENERATE_HTML: NO\n        - GENERATE_LATEX: NO\n\n        @details\n        @param doxygenBinPath: (str) Path to the Doxygen binary.\n        @param doxygenSource: (str) Source files for Doxygen.\n        @param tempDoxyFolder: (str) Temporary folder for Doxygen.\n        @param doxyCfgNew: (dict) New Doxygen config options that will be added to the default config (new options will overwrite default options)\n        \"\"\"\n        self.doxygenBinPath: str = doxygenBinPath\n        self.doxygenSource: str = doxygenSource\n        self.tempDoxyFolder: str = tempDoxyFolder\n        self.doxyCfgNew: dict = doxyCfgNew\n        self.hashFileName: str = \"hashChanges.yaml\"\n        self.hashFilePath: PurePath = PurePath.joinpath(Path(self.tempDoxyFolder), Path(self.hashFileName))\n\n        self.doxyCfg: dict = {\n            \"INPUT\": self.doxygenSource,\n            \"OUTPUT_DIRECTORY\": self.tempDoxyFolder,\n            \"DOXYFILE_ENCODING\": \"UTF-8\",\n            \"GENERATE_XML\": \"YES\",\n            \"RECURSIVE\": \"YES\",\n            \"SHOW_NAMESPACES\": \"YES\",\n            \"GENERATE_HTML\": \"NO\",\n            \"GENERATE_LATEX\": \"NO\",\n        }\n\n        self.doxyCfg.update(self.doxyCfgNew)\n        self.doxyCfgStr: str = self.dox_dict2strdox_dict2str(self.doxyCfg)\n\n    # Source of dox_dict2str: https://xdress-fabio.readthedocs.io/en/latest/_modules/xdress/doxygen.html#XDressPlugin\n    def dox_dict2str(self, dox_dict: dict) -&gt; str:\n\"\"\"! Convert a dictionary to a string that can be written to a doxygen config file.\n        @details\n        @param dox_dict: (dict) Dictionary to convert.\n        @return: (str) String that can be written to a doxygen config file.\n        \"\"\"\n        s = \"\"\n        new_line = '{option} = {value}\\n'\n        for key, value in dox_dict.items():\n\n            if value is True:\n                _value = 'YES'\n            elif value is False:\n                _value = 'NO'\n            else:\n                _value = value\n\n            s += new_line.format(option=key.upper(), value=_value)\n\n        # Don't need an empty line at the end\n        return s.strip()\n\n    def hasChanged(self):\n\"\"\"! Check if the source files have changed since the last run.\n        @details\n        @return: (bool) True if the source files have changed since the last run.\n        \"\"\"\n        def heshWrite(filename: str, hash: str):\n            with open(filename, \"w\") as file:\n                file.write(hash)\n\n        def hashRead(filename: str) -&gt; str:\n            with open(filename, \"r\") as file:\n                return str(file.read())\n\n        sha1 = hashlib.sha1()\n        srcs = self.doxygenSource.split(\" \")\n        for src in srcs:\n            for path in Path(src).rglob('*.*'):\n                # # Code from https://stackoverflow.com/a/22058673/15411117\n                # # BUF_SIZE is totally arbitrary, change for your app!\n                BUF_SIZE = 65536  # lets read stuff in 64kb chunks!\n                if path.is_file():\n                    with open(path, 'rb') as f:\n                        while True:\n                            data = f.read(BUF_SIZE)\n                            if not data:\n                                break\n                            sha1.update(data)\n                # print(f\"{path}: {sha1.hexdigest()}\")\n\n        hahsNew = sha1.hexdigest()\n        if Path(self.hashFilePath).is_file():\n            hashOld = hashRead(self.hashFilePath)\n            if hahsNew == hashOld:\n                return False\n\n        heshWrite(self.hashFilePath, hahsNew)\n        return True\n\n    def run(self):\n\"\"\"! Run Doxygen with the current configuration using the Popen class.\n        @details\n        \"\"\"\n        doxyBuilder = Popen([self.doxygenBinPath, '-'], stdout=PIPE, stdin=PIPE, stderr=PIPE)\n        stdout_data = doxyBuilder.communicate(self.doxyCfgStr.encode('utf-8'))[0].decode().strip()\n        # log.info(self.destinationDir)\n        # log.info(stdout_data)\n\n    def checkAndRun(self):\n\"\"\"! Check if the source files have changed since the last run and run Doxygen if they have.\n        @details\n        @return: (bool) True if Doxygen was run.\n        \"\"\"\n        if self.hasChangedhasChanged():\n            self.runrun()\n            return True\n        else:\n            return False\n\n\n    def getOutputFolder(self) -&gt; PurePath:\n\"\"\"! Get the path to the XML output folder.\n        @details\n        @return: (PurePath) Path to the XML output folder.\n        \"\"\"\n        return Path.joinpath(Path(self.tempDoxyFolder), Path(\"xml\"))\n</code></pre>"},{"location":"mkdoxyApi/finder_8py/","title":"File finder.py","text":"<p>FileList &gt; mkdoxy &gt; finder.py</p> <p>Go to the source code of this file</p>"},{"location":"mkdoxyApi/finder_8py/#namespaces","title":"Namespaces","text":"Type Name namespace finder"},{"location":"mkdoxyApi/finder_8py/#classes","title":"Classes","text":"Type Name class Finder <p>The documentation for this class was generated from the following file <code>mkdoxy/finder.py</code></p>"},{"location":"mkdoxyApi/finder_8py_source/","title":"File finder.py","text":"<p>File List &gt; mkdoxy &gt; finder.py</p> <p>Go to the documentation of this file</p> <pre><code>from mkdoxy.constants import Kind\nfrom mkdoxy.doxygen import Doxygen\nfrom mkdoxy.utils import recursive_find, recursive_find_with_parent\nfrom typing import Dict\n\nclass Finder:\n    def __init__(self, doxygen: Dict[str, Doxygen], debug: bool = False):\n        self.doxygendoxygen = doxygen\n        self.debugdebug = debug\n\n    def _normalize(self, name: str) -&gt; str:\n        return name.replace(\" \", \"\")\n\n    def listToNames(self, list):\n        return [part.name_params for part in list]\n\n    def doxyClass(self, project, className: str):\n        classes = recursive_find(self.doxygendoxygen[project].root.children, Kind.CLASS)\n        if classes:\n            for findClass in classes:\n                if findClass.name_long == className:\n                    return findClass\n            return self.listToNameslistToNames(classes)\n        return None\n\n    def doxyClassMethod(self, project, className: str, methodName: str):\n        findClass = self.doxyClassdoxyClass(project, className)\n        if findClass:\n            if isinstance(findClass, list):\n                for member in findClass:\n                    if self._normalize_normalize(methodName) in self._normalize_normalize(member):\n                        return member\n                return findClass\n            else:\n                members = recursive_find(findClass.children, Kind.FUNCTION)\n                if members:\n                    for member in members:\n                        if self._normalize_normalize(methodName) in self._normalize_normalize(member.name_params):\n                            return member\n                    return self.listToNameslistToNames(members)\n                return None\n        return None\n\n    def doxyFunction(self, project, functionName: str):\n        functions = recursive_find_with_parent(self.doxygendoxygen[project].files.children, [Kind.FUNCTION], [Kind.FILE])\n        if functions:\n            for function in functions:\n                if self._normalize_normalize(functionName) == self._normalize_normalize(function.name_params):\n                    return function\n            return self.listToNameslistToNames(functions)\n        return None\n\n    def doxyCode(self, project, fileName):\n        files = recursive_find_with_parent(self.doxygendoxygen[project].files.children, [Kind.FILE], [Kind.DIR])\n        if files:\n            for file in files:\n                if self._normalize_normalize(fileName) == self._normalize_normalize(file.name_long):\n                    return file\n            return self.listToNameslistToNames(files)\n        return None\n</code></pre>"},{"location":"mkdoxyApi/generatorAuto_8py/","title":"File generatorAuto.py","text":"<p>FileList &gt; mkdoxy &gt; generatorAuto.py</p> <p>Go to the source code of this file</p>"},{"location":"mkdoxyApi/generatorAuto_8py/#namespaces","title":"Namespaces","text":"Type Name namespace generatorAuto"},{"location":"mkdoxyApi/generatorAuto_8py/#classes","title":"Classes","text":"Type Name class GeneratorAuto <p>The documentation for this class was generated from the following file <code>mkdoxy/generatorAuto.py</code></p>"},{"location":"mkdoxyApi/generatorAuto_8py_source/","title":"File generatorAuto.py","text":"<p>File List &gt; mkdoxy &gt; generatorAuto.py</p> <p>Go to the documentation of this file</p> <pre><code>import logging\nimport os\n\nfrom mkdocs.structure import files\n\nfrom mkdoxy.constants import Kind\nfrom mkdoxy.doxygen import Doxygen\nfrom mkdoxy.generatorBase import GeneratorBase\nfrom mkdoxy.node import Node\n\nlog: logging.Logger = logging.getLogger(\"mkdocs\")\n\nADDITIONAL_FILES = {\n    'Namespace ListNamespace List': 'namespaces.md',\n    'Namespace Members': 'namespace_members.md',\n    'Namespace Member Functions': 'namespace_member_functions.md',\n    'Namespace Member Variables': 'namespace_member_variables.md',\n    'Namespace Member Typedefs': 'namespace_member_typedefs.md',\n    'Namespace Member Enumerations': 'namespace_member_enums.md',\n    'Class Index': 'classes.md',\n    'Class Hierarchy': 'hierarchy.md',\n    'Class Members': 'class_members.md',\n    'Class Member Functions': 'class_member_functions.md',\n    'Class Member Variables': 'class_member_variables.md',\n    'Class Member Typedefs': 'class_member_typedefs.md',\n    'Class Member Enumerations': 'class_member_enums.md',\n}\n\ndef generate_link(name, url, end=\"\\n\") -&gt; str:\n    def normalize(name):\n        return \"\\\\\" + name if name.startswith(\"__\") else name\n\n    return f'- [{normalize(name)}]({url}){end}'\n\n# def generate_link(name, url) -&gt; str:\n#   return f\"\\t\\t- '{name}': '{url}'\\n\"\n\nclass GeneratorAuto:\n    def __init__(self,\n                 generatorBase: GeneratorBase,\n                 tempDoxyDir: str,\n                 siteDir: str,\n                 apiPath: str,\n                 doxygen: Doxygen,\n                 useDirectoryUrls: bool\n                 ):\n        self.generatorBasegeneratorBase = generatorBase\n        self.tempDoxyDirtempDoxyDir = tempDoxyDir\n        self.siteDirsiteDir = siteDir\n        self.apiPathapiPath = apiPath\n        self.doxygendoxygen = doxygen\n        self.useDirectoryUrlsuseDirectoryUrls = useDirectoryUrls\n        self.fullDocFilesfullDocFiles = []\n        self.debugdebug = generatorBase.debug\n        os.makedirs(os.path.join(self.tempDoxyDirtempDoxyDir, self.apiPathapiPath), exist_ok=True)\n\n    def save(self, path: str, output: str):\n        pathRel = os.path.join(self.apiPathapiPath, path)\n        self.fullDocFilesfullDocFiles.append(files.File(pathRel, self.tempDoxyDirtempDoxyDir, self.siteDirsiteDir, self.useDirectoryUrlsuseDirectoryUrls))\n        with open(os.path.join(self.tempDoxyDirtempDoxyDir, pathRel), 'w', encoding='utf-8') as file:\n            file.write(output)\n\n    def fullDoc(self, defaultTemplateConfig: dict):\n        self.annotatedannotated(self.doxygendoxygen.root.children, defaultTemplateConfig)\n        self.fileindexfileindex(self.doxygendoxygen.files.children, defaultTemplateConfig)\n        self.membersmembers(self.doxygendoxygen.root.children, defaultTemplateConfig)\n        self.membersmembers(self.doxygendoxygen.groups.children, defaultTemplateConfig)\n        self.filesfiles(self.doxygendoxygen.files.children, defaultTemplateConfig)\n        self.namespacesnamespaces(self.doxygendoxygen.root.children, defaultTemplateConfig)\n        self.classesclasses(self.doxygendoxygen.root.children, defaultTemplateConfig)\n        self.hierarchyhierarchy(self.doxygendoxygen.root.children, defaultTemplateConfig)\n        self.modulesmodules(self.doxygendoxygen.groups.children, defaultTemplateConfig)\n        self.pagespages(self.doxygendoxygen.pages.children, defaultTemplateConfig)\n        # self.examples(self.doxygen.examples.children) # TODO examples\n        self.relatedpagesrelatedpages(self.doxygendoxygen.pages.children)\n        self.indexindex(self.doxygendoxygen.root.children, [Kind.FUNCTION, Kind.VARIABLE, Kind.TYPEDEF, Kind.ENUM],\n                   [Kind.CLASS, Kind.STRUCT, Kind.INTERFACE], 'Class Members', defaultTemplateConfig)\n        self.indexindex(self.doxygendoxygen.root.children, [Kind.FUNCTION], [Kind.CLASS, Kind.STRUCT, Kind.INTERFACE],\n                   'Class Member Functions', defaultTemplateConfig)\n        self.indexindex(self.doxygendoxygen.root.children, [Kind.VARIABLE], [Kind.CLASS, Kind.STRUCT, Kind.INTERFACE],\n                   'Class Member Variables', defaultTemplateConfig)\n        self.indexindex(self.doxygendoxygen.root.children, [Kind.TYPEDEF], [Kind.CLASS, Kind.STRUCT, Kind.INTERFACE],\n                   'Class Member Typedefs', defaultTemplateConfig)\n        self.indexindex(self.doxygendoxygen.root.children, [Kind.ENUM], [Kind.CLASS, Kind.STRUCT, Kind.INTERFACE],\n                   'Class Member Enums', defaultTemplateConfig)\n        self.indexindex(self.doxygendoxygen.root.children, [Kind.FUNCTION, Kind.VARIABLE, Kind.TYPEDEF, Kind.ENUM],\n                   [Kind.NAMESPACE], 'Namespace Members', defaultTemplateConfig)\n        self.indexindex(self.doxygendoxygen.root.children, [Kind.FUNCTION], [Kind.NAMESPACE], 'Namespace Member Functions', defaultTemplateConfig)\n        self.indexindex(self.doxygendoxygen.root.children, [Kind.VARIABLE], [Kind.NAMESPACE], 'Namespace Member Variables', defaultTemplateConfig)\n        self.indexindex(self.doxygendoxygen.root.children, [Kind.TYPEDEF], [Kind.NAMESPACE], 'Namespace Member Typedefs', defaultTemplateConfig)\n        self.indexindex(self.doxygendoxygen.root.children, [Kind.ENUM], [Kind.NAMESPACE], 'Namespace Member Enums', defaultTemplateConfig)\n        self.indexindex(self.doxygendoxygen.files.children, [Kind.FUNCTION], [Kind.FILE], 'Functions', defaultTemplateConfig)\n        self.indexindex(self.doxygendoxygen.files.children, [Kind.DEFINE], [Kind.FILE], 'Macros', defaultTemplateConfig)\n        self.indexindex(self.doxygendoxygen.files.children, [Kind.VARIABLE, Kind.UNION, Kind.TYPEDEF, Kind.ENUM], [Kind.FILE],\n                   'Variables', defaultTemplateConfig)\n\n    def annotated(self, nodes: [Node], config: dict = None):\n        path = 'annotated.md'\n        output = self.generatorBasegeneratorBase.annotated(nodes, config)\n        self.savesave(path, output)\n\n    def programlisting(self, node: [Node], config: dict = None):\n        path = f'{node.refid}_source.md'\n\n        output = self.generatorBasegeneratorBase.programlisting(node, config)\n        self.savesave(path, output)\n\n    def fileindex(self, nodes: [Node], config: dict = None):\n        path = 'files.md'\n\n        output = self.generatorBasegeneratorBase.fileindex(nodes, config)\n        self.savesave(path, output)\n\n    def namespaces(self, nodes: [Node], config: dict = None):\n        path = 'namespaces.md'\n\n        output = self.generatorBasegeneratorBase.namespaces(nodes, config)\n        self.savesave(path, output)\n\n    def page(self, node: Node, config: dict = None):\n        path = f'{node.name}.md'\n\n        output = self.generatorBasegeneratorBase.page(node, config)\n        self.savesave(path, output)\n\n    def pages(self, nodes: [Node], config: dict = None):\n        for node in nodes:\n            self.pagepage(node, config)\n\n    def relatedpages(self, nodes: [Node], config: dict = None):\n        path = 'pages.md'\n\n        output = self.generatorBasegeneratorBase.relatedpages(nodes)\n        self.savesave(path, output)\n\n    def example(self, node: Node, config: dict = None):\n        path = f'{node.refid}.md'\n\n        output = self.generatorBasegeneratorBase.example(node, config)\n        self.savesave(path, output)\n\n    def examples(self, nodes: [Node], config: dict = None):\n        for node in nodes:\n            if node.is_example:\n                if node.has_programlisting:\n                    print(f'Generating example {node.name}...')\n                self.exampleexample(node, config)\n\n        path = 'examples.md'\n\n        output = self.generatorBasegeneratorBase.examples(nodes, config)\n        self.savesave(path, output)\n\n    def classes(self, nodes: [Node], config: dict = None):\n        path = 'classes.md'\n\n        output = self.generatorBasegeneratorBase.classes(nodes, config)\n        self.savesave(path, output)\n\n    def modules(self, nodes: [Node], config: dict = None):\n        path = 'modules.md'\n\n        output = self.generatorBasegeneratorBase.modules(nodes, config)\n        self.savesave(path, output)\n\n    def hierarchy(self, nodes: [Node], config: dict = None):\n        path = 'hierarchy.md'\n\n        output = self.generatorBasegeneratorBase.hierarchy(nodes, config)\n        self.savesave(path, output)\n\n    def member(self, node: Node, config: dict = None):\n        path = node.filename\n\n        output = self.generatorBasegeneratorBase.member(node, config)\n        self.savesave(path, output)\n\n        if node.is_language or node.is_group or node.is_file or node.is_dir:\n            self.membersmembers(node.children, config)\n\n    def file(self, node: Node, config: dict = None):\n        path = node.filename\n\n        output = self.generatorBasegeneratorBase.file(node, config)\n        self.savesave(path, output)\n\n        if node.is_file and node.has_programlisting:\n            self.programlistingprogramlisting(node, config)\n\n        if node.is_file or node.is_dir:\n            self.filesfiles(node.children, config)\n\n    def members(self, nodes: [Node], config: dict = None):\n        for node in nodes:\n            if node.is_parent or node.is_group or node.is_file or node.is_dir:\n                self.membermember(node, config)\n\n    def files(self, nodes: [Node], config: dict = None):\n        for node in nodes:\n            if node.is_file or node.is_dir:\n                self.filefile(node, config)\n\n    def index(self, nodes: [Node], kind_filters: Kind, kind_parents: [Kind], title: str, config: dict = None):\n        path = title.lower().replace(' ', '_') + '.md'\n\n        output = self.generatorBasegeneratorBase.index(nodes, kind_filters, kind_parents, title, config)\n        self.savesave(path, output)\n\n    def _generate_recursive(self, output_summary: str, node: Node, level: int):\n        if node.kind.is_parent():\n            output_summary += str(\n                ' ' * level\n                + generate_link(f'{node.kind.value} {node.name}', f'{node.refid}.md')\n            )\n            for child in node.children:\n                self._generate_recursive_generate_recursive(output_summary, child, level + 2)\n\n    def _generate_recursive_files(self, output_summary: str, node: Node, level: int, config: dict = None):\n        if config is None:\n            config = []\n        if node.kind.is_file() or node.kind.is_dir():\n            output_summary += str(\n                ' ' * int(level +2 ) +generate_link(node.name, f'{node.refid}.md', end='')\n            )\n\n            if node.kind.is_file():\n                output_summary += f\" [[source code]]({node.refid}_source.md) \\n\"\n            else:\n                output_summary += \"\\n\"\n\n            for child in node.children:\n                self._generate_recursive_files_generate_recursive_files(output_summary, child, level + 2, config)\n\n    def _generate_recursive_examples(self, output_summary: str, node: Node, level: int):\n        if node.kind.is_example():\n            output_summary += str(\n                ' ' * level + generate_link(node.name, f'{node.refid}.md')\n            )\n            for child in node.children:\n                self._generate_recursive_examples_generate_recursive_examples(output_summary, child, level + 2)\n\n    def _generate_recursive_groups(self, output_summary: str, node: Node, level: int):\n        if node.kind.is_group():\n            output_summary += str(\n                ' ' * level + generate_link(node.title, f'{node.refid}.md')\n            )\n            for child in node.children:\n                self._generate_recursive_groups_generate_recursive_groups(output_summary, child, level + 2)\n\n    def _generate_recursive_pages(self, output_summary: str, node: Node, level: int):\n        if node.kind.is_page():\n            output_summary += str(\n                ' ' * level + generate_link(node.title, f'{node.refid}.md')\n            )\n            for child in node.children:\n                self._generate_recursive_pages_generate_recursive_pages(output_summary, child, level + 2)\n\n    def summary(self, defaultTemplateConfig: dict):\n        offset = 0\n        output_summary = \"\" + str(\n            ' ' * (offset + 2) + generate_link('Related Pages', 'pages.md')\n        )\n        for node in self.doxygendoxygen.pages.children:\n            self._generate_recursive_pages_generate_recursive_pages(output_summary, node, offset + 4)\n\n        output_summary += str(' ' * (offset + 2) + generate_link('Modules', 'modules.md'))\n        for node in self.doxygendoxygen.groups.children:\n            self._generate_recursive_groups_generate_recursive_groups(output_summary, node, offset + 4)\n\n        output_summary += str(' ' * (offset + 2) + generate_link('Class List', 'annotated.md'))\n        for node in self.doxygendoxygen.root.children:\n            self._generate_recursive_generate_recursive(output_summary, node, offset + 4)\n\n        for key, val in ADDITIONAL_FILES.items():\n            output_summary += str(' ' * (offset + 2) + generate_link(key, val))\n\n        output_summary += str(' ' * (offset + 2) + generate_link('Files', 'files.md', end='\\n'))\n        for node in self.doxygendoxygen.files.children:\n            self._generate_recursive_files_generate_recursive_files(output_summary, node, offset + 4, defaultTemplateConfig)\n\n        # output_summary += str(' ' * (offset + 2) + generate_link('Examples', 'examples.md'))\n        # for node in self.doxygen.examples.children:\n        #   self._generate_recursive_examples(node, offset + 4)\n\n        output_summary += str(' ' * (offset + 2) + generate_link('File Variables', 'variables.md'))\n        output_summary += str(' ' * (offset + 2) + generate_link('File Functions', 'functions.md'))\n        output_summary += str(' ' * (offset + 2) + generate_link('File Macros', 'macros.md'))\n\n        self.savesave(\"links.md\", output_summary)\n</code></pre>"},{"location":"mkdoxyApi/generatorBase_8py/","title":"File generatorBase.py","text":"<p>FileList &gt; mkdoxy &gt; generatorBase.py</p> <p>Go to the source code of this file</p>"},{"location":"mkdoxyApi/generatorBase_8py/#namespaces","title":"Namespaces","text":"Type Name namespace generatorBase"},{"location":"mkdoxyApi/generatorBase_8py/#classes","title":"Classes","text":"Type Name class GeneratorBase Base class for all generators. <p>The documentation for this class was generated from the following file <code>mkdoxy/generatorBase.py</code></p>"},{"location":"mkdoxyApi/generatorBase_8py_source/","title":"File generatorBase.py","text":"<p>File List &gt; mkdoxy &gt; generatorBase.py</p> <p>Go to the documentation of this file</p> <pre><code>import logging\nimport os\nimport string\nfrom typing import Dict\n\nfrom jinja2 import Template, FileSystemLoader, Environment, ChoiceLoader\nfrom jinja2.exceptions import TemplateError\nfrom mkdocs import exceptions\n\nimport mkdoxy\nfrom mkdoxy.constants import Kind\nfrom mkdoxy.node import Node, DummyNode\nfrom mkdoxy.utils import parseTemplateFile, merge_two_dicts, recursive_find_with_parent, recursive_find\n\nlog: logging.Logger = logging.getLogger(\"mkdocs\")\n\n\nLETTERS = string.ascii_lowercase + '~_@\\\\'\n\nclass GeneratorBase:\n\"\"\"! Base class for all generators.\n    \"\"\"\n    def __init__(self, templateDir: str = \"\", ignore_errors: bool = False, debug: bool = False):\n\"\"\"! Constructor.\n        @details\n        @param templateDir (str): Path to the directory with custom templates (default: \"\")\n        @param ignore_errors (bool): If True, errors will be ignored (default: False)\n        @param debug (bool): If True, debug messages will be printed (default: False)\n        \"\"\"\n\n        self.debug: bool = debug # if True, debug messages will be printed\n        self.templates: Dict[str, Template] = {}\n        self.metaData: Dict[str, list[str]] = {}\n\n        # code from https://github.com/daizutabi/mkapi/blob/master/mkapi/core/renderer.py#L29-L38\n        path = os.path.join(os.path.dirname(mkdoxy.__file__), \"templates\")\n        for fileName in os.listdir(path):\n            filePath = os.path.join(path, fileName)\n            if fileName.endswith(\".jinja2\"):\n                with open(filePath, \"r\") as file:\n                    name = os.path.splitext(fileName)[0]\n                    fileTemplate, metaData = parseTemplateFile(file.read())\n                    self.templates[name] = Template(fileTemplate)\n                    self.metaData[name] = metaData\n            else:\n                log.error(f\"Trying to load unsupported file '{filePath}'. Supported file ends with '.jinja2'.\")\n\n        # test if templateDir is existing\n        if templateDir:\n            if not os.path.exists(templateDir):\n                raise exceptions.ConfigurationError(f\"Custom template directory '{templateDir}' does not exist.\")\n            # load custom templates and overwrite default templates - if they exist\n            for fileName in os.listdir(templateDir):\n                filePath = os.path.join(templateDir, fileName)\n                if fileName.endswith(\".jinja2\"):\n                    with open(filePath, \"r\") as file:\n                        name = os.path.splitext(fileName)[0]\n                        fileTemplate, metaData = parseTemplateFile(file.read())\n                        self.templates[name] = Template(fileTemplate)\n                        self.metaData[name] = metaData\n                        log.info(f\"Overwriting template '{name}' with custom template.\")\n                else:\n                    log.error(f\"Trying to load unsupported file '{filePath}'. Supported file ends with '.jinja2'.\")\n\n    @staticmethod\n    def shift_each_line(value: str, shift_char: str = '\\t') -&gt; str:\n\"\"\"! Shift each line of a given string for a given character.\n        @details It is used to shift the content for Markdown code blocks or other content that should be shifted.\n        @param value (str): String to shift.\n        @param shift_char (str): Character to shift the string (default: '\\t').\n        @return (str): Shifted string.\n        \"\"\"\n        return '\\n'.join(shift_char + line for line in value.split('\\n'))\n\n    def loadConfigAndTemplate(self, name: str) -&gt; [Template, dict]:\n        template = self.templates.get(name)\n        if not template:\n            raise exceptions.Abort(f\"Trying to load unexciting template '{name}'. Please create a new template file with name '{name}.jinja2'\")\n        metaData = self.metaData.get(name, {})\n        return template, metaData\n\n    def render(self, tmpl: Template, data: dict) -&gt; str:\n\"\"\"! Render a template with given data.\n        @details\n        @param tmpl (Template): Template to render.\n        @param data (dict): Data to render the template.\n        @return (str): Rendered template.\n        \"\"\"\n        try:\n            # if self.debug:\n                # print('Generating', path) # TODO: add path to data\n            rendered: str = tmpl.render(data)\n            return rendered\n        except TemplateError as e:\n            raise Exception(str(e)) from e\n\n    def error(self, config: dict, title: str, description: str, code_header:str = \"\", code: str = \"\", code_language: str = \"\", snippet_code: str = \"\"):\n\"\"\"! Render an error page.\n        @details\n        @param title (str): Title of the error page (default: \"\")\n        @param message (str): Message of the error page (default: \"\")\n        @param language (str): Programming language of the error page (default: \"\")\n        @return (str): Rendered error page.\n        \"\"\"\n        if config is None:\n            config = {}\n        template, metaConfig = self.loadConfigAndTemplateloadConfigAndTemplate(\"error\")\n\n        data = {\n            'title': title,\n            'description': description,\n            'code': code,\n            'code_header': code_header,\n            'code_language': code_language,\n            'snippet_code': snippet_code,\n            'config': merge_two_dicts(config, metaConfig),\n\n        }\n        return self.renderrender(template, data)\n\n    def annotated(self, nodes: [Node], config: dict = None):\n\"\"\"! Render an annotated page.\n        @details\n        @param nodes ([Node]): List of nodes to render.\n        @param config (dict): Config for the template (default: None)\n        @return (str): Rendered annotated page.\n        \"\"\"\n        if config is None:\n            config = {}\n        template, metaConfig = self.loadConfigAndTemplateloadConfigAndTemplate(\"annotated\")\n        data = {\n            'nodes': nodes,\n            'config': merge_two_dicts(config, metaConfig),\n        }\n        return self.renderrender(template, data)\n\n    def examples(self, nodes: [Node], config=None):\n\"\"\"! Render an examples page.\n        @details\n        @param nodes ([Node]): List of nodes to render.\n        @param config (dict): Config for the template (default: None)\n        @return (str): Rendered examples page.\n        \"\"\"\n        if config is None:\n            config = {}\n        template, metaConfig = self.loadConfigAndTemplateloadConfigAndTemplate(\"examples\")\n        data = {\n            'nodes': nodes,\n            'config': merge_two_dicts(config, metaConfig),\n        }\n        return self.renderrender(template, data)\n\n    def programlisting(self, node: [Node], config: dict = None):\n\"\"\"! Render a programlisting page.\n        @details\n        @param node ([Node]): Node to render.\n        @param config (dict): Config for the template (default: None)\n        @return (str): Rendered programlisting page.\n        \"\"\"\n        if config is None:\n            config = {}\n        template, metaConfig = self.loadConfigAndTemplateloadConfigAndTemplate(\"programlisting\")\n        data = {\n            'node': node,\n            'config': merge_two_dicts(config, metaConfig),\n        }\n        return self.renderrender(template, data)\n\n    def code(self, node: [Node], config: dict = None, code: str = \"\"):\n\"\"\"! Render a code page.\n        @details\n        @param node ([Node]): Node to render.\n        @param config (dict): Config for the template (default: None)\n        @param code (str): Code to render (default: \"\")\n        @return (str): Rendered code page.\n        \"\"\"\n        if config is None:\n            config = {}\n        template, metaConfig = self.loadConfigAndTemplateloadConfigAndTemplate(\"code\")\n        newConfig = config\n        # newConfig = merge_two_dicts(CODE_CONFIG, config)\n\n        data = {\n            'node': node,\n            'config': merge_two_dicts(config, metaConfig),\n            'code': code\n        }\n\n        return self.renderrender(template, data)\n\n    def fileindex(self, nodes: [Node], config: dict = None):\n\"\"\"! Render a fileindex page.\n        @details\n        @param nodes ([Node]): List of nodes to render.\n        @param config (dict): Config for the template (default: None)\n        @return (str): Rendered fileindex page.\n        \"\"\"\n        if config is None:\n            config = {}\n        template, metaConfig = self.loadConfigAndTemplateloadConfigAndTemplate(\"files\")\n        data = {\n            'nodes': nodes,\n            'config': merge_two_dicts(config, metaConfig),\n        }\n        return self.renderrender(template, data)\n\n    def namespaces(self, nodes: [Node], config: dict = None):\n\"\"\"! Render a namespaces page.\n        @details\n        @param nodes ([Node]): List of nodes to render.\n        @param config (dict): Config for the template. (default: None)\n        @return (str): Rendered namespaces page.\n        \"\"\"\n        if config is None:\n            config = {}\n        template, metaConfig = self.loadConfigAndTemplateloadConfigAndTemplate(\"namespaces\")\n        data = {\n            'nodes': nodes,\n            'config': merge_two_dicts(config, metaConfig),\n        }\n        return self.renderrender(template, data)\n\n    def page(self, node: Node, config: dict = None):\n\"\"\"! Render a page.\n        @details\n        @param node (Node): Node to render.\n        @param config (dict): Config for the template. (default: None)\n        @return (str): Rendered page.\n        \"\"\"\n        if config is None:\n            config = {}\n        template, metaConfig = self.loadConfigAndTemplateloadConfigAndTemplate(\"page\")\n        data = {\n            'node': node,\n            'config': merge_two_dicts(config, metaConfig),\n        }\n        return self.renderrender(template, data)\n\n    def example(self, node: Node, config: dict = None):\n\"\"\"! Render an example page.\n        @details\n        @param node (Node): Node to render.\n        @param config (dict): Config for the template. (default: None)\n        @return (str): Rendered example page.\n        \"\"\"\n        if config is None:\n            config = {}\n        template, metaConfig = self.loadConfigAndTemplateloadConfigAndTemplate(\"example\")\n        data = {\n            'node': node,\n            'config': merge_two_dicts(config, metaConfig),\n        }\n        return self.renderrender(template, data)\n\n    def relatedpages(self, nodes: [Node], config: dict = None):\n\"\"\"! Render a related pages page.\n        @details\n        @param nodes ([Node]): List of nodes to render.\n        @param config (dict): Config for the template. (default: None)\n        @return (str): Rendered related pages page.\n        \"\"\"\n        if config is None:\n            config = {}\n        template, metaConfig = self.loadConfigAndTemplateloadConfigAndTemplate(\"relatedPages\")\n        data = {\n            'nodes': nodes,\n            'config': merge_two_dicts(config, metaConfig),\n        }\n        return self.renderrender(template, data)\n\n    def classes(self, nodes: [Node], config: dict = None):\n\"\"\"! Render a classes page.\n        @details\n        @param nodes ([Node]): List of nodes to render.\n        @param config (dict): Config for the template. (default: None)\n        @return (str): Rendered classes page.\n        \"\"\"\n        if config is None:\n            config = {}\n        template, metaConfig = self.loadConfigAndTemplateloadConfigAndTemplate(\"classes\")\n\n        classes = recursive_find(nodes, Kind.CLASS)\n        classes.extend(recursive_find(nodes, Kind.STRUCT))\n        classes.extend(recursive_find(nodes, Kind.INTERFACE))\n        dictionary = {letter: [] for letter in LETTERS}\n\n        for klass in classes:\n            asd = klass.name_short[0].lower()\n            dictionary[asd].append(klass)\n\n        for letter in list(dictionary):\n            if len(dictionary[letter]) == 0:\n                del dictionary[letter]\n\n        data = {\n            'dictionary': dictionary,\n            'config': merge_two_dicts(config, metaConfig),\n        }\n        return self.renderrender(template, data)\n\n    def _find_base_classes(self, nodes: [Node], derived: Node):\n\"\"\"! Find base classes of a node.\n        @details\n        @param nodes ([Node]): List of nodes to search.\n        @param derived (Node): Derived node.\n        @return ([Node]): List of base classes.\n        \"\"\"\n        ret = []\n        for node in nodes:\n            if isinstance(node, str):\n                ret.append({\n                    'refid': node,\n                    'derived': derived\n                })\n            elif node.kind.is_parent() and not node.kind.is_namespace():\n                bases = node.base_classes\n                if len(bases) == 0:\n                    ret.append(node)\n                else:\n                    ret.extend(self._find_base_classes_find_base_classes(bases, node))\n        return ret\n\n    def modules(self, nodes: [Node], config: dict = None):\n\"\"\"! Render a modules page.\n        @details\n        @param nodes ([Node]): List of nodes to render.\n        @param config (dict): Config for the template. (default: None)\n        @return (str): Rendered modules page.\n        \"\"\"\n        if config is None:\n            config = {}\n        template, metaConfig = self.loadConfigAndTemplateloadConfigAndTemplate(\"modules\")\n        data = {\n            'nodes': nodes,\n            'config': merge_two_dicts(config, metaConfig),\n        }\n        return self.renderrender(template, data)\n\n    def hierarchy(self, nodes: [Node], config: dict = None):\n\"\"\"! Render a hierarchy page.\n        @details\n        @param nodes ([Node]): List of nodes to render.\n        @param config (dict): Config for the template. (default: None)\n        @return (str): Rendered hierarchy page.\n        \"\"\"\n        if config is None:\n            config = {}\n        template, metaConfig = self.loadConfigAndTemplateloadConfigAndTemplate(\"hierarchy\")\n\n        classes = recursive_find(nodes, Kind.CLASS)\n        classes.extend(recursive_find(nodes, Kind.STRUCT))\n        classes.extend(recursive_find(nodes, Kind.INTERFACE))\n\n        bases = self._find_base_classes_find_base_classes(classes, None)\n        deduplicated = {\n            base.refid: base\n            for base in bases if not isinstance(base, dict)\n        }\n\n        for base in bases:\n            if isinstance(base, dict):\n                if base['refid'] not in deduplicated:\n                    deduplicated[base['refid']] = []\n                deduplicated[base['refid']].append(base)\n\n        deduplicated_arr = []\n        for key, children in deduplicated.items():\n            if isinstance(children, list):\n                deduplicated_arr.append(DummyNode(\n                    key,\n                    list(map(lambda x: x['derived'], children)),\n                    Kind.CLASS\n                ))\n            else:\n                found: Node = next((klass for klass in classes if klass.refid == key), None)\n                if found:\n                    deduplicated_arr.append(found)\n\n        data = {\n            'classes': deduplicated_arr,\n            'config': merge_two_dicts(config, metaConfig),\n        }\n        return self.renderrender(template, data)\n\n    def function(self, node: Node, config: dict = None):\n\"\"\"! Render a function page.\n        @details\n        @param node (Node): Node to render.\n        @param config (dict): Config for the template. (default: None)\n        @return (str): Rendered function page.\n        \"\"\"\n        if config is None:\n            config = {}\n        templateMemDef, metaConfigMemDef = self.loadConfigAndTemplateloadConfigAndTemplate(\"memDef\")\n        templateCode, metaConfigCode = self.loadConfigAndTemplateloadConfigAndTemplate(\"code\")\n\n        data = {\n            'node': node,\n            'configMemDef': merge_two_dicts(config, metaConfigMemDef),\n            'templateCode': templateCode,\n            'configCode': metaConfigCode,\n            'config': merge_two_dicts(config, metaConfigMemDef),\n        }\n        return self.renderrender(templateMemDef, data)\n\n    def member(self, node: Node, config: dict = None):\n\"\"\"! Render a member page.\n        @details\n        @param node (Node): Node to render.\n        @param config (dict): Config for the template. (default: None)\n        @return (str): Rendered member page.\n        \"\"\"\n        if config is None:\n            config = {}\n        template, metaConfig = self.loadConfigAndTemplateloadConfigAndTemplate(\"member\")\n        templateMemDef, metaConfigMemDef = self.loadConfigAndTemplateloadConfigAndTemplate(\"memDef\")\n        templateMemTab, metaConfigMemTab = self.loadConfigAndTemplateloadConfigAndTemplate(\"memTab\")\n        templateCode, metaConfigCode = self.loadConfigAndTemplateloadConfigAndTemplate(\"code\")\n\n        data = {\n            'node': node,\n            'templateMemDef': templateMemDef,\n            'configMemDef': metaConfigMemDef,\n            'templateMemTab': templateMemTab,\n            'configMemTab': metaConfigMemTab,\n            'templateCode': templateCode,\n            'configCode': metaConfigCode,\n            'config': merge_two_dicts(config, metaConfig)\n        }\n        return self.renderrender(template, data)\n\n    def file(self, node: Node, config: dict = None):\n\"\"\"! Render a file page.\n        @details\n        @param node (Node): Node to render.\n        @param config (dict): Config for the template. (default: None)\n        @return (str): Rendered file page.\n        \"\"\"\n        if config is None:\n            config = {}\n        template, metaConfig = self.loadConfigAndTemplateloadConfigAndTemplate(\"member\")\n        templateMemDef, metaConfigMemDef = self.loadConfigAndTemplateloadConfigAndTemplate(\"memDef\")\n        templateMemTab, metaConfigMemTab = self.loadConfigAndTemplateloadConfigAndTemplate(\"memTab\")\n\n        data = {\n            'node': node,\n            'templateMemDef': templateMemDef,\n            'configMemDef': metaConfigMemDef,\n            'templateMemTab': templateMemTab,\n            'configMemTab': metaConfigMemTab,\n            'config': merge_two_dicts(config, metaConfig)\n        }\n        return self.renderrender(template, data)\n\n    def index(self, nodes: [Node], kind_filters: Kind, kind_parents: [Kind], title: str, config: dict = None):\n\"\"\"! Render an index page.\n        @details\n        @param nodes ([Node]): List of nodes to render.\n        @param kind_filters (Kind): Kind of nodes to render.\n        @param kind_parents ([Kind]): List of parent kinds of nodes to render.\n        @param title (str): Title of the index page.\n        @param config (dict): Config for the template. (default: None)\n        @return (str): Rendered index page.\n        \"\"\"\n        if config is None:\n            config = {}\n        template, metaConfig = self.loadConfigAndTemplateloadConfigAndTemplate(\"index\")\n\n        found_nodes = recursive_find_with_parent(nodes, kind_filters, kind_parents)\n        dictionary = {letter: [] for letter in LETTERS}\n\n        # Sort items into the dictionary\n        for found in found_nodes:\n            dictionary[found.name_tokens[-1][0].lower()].append(found)\n\n        # Delete unused letters\n        for letter in list(dictionary):\n            if len(dictionary[letter]) == 0:\n                del dictionary[letter]\n\n        # Sort items if they have the same name\n        sorted_dictionary = {}\n        for letter, items in dictionary.items():\n            d = {}\n            for item in items:\n                # The name of the item is not yet in the dictionary\n                if item.name_short not in d:\n                    d[item.name_short] = [item.parent]\n\n                else:\n                    found = any(test.refid == item.parent.refid for test in d[item.name_short])\n                    if not found:\n                        d[item.name_short].append(item.parent)\n\n            sorted_dictionary[letter] = d\n\n        data = {\n            'title': title,\n            'dictionary': sorted_dictionary,\n            'config': merge_two_dicts(config, metaConfig),\n        }\n        return self.renderrender(template, data)\n</code></pre>"},{"location":"mkdoxyApi/generatorSnippets_8py/","title":"File generatorSnippets.py","text":"<p>FileList &gt; mkdoxy &gt; generatorSnippets.py</p> <p>Go to the source code of this file</p>"},{"location":"mkdoxyApi/generatorSnippets_8py/#namespaces","title":"Namespaces","text":"Type Name namespace generatorSnippets namespace pprint"},{"location":"mkdoxyApi/generatorSnippets_8py/#classes","title":"Classes","text":"Type Name class GeneratorSnippets class SnippetClass <p>The documentation for this class was generated from the following file <code>mkdoxy/generatorSnippets.py</code></p>"},{"location":"mkdoxyApi/generatorSnippets_8py_source/","title":"File generatorSnippets.py","text":"<p>File List &gt; mkdoxy &gt; generatorSnippets.py</p> <p>Go to the documentation of this file</p> <pre><code>import logging\nimport pathlib\nimport re\nimport string\nfrom pprint import *\n\nfrom mkdocs.config import Config\nfrom mkdocs.structure import pages\nfrom mkdoxy.doxygen import Doxygen\n\nfrom mkdoxy.generatorBase import GeneratorBase\nfrom ruamel.yaml import YAML, YAMLError\n\nfrom mkdoxy.finder import Finder\nfrom mkdoxy.node import Node\n\nlog: logging.Logger = logging.getLogger(\"mkdocs\")\n\nregexIncorrect = r\"(?s)(?&lt;!```yaml\\n)(^::: doxy)(\\.(?P&lt;project&gt;[a-zA-Z0-9_]+))?[\\.]?[\\s]*\\n(?P&lt;yaml&gt;.*?)\\s*\\n(?:(?=\\n)|(?=:::)|\\Z)\" # https://regex101.com/r/IYl25b/2\nregexLong= r\"(?s)(?&lt;!```yaml\\n)(^::: doxy\\.(?P&lt;project&gt;[a-zA-Z0-9_]+)\\.(?P&lt;argument&gt;[a-zA-Z0-9_.]+))\\s*\\n(?P&lt;yaml&gt;.*?)(?:(?:(?:\\r*\\n)(?=\\n))|(?=:::)|`|\\Z)\" #https://regex101.com/r/lIgOij/4\nregexShort = r\"(?s)(?&lt;!```yaml\\n)(^::: doxy\\.(?P&lt;project&gt;[a-zA-Z0-9_]+)\\.(?P&lt;argument&gt;[a-zA-Z0-9_.]+))\\s*\\n(?:(?=\\n)|(?=:::)|\\Z)\"# https://regex101.com/r/QnqxRc/2\n\nclass GeneratorSnippets:\n    def __init__(self,\n                 markdown: str,\n                 generatorBase: dict[str, GeneratorBase],\n                 doxygen: dict[str, Doxygen],\n                 projects: dict[str, dict[str, any]],\n                 useDirectoryUrls: bool,\n                 page: pages.Page,\n                 config: dict,\n                 debug: bool = False):\n\n        self.markdownmarkdown = markdown\n        self.generatorBasegeneratorBase = generatorBase\n        self.doxygendoxygen = doxygen\n        self.projectsprojects = projects\n        self.useDirectoryUrlsuseDirectoryUrls = useDirectoryUrls\n        self.pagepage = page\n        self.configconfig = config\n        self.debugdebug = debug\n        self.finderfinder = Finder(doxygen, debug)\n\n        self.doxy_argumentsdoxy_arguments = {\n            \"code\": self.doxyCodedoxyCode,\n            \"function\": self.doxyFunctiondoxyFunction,\n            \"class\": self.doxyClassdoxyClass,\n            \"class.method\": self.doxyClassMethoddoxyClassMethod,\n            \"class.list\":self.doxyClassListdoxyClassList,\n            \"class.index\":self.doxyClassIndexdoxyClassIndex,\n            \"class.hierarchy\":self.doxyClassHierarchydoxyClassHierarchy,\n            \"namespace.list\":self.doxyNamespaceListdoxyNamespaceList,\n            \"file.list\":self.doxyFileListdoxyFileList,\n        }\n\n        # fix absolute path\n        path = pathlib.PurePath(self.pagepage.url).parts\n        self.pageUrlPrefixpageUrlPrefix = ''.join(\"../\" for _ in range(len(path)-1))\n\n    def generate(self):\n        if self.is_doxy_inactiveis_doxy_inactive(self.configconfig):\n            return self.markdownmarkdown # doxygen is inactive return unchanged markdown\n\n        matches = re.finditer(regexIncorrect, self.markdownmarkdown, re.MULTILINE)\n        for match in reversed(list(matches)):\n            snippet = match.group()\n            project_name = match.group('project') or \"&lt;project_name&gt;\"\n\n            snippet_config = self.configconfig.copy()\n            snippet_config.update(self.try_load_yamltry_load_yaml(match.group('yaml'), project_name, snippet, self.configconfig))\n\n            if self.is_doxy_inactiveis_doxy_inactive(snippet_config):\n                continue\n\n            replacement = (\n                self.incorrect_argumentincorrect_argument(project_name, \"\", snippet_config, snippet)\n                if self.is_project_existis_project_exist(project_name)\n                else self.incorrect_projectincorrect_project(project_name, snippet_config, snippet)\n            )\n            self.replace_markdownreplace_markdown(match.start(), match.end(), replacement)\n\n\n        matches = re.finditer(regexShort, self.markdownmarkdown, re.MULTILINE)\n        for match in reversed(list(matches)):\n            snippet = match.group()\n            argument = match.group('argument').lower()\n            project_name = match.group('project')\n\n            snippet_config = self.configconfig.copy()\n            snippet_config.update(self.try_load_yamltry_load_yaml(match.group('yaml'), project_name, snippet, self.configconfig))\n\n            if self.is_doxy_inactiveis_doxy_inactive(snippet_config):\n                continue\n\n            replaceStr = self.call_doxy_by_namecall_doxy_by_name(snippet, project_name, argument, snippet_config)\n            self.replace_markdownreplace_markdown(match.start(), match.end(), replaceStr)\n\n        matches = re.finditer(regexLong, self.markdownmarkdown, re.MULTILINE)\n        for match in reversed(list(matches)):\n            snippet = match.group()\n            argument = match.group('argument').lower()\n            project_name = match.group('project')\n            # log.debug(f\"\\nArgument: {argument}\")\n\n            # config has been updated by yaml\n            snippet_config = self.configconfig.copy()\n            snippet_config.update(self.try_load_yamltry_load_yaml(match.group('yaml'), project_name, snippet, self.configconfig))\n\n            replaceStr = self.call_doxy_by_namecall_doxy_by_name(snippet, project_name, argument, snippet_config)\n            self.replace_markdownreplace_markdown(match.start(), match.end(), replaceStr)\n        return self.markdownmarkdown\n\n    def try_load_yaml(self, yaml_raw: str, project: str, snippet: str, config: dict) -&gt; dict:\n        try:\n            yaml = YAML()\n            return yaml.load(yaml_raw)\n        except YAMLError as e:\n            log.error(f\"YAML error in {project} project on page {self.page.url}\")\n            self.doxyErrordoxyError(\n                project,\n                config,\n                \"YAML error\",\n                \"Check your YAML syntax\",\n                \"YAML snippet:\",\n                yaml_raw,\n                \"yaml\",\n                snippet,\n            )\n            return {}\n\n    def incorrect_project(self, project: str, config: dict, snippet: str, ) -&gt; str:\n        return self.doxyErrordoxyError(\n            project,\n            config,\n            f\"Incorrect project name: {project}\",\n            \"Project name have to contain [a-zA-Z0-9_]\",\n            \"A list of available projects:\",\n            \"\\n\".join(self.projectsprojects.keys()),\n            \"yaml\",\n            snippet,\n        )\n\n    def incorrect_argument(self, project: str, argument: str, config: dict, snippet: str) -&gt; str:\n        return self.doxyErrordoxyError(\n            project,\n            config,\n            f\"Incorrect argument: {argument}\" if argument else f\"Add argument to snippet: {project}\",\n            f\"Argument have to be based on this diagram \u2192 **:::doxy.{project}.&lt;argument\\&gt;**\",\n            \"A list of available arguments:\",\n            \"\\n\".join(self.doxy_argumentsdoxy_arguments.keys()),\n            \"yaml\",\n            snippet,\n        )\n\n    def replace_markdown(self, start: int, end: int, replacement: str):\n        self.markdownmarkdown = self.markdownmarkdown[:start] + replacement + \"\\n\" + self.markdownmarkdown[end:]\n\n    def _recurs_setLinkPrefixNode(self, node: Node, linkPrefix: str):\n        node.setLinkPrefix(linkPrefix)\n        if node.kind.is_parent():\n            self._recurs_setLinkPrefixNodes_recurs_setLinkPrefixNodes(node.children, linkPrefix)\n\n    def _recurs_setLinkPrefixNodes(self, nodes: [Node], linkPrefix: str):\n        for node in nodes:\n            self._recurs_setLinkPrefixNode_recurs_setLinkPrefixNode(node, linkPrefix)\n\n    def is_project_exist(self, project: str):\n        return project in self.projectsprojects\n\n    def is_doxy_inactive(self, config: dict):\n        return config.get(\"disable_doxy_snippets\", False)\n\n\n    def call_doxy_by_name(self, snippet, project: str, argument: str, config: dict) -&gt; str:\n        if argument not in self.doxy_argumentsdoxy_arguments:\n            return self.incorrect_argumentincorrect_argument(project, argument, config, snippet)\n        callback = self.doxy_argumentsdoxy_arguments[argument]\n        return callback(snippet, project, config)\n\n    def checkConfig(self, snippet, project: str, config, required_params: [str]) -&gt; bool:\n\"\"\"\n        returns false if config is correct\n        return error message if project not exist or find problem in config\n        \"\"\"\n        return next(\n            (\n                self.doxyErrordoxyError(\n                    project,\n                    config,\n                    f\"Missing parameter: {param}\",\n                    \"This parameter is required\",\n                    \"Required parameters:\",\n                    \"\\n\".join(required_params),\n                    \"yaml\",\n                    snippet,\n                )\n                for param in required_params\n                if not config.get(param)\n            ),\n            False,\n        )\n\n\n\n    def doxyError(self, project, config: dict, title: str, description: str, code_header:str = \"\", code: str = \"\", code_language: str = \"\", snippet_code: str = \"\") -&gt; str:\n        log.error(f\"  -&gt; {title} -&gt; page: {self.page.canonical_url}\")\n        if project not in self.projectsprojects:\n            project = list(self.projectsprojects)[0]\n        return self.generatorBasegeneratorBase[project].error(config, title, description, code_header, code, code_language, snippet_code)\n\n\n    def doxyCode(self, snippet, project: str, config):\n        errorMsg = self.checkConfigcheckConfig(snippet, project, config, [\"file\"])\n        if errorMsg:\n            return errorMsg\n        node = self.finderfinder.doxyCode(project, config.get(\"file\"))\n        if isinstance(node, Node):\n            progCode = self.codeStripcodeStrip(node.programlisting, node.code_language, config.get(\"start\", 1), config.get(\"end\", 0))\n            if progCode == False:\n                return self.doxyErrordoxyError(project, config, f\"Parameter start: {config.get('start')} is greater than end: {config.get('end')}\",f\"{snippet}\", \"yaml\")\n            self._recurs_setLinkPrefixNode_recurs_setLinkPrefixNode(node, self.pageUrlPrefixpageUrlPrefix + project + \"/\")\n            return self.generatorBasegeneratorBase[project].code(node, config, progCode)\n        return self.doxyErrordoxyError(\n            project,\n            config,\n            f\"Did not find File: `{config.get('file')}`\",\n            \"Check your file name\",\n            f\"Available files in {project} project:\",\n            \"\\n\".join(node),\n            \"yaml\",\n            snippet,\n        )\n\n    def codeStrip(self, codeRaw, codeLanguage: str, start: int = 1, end: int = None):\n        lines = codeRaw.split(\"\\n\")\n\n        if end and start &gt; end:\n            return False\n\n        out = \"\".join(line + \"\\n\" for num, line in enumerate(lines)\n                      if num &gt;= start and (num &lt;= end or end == 0))\n        return f\"```{codeLanguage} linenums='{start}'\\n{out}```\"\n\n\n    def doxyFunction(self, snippet, project: str, config: dict):\n        errorMsg = self.checkConfigcheckConfig(snippet, project, config, [\"name\"])\n        if errorMsg:\n            return errorMsg\n\n        node = self.finderfinder.doxyFunction(project, config.get(\"name\"))\n        if isinstance(node, Node):\n            self._recurs_setLinkPrefixNode_recurs_setLinkPrefixNode(node, self.pageUrlPrefixpageUrlPrefix + project + \"/\")\n            return self.generatorBasegeneratorBase[project].function(node, config)\n        return self.doxyErrordoxyError(\n            project,\n            config,\n            \"Incorrect function configuration\",\n            f\"Did not find Function with name: `{config.get('name')}`\",\n            \"Available functions:\",\n            \"\\n\".join(node),\n            \"yaml\",\n            snippet,\n        )\n\n\n    def doxyClass(self, snippet, project: str, config: dict):\n        errorMsg = self.checkConfigcheckConfig(snippet, project, config, [\"name\"])\n        if errorMsg:\n            return errorMsg\n\n        node = self.finderfinder.doxyClass(project, config.get(\"name\"))\n        if isinstance(node, Node):\n            self._recurs_setLinkPrefixNode_recurs_setLinkPrefixNode(node, self.pageUrlPrefixpageUrlPrefix + project + \"/\")\n            return self.generatorBasegeneratorBase[project].member(node, config)\n        return self.doxyErrordoxyError(\n            project,\n            config,\n            \"Incorrect class configuration\",\n            f\"Did not find Class with name: `{config.get('name')}`\",\n            \"Available classes:\",\n            \"\\n\".join(node),\n            \"yaml\",\n            snippet,\n        )\n\n    def doxyClassMethod(self, snippet, project: str, config):\n        errorMsg = self.checkConfigcheckConfig(snippet, project, config, [\"name\", \"method\"])\n        if errorMsg:\n            return errorMsg\n\n        node = self.finderfinder.doxyClassMethod(project, config.get(\"name\"), config.get(\"method\"))\n        if isinstance(node, Node):\n            self._recurs_setLinkPrefixNode_recurs_setLinkPrefixNode(node, self.pageUrlPrefixpageUrlPrefix + project + \"/\")\n            return self.generatorBasegeneratorBase[project].function(node, config)\n        return self.doxyErrordoxyError(\n            project,\n            config,\n            \"Incorrect class method configuration\",\n            f\"Did not find Class with name: `{config.get('name')}` and method: `{config.get('method')}`\",\n            \"Available classes and methods:\",\n            \"\\n\".join(node),\n            \"yaml\",\n            snippet,\n\n        )\n    def doxyClassList(self, snippet, project: str, config):\n        errorMsg = self.checkConfigcheckConfig(snippet, project, config, [])\n        if errorMsg:\n            return errorMsg\n        nodes = self.doxygendoxygen[project].root.children\n        self._recurs_setLinkPrefixNodes_recurs_setLinkPrefixNodes(nodes, self.pageUrlPrefixpageUrlPrefix + project + \"/\")\n        return self.generatorBasegeneratorBase[project].annotated(nodes, config)\n\n    def doxyClassIndex(self, snippet, project: str, config):\n        errorMsg = self.checkConfigcheckConfig(snippet, project, config, [])\n        if errorMsg:\n            return errorMsg\n        nodes = self.doxygendoxygen[project].root.children\n        self._recurs_setLinkPrefixNodes_recurs_setLinkPrefixNodes(nodes, self.pageUrlPrefixpageUrlPrefix + project + \"/\")\n        return self.generatorBasegeneratorBase[project].classes(nodes, config)\n\n    def doxyClassHierarchy(self, snippet, project: str, config):\n        errorMsg = self.checkConfigcheckConfig(snippet, project, config, [])\n        if errorMsg:\n            return errorMsg\n        nodes = self.doxygendoxygen[project].root.children\n        self._recurs_setLinkPrefixNodes_recurs_setLinkPrefixNodes(nodes, self.pageUrlPrefixpageUrlPrefix + project + \"/\")\n        return self.generatorBasegeneratorBase[project].hierarchy(nodes, config)\n\n    def doxyNamespaceList(self, snippet, project: str, config):\n        errorMsg = self.checkConfigcheckConfig(snippet, project, config, [])\n        if errorMsg:\n            return errorMsg\n        nodes = self.doxygendoxygen[project].root.children\n        self._recurs_setLinkPrefixNodes_recurs_setLinkPrefixNodes(nodes, self.pageUrlPrefixpageUrlPrefix + project + \"/\")\n        return self.generatorBasegeneratorBase[project].namespaces(nodes, config)\n\n    def doxyFileList(self, snippet, project: str, config):\n        errorMsg = self.checkConfigcheckConfig(snippet, project, config, [])\n        if errorMsg:\n            return errorMsg\n        nodes = self.doxygendoxygen[project].files.children\n        self._recurs_setLinkPrefixNodes_recurs_setLinkPrefixNodes(nodes, self.pageUrlPrefixpageUrlPrefix + project + \"/\")\n        return self.generatorBasegeneratorBase[project].fileindex(nodes, config)\n\n\n\n\nclass SnippetClass:\n    def __init__(self, config):\n        self.configconfig = config\n\n    def default(self):\n        return \"\"\n</code></pre>"},{"location":"mkdoxyApi/markdown_8py/","title":"File markdown.py","text":"<p>FileList &gt; mkdoxy &gt; markdown.py</p> <p>Go to the source code of this file</p>"},{"location":"mkdoxyApi/markdown_8py/#namespaces","title":"Namespaces","text":"Type Name namespace markdown"},{"location":"mkdoxyApi/markdown_8py/#classes","title":"Classes","text":"Type Name class Br class Code class Md class MdBlockQuote class MdBold class MdCodeBlock class MdHeader class MdHint class MdImage class MdItalic class MdLine class MdLink class MdList class MdParagraph class MdRenderer class MdTable class MdTableCell class MdTableRow class Text <p>The documentation for this class was generated from the following file <code>mkdoxy/markdown.py</code></p>"},{"location":"mkdoxyApi/markdown_8py_source/","title":"File markdown.py","text":"<p>File List &gt; mkdoxy &gt; markdown.py</p> <p>Go to the documentation of this file</p> <pre><code>from typing import List\n\ndef escape(s: str) -&gt; str:\n    ret = s.replace('*', '\\\\*')\n    ret = ret.replace('_', '\\\\_')\n    ret = ret.replace('&lt;', '&amp;lt;')\n    ret = ret.replace('&gt;', '&amp;gt;')\n    return ret.replace('|', '\\|')\n\n\n\nclass MdRenderer:\n    def __init__(self):\n        self.outputoutput = ''\n        self.eol_flageol_flag = True\n\n    def write(self, s: str):\n        self.outputoutput += s\n        self.eol_flageol_flag = False\n\n    def eol(self):\n        if not self.eol_flageol_flag:\n            self.outputoutput += '\\n'\n            self.eol_flageol_flag = True\n\n\nclass Md:\n    def __init__(self, children: List['Md']):\n        self.childrenchildren = children\n\n    def append(self, child: 'Md'):\n        self.childrenchildren.append(child)\n\n    def extend(self, child: List['Md']):\n        self.childrenchildren.extend(child)\n\n\nclass Text:\n    def __init__(self, text: str):\n        self.texttext = text\n\n    def render(self, f: MdRenderer, indent: str):\n        if self.texttext:\n            f.write(escape(self.texttext))\n\n\nclass Br:\n    def __init__(self):\n        pass\n\n    def render(self, f: MdRenderer, indent: str):\n        f.write('\\n\\n')\n\n\nclass MdHint(Md):\n    def __init__(self, children: List[Md], typ: str, title: str):\n        Md.__init__(self, children)\n        self.titletitle = title\n        self.typtyp = typ\n\n    def render(self, f: MdRenderer, indent: str):\n        f.write(f'::: {self.typ} {self.title}' + '\\n')\n        for child in self.childrenchildren:\n            child.render(f, '')\n        f.write(':::\\n')\n\n\nclass MdBold(Md):\n    def __init__(self, children: List[Md]):\n        Md.__init__(self, children)\n\n    def render(self, f: MdRenderer, indent: str):\n        f.write('**')\n        for child in self.childrenchildren:\n            child.render(f, '')\n        f.write('**')\n\n\nclass MdImage:\n    def __init__(self, url: str):\n        self.urlurl = url\n\n    def render(self, f: MdRenderer, indent: str):\n        f.write(f'![Image]({self.url})')\n\n\nclass Code():\n    def __init__(self, text: str):\n        self.texttext = text\n\n    def render(self, f: MdRenderer, indent: str):\n        f.write(f'`{self.text}`')\n\n\nclass MdCodeBlock:\n    def __init__(self, lines: List[str]):\n        self.lineslines = lines\n\n    def append(self, line: str):\n        self.lineslines.append(line)\n\n    def render(self, f: MdRenderer, indent: str):\n        for line in self.lineslines:\n            f.write(line)\n            f.write('\\n')\n\n\nclass MdBlockQuote(Md):\n    def __init__(self, children: List[Md]):\n        Md.__init__(self, children)\n\n    def render(self, f: MdRenderer, indent: str):\n        f.write('\\n')\n        for child in self.childrenchildren:\n            f.write('&gt; ')\n            child.render(f, '')\n            f.write('\\n')\n\n\nclass MdItalic(Md):\n    def __init__(self, children: List[Md]):\n        Md.__init__(self, children)\n\n    def render(self, f: MdRenderer, indent: str):\n        f.write('_')\n        for child in self.childrenchildren:\n            child.render(f, '')\n        f.write('_')\n\n\nclass MdParagraph(Md):\n    def __init__(self, children: List[Md]):\n        Md.__init__(self, children)\n\n    def render(self, f: MdRenderer, indent: str):\n        for child in self.childrenchildren:\n            child.render(f, indent)\n        f.eol()\n\n\nclass MdLink(Md):\n    def __init__(self, children: List[Md], url: str):\n        Md.__init__(self, children)\n        self.urlurl = url\n\n    def render(self, f: MdRenderer, indent: str):\n        f.write('[')\n        for child in self.childrenchildren:\n            child.render(f, '')\n        f.write(f']({self.url})')\n\n\nclass MdList(Md):\n    def __init__(self, children: List[Md]):\n        Md.__init__(self, children)\n\n    def render(self, f: MdRenderer, indent: str):\n        f.eol()\n        for child in self.childrenchildren:\n            if not isinstance(child, MdList):\n                f.write(f'{indent}* ')\n            child.render(f, f'{indent}  ')\n\n\nclass MdLine:\n    def __init__(self):\n        pass\n\n    def render(self, f: MdRenderer, indent: str):\n        f.eol()\n        f.write('----------------------------------------')\n        f.eol()\n\n\nclass MdHeader(Md):\n    def __init__(self, level: int, children: List[Md]):\n        Md.__init__(self, children)\n        self.levellevel = level\n\n    def render(self, f: MdRenderer, indent: str):\n        f.write('#' * self.levellevel + ' ')\n        for child in self.childrenchildren:\n            child.render(f, f'{indent}')\n        f.write('\\n')\n        f.eol()\n\n\nclass MdTableCell(Md):\n    def __init__(self, children: List[Md]):\n        Md.__init__(self, children)\n\n    def render(self, f: MdRenderer, indent: str):\n        for child in self.childrenchildren:\n            child.render(f, indent)\n\n\nclass MdTableRow(Md):\n    def __init__(self, children: List[Md]):\n        Md.__init__(self, children)\n\n    def render(self, f: MdRenderer, indent: str):\n        f.eol()\n        f.write('|')\n        for child in self.childrenchildren:\n            child.render(f, '')\n            f.write('|')\n        f.eol()\n\n\nclass MdTable(Md):\n    def __init__(self):\n        Md.__init__(self, [])\n\n    def render(self, f: MdRenderer, indent: str):\n        is_first = True\n        f.eol()\n        for child in self.childrenchildren:\n            child.render(f, '')\n            if is_first:\n                for _ in range(len(child.children)):\n                    f.write('|-----')\n                f.write('|')\n            is_first = False\n        f.write('\\n\\n')\n</code></pre>"},{"location":"mkdoxyApi/node_8py/","title":"File node.py","text":"<p>FileList &gt; mkdoxy &gt; node.py</p> <p>Go to the source code of this file</p>"},{"location":"mkdoxyApi/node_8py/#namespaces","title":"Namespaces","text":"Type Name namespace node"},{"location":"mkdoxyApi/node_8py/#classes","title":"Classes","text":"Type Name class DummyNode class Node <p>The documentation for this class was generated from the following file <code>mkdoxy/node.py</code></p>"},{"location":"mkdoxyApi/node_8py_source/","title":"File node.py","text":"<p>File List &gt; mkdoxy &gt; node.py</p> <p>Go to the documentation of this file</p> <pre><code>import logging\nimport os\nfrom xml.etree import ElementTree\nfrom xml.etree.ElementTree import Element as Element\n\nfrom mkdoxy.cache import Cache\nfrom mkdoxy.constants import Kind, Visibility, OVERLOAD_OPERATORS\nfrom mkdoxy.markdown import escape\nfrom mkdoxy.property import Property\nfrom mkdoxy.utils import split_safe\nfrom mkdoxy.xml_parser import XmlParser\n\nlog: logging.Logger = logging.getLogger(\"mkdocs\")\n\n\nclass Node:\n    def __init__(self, xml_file: str, xml: Element, cache: Cache, parser: XmlParser, parent: 'Node', refid: str = None, debug: bool = False):\n        self._children: ['Node'] = []\n        self._cache: Cache = cache\n        self._parser: XmlParser = parser\n        self._parent_parent = parent\n        self.debugdebug = debug\n        self.linkPrefixlinkPrefix = \"\"\n\n        if xml_file == 'root':\n            self._refid_refid = 'root'\n            self._kind_kind = Kind.from_str('root')\n            self._name_name = 'root'\n            self._xml_xml = None\n\n        elif xml is None:\n            if self.debugdebug:\n                log.info(f'Loading XML from: {xml_file}')\n            self._dirname_dirname = os.path.dirname(xml_file)\n            self._xml_xml = ElementTree.parse(xml_file).getroot().find('compounddef')\n            if self._xml_xml is None:\n                raise Exception(f'File {xml_file} has no &lt;compounddef&gt;')\n            self._kind_kind = Kind.from_str(self._xml_xml.get('kind'))\n            self._refid_refid = self._xml_xml.get('id')\n            self._language_language = self._xml_xml.get('language')\n            self._name_name = self._xml_xml.find('compoundname').text if self._xml_xml.find('compoundname').text is not None else self._refid_refid\n            self._cache.add(self._refid_refid, self)\n            self._static_static = False\n\n            if self.debugdebug:\n                log.info(f'Parsing: {self._refid}')\n            self._check_for_children_check_for_children()\n\n            title = self._xml_xml.find('title')\n            self._title_title = title.text if title is not None else self._name_name\n        else:\n            self._xml_xml = xml\n            self._kind_kind = Kind.from_str(self._xml_xml.get('kind'))\n            self._language_language = parent.code_language\n            self._refid_refid = refid if refid is not None else self._xml_xml.get('id')\n            self._cache.add(self._refid_refid, self)\n\n            if self.debugdebug:\n                log.info(f'Parsing: {self._refid}')\n            self._check_attrs_check_attrs()\n            self._title_title = self._name_name\n\n        self._details_details = Property.Details(self._xml_xml, parser, self._kind_kind)\n        self._brief_brief = Property.Brief(self._xml_xml, parser, self._kind_kind)\n        self._includes_includes = Property.Includes(self._xml_xml, parser, self._kind_kind)\n        self._type_type = Property.Type(self._xml_xml, parser, self._kind_kind)\n        self._location_location = Property.Location(self._xml_xml, parser, self._kind_kind)\n        self._params_params = Property.Params(self._xml_xml, parser, self._kind_kind)\n        self._templateparams_templateparams = Property.TemplateParams(self._xml_xml, parser, self._kind_kind)\n        self._specifiers_specifiers = Property.Specifiers(self._xml_xml, parser, self._kind_kind)\n        self._values_values = Property.Values(self._xml_xml, parser, self._kind_kind)\n        self._initializer_initializer = Property.Initializer(self._xml_xml, parser, self._kind_kind)\n        self._definition_definition = Property.Definition(self._xml_xml, parser, self._kind_kind)\n        self._programlisting_programlisting = Property.Programlisting(self._xml_xml, parser, self._kind_kind)\n\n    def __repr__(self):\n        return f\"Node: {self.name} refid: {self._refid}\"\n\n    def setLinkPrefix(self, linkPrefix: str):\n        self.linkPrefixlinkPrefix = linkPrefix\n\n    def add_child(self, child: 'Node'):\n        self._children.append(child)\n\n    def sort_children(self):\n        self._children.sort(key=lambda x: x._name, reverse=False)\n\n    def _check_for_children(self):\n        for innergroup in self._xml_xml.findall('innergroup'):\n            refid = innergroup.get('refid')\n            if self._kind_kind in [Kind.GROUP, Kind.DIR, Kind.FILE]:\n                try:\n                    child = self._cache.get(refid)\n                    self.add_childadd_child(child)\n                    continue\n                except Exception:\n                    pass\n            child = Node(\n                os.path.join(self._dirname_dirname, f'{refid}.xml'),\n                None,\n                self._cache,\n                self._parser,\n                self,\n            )\n            child._visibility = Visibility.PUBLIC\n            self.add_childadd_child(child)\n\n        for innerclass in self._xml_xml.findall('innerclass'):\n            refid = innerclass.get('refid')\n            prot = Visibility(innerclass.get('prot'))\n            if prot == Visibility.PRIVATE:\n                continue\n\n            if self._kind_kind in [Kind.GROUP, Kind.DIR, Kind.FILE]:\n                try:\n                    child = self._cache.get(refid)\n                    self.add_childadd_child(child)\n                    continue\n                except Exception:\n                    pass\n\n            try:\n                child = Node(\n                    os.path.join(self._dirname_dirname, f'{refid}.xml'),\n                    None,\n                    self._cache,\n                    self._parser,\n                    self,\n                )\n            except FileNotFoundError as e:\n                child = Node(\n                    os.path.join(self._dirname_dirname, f'{refid}.xml'),\n                    Element('compounddef'),\n                    self._cache,\n                    self._parser,\n                    self,\n                    refid=refid,\n                )\n                child._name = innerclass.text\n            child._visibility = prot\n            self.add_childadd_child(child)\n\n        for innerfile in self._xml_xml.findall('innerfile'):\n            refid = innerfile.get('refid')\n            if self._kind_kind == Kind.DIR:\n                try:\n                    child = self._cache.get(refid)\n                    self.add_childadd_child(child)\n                    continue\n                except Exception:\n                    pass\n\n            child = Node(\n                os.path.join(self._dirname_dirname, f'{refid}.xml'),\n                None,\n                self._cache,\n                self._parser,\n                self,\n            )\n            child._visibility = Visibility.PUBLIC\n            self.add_childadd_child(child)\n\n        for innerdir in self._xml_xml.findall('innerdir'):\n            refid = innerdir.get('refid')\n            if self._kind_kind == Kind.DIR:\n                try:\n                    child = self._cache.get(refid)\n                    self.add_childadd_child(child)\n                    continue\n                except Exception:\n                    pass\n\n            child = Node(\n                os.path.join(self._dirname_dirname, f'{refid}.xml'),\n                None,\n                self._cache,\n                self._parser,\n                self,\n            )\n            child._visibility = Visibility.PUBLIC\n            self.add_childadd_child(child)\n\n        for innernamespace in self._xml_xml.findall('innernamespace'):\n            refid = innernamespace.get('refid')\n\n            if self._kind_kind in [Kind.GROUP, Kind.DIR, Kind.FILE]:\n                try:\n                    child = self._cache.get(refid)\n                    self.add_childadd_child(child)\n                    continue\n                except Exception:\n                    pass\n\n            child = Node(\n                os.path.join(self._dirname_dirname, f'{refid}.xml'),\n                None,\n                self._cache,\n                self._parser,\n                self,\n            )\n            child._visibility = Visibility.PUBLIC\n            self.add_childadd_child(child)\n\n        for sectiondef in self._xml_xml.findall('sectiondef'):\n            for memberdef in sectiondef.findall('memberdef'):\n                kind = Kind.from_str(memberdef.get('kind'))\n                if kind.is_language():\n                    if self._kind_kind in [Kind.GROUP, Kind.DIR, Kind.FILE]:\n                        refid = memberdef.get('id')\n                        try:\n                            child = self._cache.get(refid)\n                            self.add_childadd_child(child)\n                            continue\n                        except Exception:\n                            pass\n                    child = Node(None, memberdef, self._cache, self._parser, self)\n                    self.add_childadd_child(child)\n\n        # for detaileddescription in self._xml.findall('detaileddescription'):\n        #   for para in detaileddescription.findall('para'):\n        #       for programlisting in para.findall('programlisting'):\n        #           pass\n\n\n\n            # # kind = Kind.from_str(memberdef.get('kind'))\n            # #     if kind.is_language():\n            # if self._kind in [Kind.EXAMPLE]:\n            #   log.info(f'programlisting: {para.text}')\n            # if para.find('programlisting') is not None:\n            #   self._programlisting = Property.Programlisting(para, self._parser, self._kind)\n\n    def _check_attrs(self):\n        prot = self._xml_xml.get('prot')\n        self._visibility_visibility = Visibility(prot) if prot is not None else Visibility.PUBLIC\n\n        static = self._xml_xml.get('static')\n        self._static_static = static == 'yes'\n\n        explicit = self._xml_xml.get('explicit')\n        self._explicit_explicit = explicit == 'yes'\n\n        mutable = self._xml_xml.get('mutable')\n        self._mutable_mutable = mutable == 'yes'\n\n        inline = self._xml_xml.get('inline')\n        self._inline_inline = inline == 'yes'\n\n        const = self._xml_xml.get('inline')\n        self._const_const = const == 'yes'\n\n        name = self._xml_xml.find('name')\n        if name is not None and name.text:\n            self._name_name = name.text\n        else:\n            # Doxygen doesn't give anonymous unions any name\n            qualifiedname = self._xml_xml.find('qualifiedname')\n            if qualifiedname is not None and qualifiedname.text:\n                self._name_name = qualifiedname.text\n            else:\n                self._name_name = self._refid_refid\n\n        virt = self._xml_xml.get('virt')\n        if virt:\n            self._virtual_virtual = virt in ['virtual', 'pure-virtual']\n            self._pure_pure = virt == 'pure-virtual'\n        else:\n            self._virtual_virtual = False\n            self._pure_pure = False\n\n    def has(self, visibility: str, kinds: [str], static: bool) -&gt; bool:\n        return len(self.queryquery(visibility, kinds, static)) &gt; 0\n\n    def query(self, visibility: str, kinds: [str], static: bool) -&gt; ['Node']:\n        visibility = Visibility(visibility)\n        kinds = list(map(lambda kind: Kind.from_str(kind), kinds))\n        return [\n            child for child in self._children if child._visibility == visibility\n            and child._kind in kinds and child._static == static\n        ]\n\n    @property\n    def is_static(self) -&gt; bool:\n        return self._static_static\n\n    @property\n    def is_explicit(self) -&gt; bool:\n        return self._explicit_explicit\n\n    @property\n    def is_const(self) -&gt; bool:\n        return self._const_const\n\n    @property\n    def is_inline(self) -&gt; bool:\n        return self._inline_inline\n\n    @property\n    def is_mutable(self) -&gt; bool:\n        return self._mutable_mutable\n\n    @property\n    def is_virtual(self) -&gt; bool:\n        return self._virtual_virtual\n\n    @property\n    def is_pure(self) -&gt; bool:\n        return self._pure_pure\n\n    @property\n    def has_children(self) -&gt; bool:\n        return len(self._children) &gt; 0\n\n    @property\n    def children(self) -&gt; ['Node']:\n        return self._children\n\n    @property\n    def parent(self) -&gt; 'Node':\n        return self._parent_parent\n\n    @property\n    def is_function(self) -&gt; bool:\n        return self._kind_kind.is_function()\n\n    @property\n    def is_variable(self) -&gt; bool:\n        return self._kind_kind.is_variable()\n\n    @property\n    def is_namespace(self) -&gt; bool:\n        return self._kind_kind.is_namespace()\n\n    @property\n    def is_class(self) -&gt; bool:\n        return self._kind_kind.is_class()\n\n    @property\n    def is_struct(self) -&gt; bool:\n        return self._kind_kind.is_struct()\n\n    @property\n    def is_enum(self) -&gt; bool:\n        return self._kind_kind.is_enum()\n\n    @property\n    def is_class_or_struct(self) -&gt; bool:\n        return self._kind_kind.is_class_or_struct()\n\n    @property\n    def is_interface(self) -&gt; bool:\n        return self._kind_kind.is_interface()\n\n    @property\n    def is_typedef(self) -&gt; bool:\n        return self._kind_kind.is_typedef()\n\n    @property\n    def is_define(self) -&gt; bool:\n        return self._kind_kind.is_define()\n\n    @property\n    def is_union(self) -&gt; bool:\n        return self._kind_kind.is_union()\n\n    @property\n    def is_group(self) -&gt; bool:\n        return self._kind_kind.is_group()\n\n    @property\n    def is_language(self) -&gt; bool:\n        return self._kind_kind.is_language()\n\n    @property\n    def is_root(self) -&gt; bool:\n        return self._kind_kind.is_root()\n\n    @property\n    def is_parent(self) -&gt; bool:\n        return self._kind_kind.is_parent()\n\n    @property\n    def is_friend(self) -&gt; bool:\n        return self._kind_kind.is_friend()\n\n    @property\n    def is_file(self) -&gt; bool:\n        return self._kind_kind.is_file()\n\n    @property\n    def is_dir(self) -&gt; bool:\n        return self._kind_kind.is_dir()\n\n    @property\n    def is_page(self) -&gt; bool:\n        return self._kind_kind.is_page()\n\n    @property\n    def is_example(self) -&gt; bool:\n        return self._kind_kind.is_example()\n\n    @property\n    def name(self) -&gt; str:\n        return self._name_name\n\n    @property\n    def name_params(self) -&gt; str:\n        name = self._name_name\n        type = self._type_type.plain()\n        params = self._specifiers_specifiers.plain()\n        return f\"{type} {name}{params}\" if params else self.name_longname_long\n\n    @property\n    def title(self) -&gt; str:\n        return self._title_title\n\n    @property\n    def refid(self) -&gt; str:\n        return self._refid_refid\n\n    @property\n    def kind(self) -&gt; str:\n        return self._kind_kind\n\n    @property\n    def is_operator(self) -&gt; bool:\n        return self._name_name in OVERLOAD_OPERATORS\n\n    @property\n    def operators_total(self) -&gt; int:\n        return sum(child.name in OVERLOAD_OPERATORS for child in self.childrenchildren)\n\n    @property\n    def operator_num(self) -&gt; int:\n        total = 0\n        for child in self.parentparent.children:\n            if child.is_function and child.name.replace(' ', '') in OVERLOAD_OPERATORS:\n                total += 1\n            if child.refid == self._refid_refid:\n                break\n        return total\n\n    @property\n    def name_url_safe(self) -&gt; str:\n        name = self.name_tokensname_tokens[-1]\n        return name.replace(' ', '-').replace('=', '').replace('~', '').lower()\n\n    @property\n    def anchor(self) -&gt; str:\n        name = ''\n        if self._name_name.replace(' ', '') in OVERLOAD_OPERATORS:\n            num = self.operator_numoperator_num\n            name = f'operator_{str(self.operator_num - 1)}' if num &gt; 1 else 'operator'\n        elif self.is_overloadedis_overloaded:\n            name = f'{self.name_url_safe}-{str(self.overload_num)}{str(self.overload_total)}'\n        else:\n            name = self.name_url_safename_url_safe\n\n        if name.startswith('-'):\n            name = name[1:]\n        return f'{self._kind.value}-{name}'\n\n    @property\n    def url(self) -&gt; str:\n        if self.is_parentis_parent or self.is_groupis_group or self.is_fileis_file or self.is_diris_dir or self.is_pageis_page:\n            return self.linkPrefixlinkPrefix + self._refid_refid + '.md'\n        else:\n            return f'{self._parent.url}#{self.anchor}'\n\n    @property\n    def base_url(self) -&gt; str:\n        def prefix(page: str):\n            return self.linkPrefixlinkPrefix + page\n\n        if self.is_groupis_group:\n            return prefix(\"modules.md\")\n        elif self.is_fileis_file or self.is_diris_dir:\n            return prefix(\"files.md\")\n        elif self.is_namespaceis_namespace:\n            return prefix(\"namespaces.md\")\n        else:\n            return prefix(\"annotated.md\")\n\n    @property\n    def base_name(self) -&gt; str:\n        if self.is_groupis_group:\n            return \"Modules\"\n        elif self.is_fileis_file or self.is_diris_dir:\n            return \"FileList\"\n        elif self.is_namespaceis_namespace:\n            return \"Namespace List\"\n        else:\n            return \"ClassList\"\n\n    @property\n    def url_source(self) -&gt; str:\n        if self.is_parentis_parent or self.is_groupis_group or self.is_fileis_file or self.is_diris_dir:\n            return self.linkPrefixlinkPrefix + self._refid_refid + '_source.md'\n        else:\n            return self.linkPrefixlinkPrefix + self._refid_refid + '.md'\n\n    @property\n    def filename(self) -&gt; str:\n        return self.linkPrefixlinkPrefix + self._refid_refid + '.md'\n\n    @property\n    def root(self) -&gt; 'Node':\n        return self if self._kind_kind == Kind.ROOT else self._parent_parent.root\n\n    @property\n    def name_tokens(self) -&gt; [str]:\n        if self.is_diris_dir or self.is_fileis_file:\n            return self._name_name.split('/')\n        return split_safe(self._name_name, '::')\n\n    @property\n    def name_short(self) -&gt; str:\n        return escape(self.name_tokensname_tokens[-1])\n\n    @property\n    def name_long(self) -&gt; str:\n        try:\n            if self._parent_parent.is_parent:\n                return f'{self._parent.name_long}::{escape(self.name_tokens[-1])}'\n            else:\n                return escape(self._name_name)\n        except Exception as e:\n            print(e)\n            raise e\n\n    @property\n    def name_full_unescaped(self) -&gt; str:\n        if self._parent_parent is not None and not self._parent_parent.is_root and self._parent_parent.is_parent:\n            return f'{self._parent.name_full_unescaped}::{self.name_tokens[-1]}'\n        else:\n            return self.name_tokensname_tokens[-1]\n\n    @property\n    def overload_total(self) -&gt; int:\n        if self._parent_parent is not None and self._parent_parent.is_class_or_struct:\n            return sum(neighbour.name == self.namename for neighbour in self._parent_parent.children)\n        return 0\n\n    @property\n    def overload_num(self) -&gt; int:\n        if self._parent_parent is not None and self._parent_parent.is_class_or_struct:\n            count = 0\n            for neighbour in self._parent_parent.children:\n                if neighbour.name == self.namename:\n                    count += 1\n                if neighbour.refid == self.refidrefid:\n                    break\n            return count\n        return 0\n\n    @property\n    def is_overloaded(self) -&gt; bool:\n        return self.overload_totaloverload_total &gt; 1\n\n    @property\n    def overload_suffix(self) -&gt; str:\n        if self.is_operatoris_operator:\n            return ''\n\n        total = self.overload_totaloverload_total\n        return f'[{str(self.overload_num)}/{str(total)}]' if total &gt; 1 else ''\n\n    @property\n    def parents(self) -&gt; ['Node']:\n        ret = []\n        if self._parent_parent is not None and (self._parent_parent.is_language\n                                         or self._parent_parent.is_dir):\n            ret.extend(self.parentparent.parents)\n        ret.append(self)\n        return ret\n\n    @property\n    def suffix(self) -&gt; str:\n        if self.is_parentis_parent:\n            if self._templateparams_templateparams.has():\n                return '&amp;lt;' + ', '.join(self._templateparams_templateparams.array(notype=True)) + '&amp;gt;'\n            else:\n                return ''\n        elif self.is_functionis_function:\n            return self._specifiers_specifiers.md()\n        elif self.is_variableis_variable:\n            return f' = {self._initializer.md()}' if self._initializer_initializer.has() else ''\n        elif self.is_defineis_define:\n            test = self._initializer_initializer.md()\n            return '' if '\\n' in test else test\n        else:\n            return ''\n\n    @property\n    def prefix(self) -&gt; str:\n        if self.is_functionis_function:\n            ret = []\n            if self.is_virtualis_virtual:\n                ret.append('virtual')\n            return ' '.join(ret)\n        elif self.kindkind is Kind.VARIABLE:\n            return ''\n        else:\n            return self.kindkind.value\n\n    @property\n    def code_language(self) -&gt; str:\n        return self._language_language\n\n    @property\n    def codeblock(self) -&gt; str:\n        code = []\n        if self.is_functionis_function or self.is_friendis_friend:\n            if self._templateparams_templateparams.has():\n                code.append(f'template&lt;{self._templateparams.plain()}&gt;')\n\n            typ = self._type_type.plain()\n            if typ:\n                typ += ' '\n            if self.is_virtualis_virtual:\n                typ = f'virtual {typ}'\n            if self.is_explicitis_explicit:\n                typ = f'explicit {typ}'\n            if self.is_inlineis_inline:\n                typ = f'inline {typ}'\n            if self.is_staticis_static:\n                typ = f'static {typ}'\n\n            if self._params_params.has():\n                code.append(typ + self.name_full_unescapedname_full_unescaped + ' (')\n                params = self._params_params.array(plain=True)\n                for i, param in enumerate(params):\n                    if i + 1 &gt;= len(params):\n                        code.append(f'    {param}')\n                    else:\n                        code.append(f'    {param},')\n                code.append(f') {self._specifiers.parsed()}')\n            else:\n                code.append(typ + self.name_full_unescapedname_full_unescaped + ' () ' + self._specifiers_specifiers.parsed())\n\n        elif self.is_enumis_enum:\n            if self._values_values.has():\n                code.append(f'enum {self.name_full_unescaped}' + ' {')\n\n                values = []\n                for enumvalue in self._xml_xml.findall('enumvalue'):\n                    p = enumvalue.find('name').text\n                    initializer = enumvalue.find('initializer')\n                    if initializer is not None:\n                        p += f' {self._parser.paras_as_str(initializer, plain=True)}'\n                    values.append(p)\n\n                for i, value in enumerate(values):\n                    if i + 1 &gt;= len(values):\n                        code.append(f'    {value}')\n                    else:\n                        code.append(f'    {value},')\n                code.append('};')\n            else:\n                code.append(f'enum {self.name_full_unescaped};')\n\n        elif self.is_defineis_define:\n            if self._params_params.has():\n                code.append(f'#define {self.name_full_unescaped} (')\n                params = self._params_params.array(plain=True)\n                for i, param in enumerate(params):\n                    if i + 1 &gt;= len(params):\n                        code.append(f'    {param}')\n                    else:\n                        code.append(f'    {param},')\n                code.append(f') {self._initializer.plain()}')\n            else:\n                code.append(f'#define {self.name_full_unescaped} {self._initializer.plain()}')\n\n        else:\n            code.append(self._definition_definition.plain())\n        return '\\n'.join(code)\n\n    @property\n    def has_base_classes(self) -&gt; bool:\n        return len(self._xml_xml.findall('basecompoundref')) &gt; 0\n\n    @property\n    def has_derived_classes(self) -&gt; bool:\n        return len(self._xml_xml.findall('derivedcompoundref')) &gt; 0\n\n    @property\n    def base_classes(self) -&gt; ['Node']:\n        ret = []\n        for basecompoundref in self._xml_xml.findall('basecompoundref'):\n            refid = basecompoundref.get('refid')\n            if refid is None:\n                ret.append(basecompoundref.text)\n            else:\n                ret.append(self._cache.get(refid))\n        return ret\n\n    @property\n    def derived_classes(self) -&gt; ['Node']:\n        ret = []\n        for derivedcompoundref in self._xml_xml.findall('derivedcompoundref'):\n            refid = derivedcompoundref.get('refid')\n            if refid is None:\n                ret.append(derivedcompoundref.text)\n            else:\n                ret.append(self._cache.get(refid))\n        return ret\n\n    @property\n    def has_details(self) -&gt; bool:\n        return self._details_details.has()\n\n    @property\n    def details(self) -&gt; str:\n        return self._details_details.md()\n\n    @property\n    def has_brief(self) -&gt; bool:\n        return self._brief_brief.has()\n\n    @property\n    def brief(self) -&gt; str:\n        return self._brief_brief.md()\n\n    @property\n    def has_includes(self) -&gt; bool:\n        return self._includes_includes.has()\n\n    @property\n    def includes(self) -&gt; str:\n        return self._includes_includes.plain()\n\n    @property\n    def has_type(self) -&gt; bool:\n        return self._type_type.has()\n\n    @property\n    def type(self) -&gt; str:\n        return self._type_type.md()\n\n    @property\n    def has_location(self) -&gt; bool:\n        return self._location_location.has()\n\n    @property\n    def location(self) -&gt; str:\n        return self._location_location.plain()\n\n    @property\n    def location_bodystart(self) -&gt; int:\n        return self._location_location.bodystart()\n\n    @property\n    def location_bodyend(self) -&gt; int:\n        return self._location_location.bodyend()\n\n    @property\n    def has_params(self) -&gt; bool:\n        return self._params_params.has()\n\n    @property\n    def params(self) -&gt; str:\n        if self._params_params.has():\n            return f'({self._params.md()})'\n        elif self.is_functionis_function:\n            return '()'\n        else:\n            return ''\n\n    @property\n    def has_templateparams(self) -&gt; bool:\n        return self._templateparams_templateparams.has()\n\n    @property\n    def templateparams(self) -&gt; str:\n        return self._templateparams_templateparams.md()\n\n    @property\n    def has_specifiers(self) -&gt; bool:\n        return self._specifiers_specifiers.has()\n\n    @property\n    def specifiders(self) -&gt; str:\n        return self._specifiers_specifiers.parsed()\n\n    @property\n    def has_values(self) -&gt; bool:\n        return self._values_values.has()\n\n    @property\n    def values(self) -&gt; str:\n        return self._values_values.md()\n\n    @property\n    def has_initializer(self) -&gt; bool:\n        return self._initializer_initializer.has()\n\n    @property\n    def initializer(self) -&gt; str:\n        return self._initializer_initializer.md()\n\n    @property\n    def has_definition(self) -&gt; bool:\n        return self._definition_definition.has()\n\n    @property\n    def definition(self) -&gt; str:\n        return self._definition_definition.plain()\n\n    @property\n    def has_programlisting(self) -&gt; bool:\n        return self._programlisting_programlisting.has()\n\n    @property\n    def programlisting(self) -&gt; str:\n        return self._programlisting_programlisting.md()\n\n    @property\n    def is_resolved(self) -&gt; bool:\n        return True\n\n    @property\n    def reimplements(self) -&gt; 'Node':\n        reimp = self._xml_xml.find('reimplements')\n        return self._cache.get(reimp.get('refid')) if reimp is not None else None\n\n    @property\n    def print_node_recursive(self) -&gt; str:\n        # code_block = f'```md\\n{self._print_node_recursive_md(self._xml, 0)}```'\n        # return code_block\n        return self._print_node_recursive_md_print_node_recursive_md(self._xml_xml, 0)\n\n    def _print_node_recursive_md(self, node: Element, depth: int) -&gt; str:\n        # print as Markdown code block\n        indent = \"  \" * depth\n        ret = f'{indent} * {node.tag} {node.attrib} -&gt; Text: {node.text}\\n'\n        for child in node.findall('*'):\n            ret += self._print_node_recursive_md_print_node_recursive_md(child, depth + 1)\n\n        return ret\n\n\nclass DummyNode:\n    def __init__(self, name_long: str, derived_classes: [Node], kind: Kind):\n        self.name_longname_long = name_long\n        self.derived_classesderived_classes = derived_classes\n        self.kindkind = kind\n\n    @property\n    def is_resolved(self) -&gt; bool:\n        return False\n</code></pre>"},{"location":"mkdoxyApi/plugin_8py/","title":"File plugin.py","text":"<p>FileList &gt; mkdoxy &gt; plugin.py</p> <p>Go to the source code of this file</p>"},{"location":"mkdoxyApi/plugin_8py/#namespaces","title":"Namespaces","text":"Type Name namespace plugin"},{"location":"mkdoxyApi/plugin_8py/#classes","title":"Classes","text":"Type Name class MkDoxy MkDocs plugin for generating documentation from Doxygen XML files. <p>The documentation for this class was generated from the following file <code>mkdoxy/plugin.py</code></p>"},{"location":"mkdoxyApi/plugin_8py_source/","title":"File plugin.py","text":"<p>File List &gt; mkdoxy &gt; plugin.py</p> <p>Go to the documentation of this file</p> <pre><code>\"\"\"@package mkdoxy.plugin\nMkDoxy \u2192 MkDocs + Doxygen = easy documentation generator with code snippets\n\nMkDoxy is a MkDocs plugin for generating documentation from Doxygen XML files.\n\"\"\"\n\nimport logging\nfrom pathlib import Path, PurePath\n\nfrom mkdocs import exceptions\nfrom mkdocs.config import base, config_options, Config\nfrom mkdocs.plugins import BasePlugin\nfrom mkdocs.structure import files, pages\n\nfrom mkdoxy.cache import Cache\nfrom mkdoxy.doxygen import Doxygen\nfrom mkdoxy.doxyrun import DoxygenRun\nfrom mkdoxy.generatorAuto import GeneratorAuto\nfrom mkdoxy.generatorBase import GeneratorBase\nfrom mkdoxy.generatorSnippets import GeneratorSnippets\nfrom mkdoxy.utils import check_enabled_markdown_extensions\nfrom mkdoxy.xml_parser import XmlParser\n\nlog: logging.Logger = logging.getLogger(\"mkdocs\")\npluginName: str = \"MkDoxy\"\n\n\nclass MkDoxy(BasePlugin):\n\"\"\"! MkDocs plugin for generating documentation from Doxygen XML files.\n    \"\"\"\n\n    # Config options for the plugin\n    config_scheme = (\n        ('projects', config_options.Type(dict, default={})),\n        ('full-doc', config_options.Type(bool, default=True)),\n        ('debug', config_options.Type(bool, default=False)),\n        ('ignore-errors', config_options.Type(bool, default=False)),\n        ('save-api', config_options.Type(str, default=\"\")),\n        (\"enabled\", config_options.Type(bool, default=True)),\n        (\"doxygen-bin-path\", config_options.Type(str, default=\"doxygen\", required=False)),\n    )\n\n    # Config options for each project\n    config_project = (\n        ('src-dirs', config_options.Type(str)),\n        ('full-doc', config_options.Type(bool, default=True)),\n        ('debug', config_options.Type(bool, default=False)),\n        # ('ignore-errors', config_options.Type(bool, default=False)),\n        ('doxy-cfg', config_options.Type(dict, default={}, required=False)),\n        ('template-dir', config_options.Type(str, default=\"\", required=False)),\n    )\n\n    def is_enabled(self) -&gt; bool:\n\"\"\"! Checks if the plugin is enabled\n        @details\n        @return: (bool) True if the plugin is enabled.\n        \"\"\"\n        return self.config.get(\"enabled\")\n\n    def on_files(self, files: files.Files, config: base.Config) -&gt; files.Files:\n\"\"\"! Called after files have been gathered by MkDocs.\n        @details\n\n        @param files: (Files) The files gathered by MkDocs.\n        @param config: (Config) The global configuration object.\n        @return: (Files) The files gathered by MkDocs.\n        \"\"\"\n        if not self.is_enabledis_enabled():\n            return files\n        def checkConfig(config_project, proData, strict: bool):\n            cfg = Config(config_project, '')\n            cfg.load_dict(proData)\n            errors, warnings = cfg.validate()\n            for config_name, warning in warnings:\n                log.warning(f\"  -&gt; Config value: '{config_name}' in project '{project_name}'. Warning: {warning}\")\n            for config_name, error in errors:\n                log.error(f\"  -&gt; Config value: '{config_name}' in project '{project_name}'. Error: {error}\")\n\n            if len(errors) &gt; 0:\n                raise exceptions.Abort(f\"Aborted with {len(errors)} Configuration Errors!\")\n            elif strict and len(warnings) &gt; 0:\n                raise exceptions.Abort(f\"Aborted with {len(warnings)} Configuration Warnings in 'strict' mode!\")\n\n        def tempDir(siteDir: str, tempDir:str, projectName: str) -&gt;str:\n            tempDoxyDir = PurePath.joinpath(Path(siteDir), Path(tempDir), Path(projectName))\n            tempDoxyDir.mkdir(parents=True, exist_ok=True)\n            return str(tempDoxyDir)\n\n        self.doxygendoxygen = {}\n        self.generatorBasegeneratorBase = {}\n        self.projects_config:dict[str, dict[str, any]] = self.config[\"projects\"]\n        self.debugdebug = self.config.get('debug', False)\n\n        # generate automatic documentation and append files in the list of files to be processed by mkdocs\n        self.defaultTemplateConfig: dict = {\n            \"indent_level\": 0,\n        }\n\n        log.info(f\"Start plugin {pluginName}\")\n\n\n        for project_name, project_data in self.projects_config.items():\n            log.info(f\"-&gt; Start project '{project_name}'\")\n\n            # Check project config -&gt; raise exceptions\n            checkConfig(self.config_projectconfig_project, project_data, config['strict'])\n\n            if self.config.get(\"save-api\"):\n                tempDirApi = tempDir(\"\", self.config.get(\"save-api\"), project_name)\n            else:\n                tempDirApi = tempDir(config['site_dir'], \"assets/.doxy/\", project_name)\n\n            # Check src changes -&gt; run Doxygen\n            doxygenRun = DoxygenRun(self.config['doxygen-bin-path'], project_data.get('src-dirs'), tempDirApi, project_data.get('doxy-cfg', {}))\n            if doxygenRun.checkAndRun():\n                log.info(\"  -&gt; generating Doxygen files\")\n            else:\n                log.info(\"  -&gt; skip generating Doxygen files (nothing changes)\")\n\n            # Parse XML to basic structure\n            cache = Cache()\n            parser = XmlParser(cache=cache, debug=self.debugdebug)\n\n            # Parse basic structure to recursive Nodes\n            self.doxygendoxygen[project_name] = Doxygen(doxygenRun.getOutputFolder(), parser=parser, cache=cache)\n\n            # Print parsed files\n            if self.debugdebug:\n                self.doxygendoxygen[project_name].printStructure()\n\n            # Prepare generator for future use (GeneratorAuto, SnippetGenerator)\n            self.generatorBasegeneratorBase[project_name] = GeneratorBase(project_data.get('template-dir',\"\"), ignore_errors=self.config[\"ignore-errors\"], debug=self.debugdebug)\n\n            if self.config[\"full-doc\"] and project_data.get(\"full-doc\", True):\n                generatorAuto = GeneratorAuto(\n                    generatorBase=self.generatorBasegeneratorBase[project_name],\n                    tempDoxyDir=tempDirApi,\n                    siteDir=config['site_dir'],\n                    apiPath=project_name,\n                    doxygen=self.doxygendoxygen[project_name],\n                    useDirectoryUrls=config['use_directory_urls'],\n                )\n\n                project_config = self.defaultTemplateConfig.copy()\n                project_config.update(project_data)\n                generatorAuto.fullDoc(project_config)\n\n                generatorAuto.summary(project_config)\n\n                for file in generatorAuto.fullDocFiles:\n                    files.append(file)\n        return files\n\n    def on_page_markdown(\n            self,\n            markdown: str,\n            page: pages.Page,\n            config: base.Config,\n            files: files.Files,\n    ) -&gt; str:\n\"\"\"! Generate snippets and append them to the markdown.\n        @details\n\n        @param markdown (str): The markdown.\n        @param page (Page): The MkDocs page.\n        @param config (Config): The MkDocs config.\n        @param files (Files): The MkDocs files.\n        @return: (str) The markdown.\n        \"\"\"\n        if not self.is_enabledis_enabled():\n            return markdown\n\n        # update default template config with page meta\n        page_config = self.defaultTemplateConfig.copy()\n        page_config.update(page.meta)\n\n        generatorSnippets = GeneratorSnippets(\n            markdown=markdown,\n            generatorBase=self.generatorBasegeneratorBase,\n            doxygen=self.doxygendoxygen,\n            projects=self.projects_config,\n            useDirectoryUrls=config['use_directory_urls'],\n            page = page,\n            config = page_config,\n            debug=self.debugdebug\n        )\n\n        return generatorSnippets.generate()\n\n# def on_serve(self, server):\n#     return server\n#\n# def on_files(self, files: files.Files, config):\n#     return files\n\n# def on_nav(self, nav, config, files):\n#     return nav\n#\n# def on_env(self, env, config, files):\n#     return env\n#\n# def on_config(self, config):\n#     return config\n#\n# def on_pre_build(self, config: base.Config):\n#     return\n# def on_post_build(self, config):\n#     return\n#\n# def on_pre_template(self, template, template_name, config):\n#     return template\n#\n# def on_template_context(self, context, template_name, config):\n#     return context\n#\n# def on_post_template(self, output_content, template_name, config):\n#     return output_content\n#\n# def on_pre_page(self, page: pages.Page, config, files: files.Files):\n#     return page\n#\n# def on_page_read_source(self, page: pages.Page, config):\n#     return\n#\n# def on_page_markdown(self, markdown, page, config, files):\n#     return markdown\n#\n# def on_page_content(self, html, page, config, files):\n#     return html\n#\n# def on_page_context(self, context, page, config, nav):\n#     return context\n#\n# def on_post_page(self, output_content, page, config):\n#     return output_content\n</code></pre>"},{"location":"mkdoxyApi/property_8py/","title":"File property.py","text":"<p>FileList &gt; mkdoxy &gt; property.py</p> <p>Go to the source code of this file</p>"},{"location":"mkdoxyApi/property_8py/#namespaces","title":"Namespaces","text":"Type Name namespace property"},{"location":"mkdoxyApi/property_8py/#classes","title":"Classes","text":"Type Name class Property class Brief class CodeBlock class Definition class Details class Includes class Initializer class Location class Params class Programlisting class Specifiers class TemplateParams class Type class Values <p>The documentation for this class was generated from the following file <code>mkdoxy/property.py</code></p>"},{"location":"mkdoxyApi/property_8py_source/","title":"File property.py","text":"<p>File List &gt; mkdoxy &gt; property.py</p> <p>Go to the documentation of this file</p> <pre><code>import re\nfrom xml.etree.ElementTree import Element as Element\n\nfrom mkdoxy.constants import Kind\nfrom mkdoxy.markdown import escape\nfrom mkdoxy.xml_parser import XmlParser\n\n\nclass Property:\n    class Details:\n        def __init__(self, xml: Element, parser: XmlParser, kind: Kind):\n            self.xmlxml = xml\n            self.parserparser = parser\n            self.kindkind = kind\n\n        def md(self, plain: bool = False) -&gt; str:\n            detaileddescription = self.xmlxml.find('detaileddescription')\n            if list(detaileddescription):\n                return self.parserparser.paras_as_str(detaileddescription, plain=plain)\n            else:\n                return ''\n\n        def plain(self) -&gt; str:\n            return self.mdmd(plain=True)\n\n        def has(self) -&gt; bool:\n            detaileddescription = self.xmlxml.find('detaileddescription')\n            return len(list(detaileddescription)) &gt; 0\n\n    class Brief:\n        def __init__(self, xml: Element, parser: XmlParser, kind: Kind):\n            self.xmlxml = xml\n            self.parserparser = parser\n            self.kindkind = kind\n\n        def md(self, plain: bool = False) -&gt; str:\n            briefdescription = self.xmlxml.find('briefdescription')\n            if not briefdescription:\n                return ''\n\n            paras = briefdescription.findall('para')\n            if len(paras) &gt; 0:\n                text = [\n                    self.parserparser.paras_as_str(para, italic=True, plain=plain)\n                    for para in paras\n                ]\n                return ' '.join(text)\n            else:\n                return ''\n\n        def plain(self) -&gt; str:\n            return self.mdmd(plain=True)\n\n        def has(self) -&gt; bool:\n            detaileddescription = self.xmlxml.find('detaileddescription')\n            return len(list(detaileddescription)) &gt; 0\n\n    class Includes:\n        def __init__(self, xml: Element, parser: XmlParser, kind: Kind):\n            self.xmlxml = xml\n            self.parserparser = parser\n            self.kindkind = kind\n\n        def md(self, plain: bool = False) -&gt; [str]:\n            return self.arrayarray(plain=False)\n\n        def plain(self) -&gt; [str]:\n            return self.arrayarray(plain=True)\n\n        def array(self, plain: bool = False) -&gt; [str]:\n            ret = []\n            for includes in self.xmlxml.findall('includes'):\n                incl = includes.text if plain else self.parserparser.reference_as_str(includes)\n                if includes.get('local') == 'yes':\n                    ret.append(f'\"{incl}\"')\n                elif plain:\n                    ret.append(f'&lt;{incl}&gt;')\n                else:\n                    ret.append(f'&amp;lt;{incl}&amp;gt;')\n            return ret\n\n        def has(self) -&gt; bool:\n            return len(self.xmlxml.findall('includes')) &gt; 0\n\n    class Type:\n        def __init__(self, xml: Element, parser: XmlParser, kind: Kind):\n            self.xmlxml = xml\n            self.parserparser = parser\n            self.kindkind = kind\n\n        def md(self, plain: bool = False) -&gt; str:\n            para = self.xmlxml.find('type')\n            return self.parserparser.paras_as_str(para, plain=plain) if para is not None else ''\n\n        def plain(self) -&gt; str:\n            return self.mdmd(plain=True)\n\n        def has(self) -&gt; bool:\n            return self.xmlxml.find('type') is not None\n\n    class Location:\n        def __init__(self, xml: Element, parser: XmlParser, kind: Kind):\n            self.xmlxml = xml\n            self.parserparser = parser\n            self.kindkind = kind\n\n        def md(self, plain: bool = False) -&gt; str:\n            return self.plainplain()\n\n        def plain(self) -&gt; str:\n            loc = self.xmlxml.find('location')\n            return loc.get('file') if loc is not None else ''\n\n        def line(self) -&gt; int:\n            loc = self.xmlxml.find('location')\n            return int(loc.get('line')) if loc is not None else 0\n\n        def column(self) -&gt; int:\n            loc = self.xmlxml.find('location')\n            return int(loc.get('column')) if loc is not None else 0\n\n        def bodystart(self) -&gt; int:\n            loc = self.xmlxml.find('location')\n            return int(loc.get('bodystart')) if loc is not None else 0\n\n        def bodyend(self) -&gt; int:\n            loc = self.xmlxml.find('location')\n            return int(loc.get('bodyend')) if loc is not None else 0\n\n        def has(self) -&gt; bool:\n            return self.xmlxml.find('location') is not None\n\n\n    class Params:\n        def __init__(self, xml: Element, parser: XmlParser, kind: Kind):\n            self.xmlxml = xml\n            self.parserparser = parser\n            self.kindkind = kind\n\n        def md(self, plain: bool = False) -&gt; str:\n            return ', '.join(self.arrayarray(plain=plain))\n\n        def plain(self) -&gt; str:\n            return ', '.join(self.arrayarray(plain=True))\n\n        def array(self, plain: bool = False) -&gt; [str]:\n            ret = []\n            for param in self.xmlxml.findall('param'):\n                p = ''\n                type = param.find('type')\n                p = self.parserparser.paras_as_str(type, plain=plain)\n\n                declname = param.find('declname')\n                if declname is not None:\n                    p += f' {self.parser.paras_as_str(declname, plain=plain)}'\n                else:\n                    defname = param.find('defname')\n                    if defname is not None:\n                        p += f' {self.parser.paras_as_str(defname, plain=plain)}'\n\n                defval = param.find('defval')\n                if defval is not None:\n                    p += f'={self.parser.paras_as_str(defval, plain=plain)}'\n\n                ret.append(p.strip())\n            return ret\n\n        def has(self) -&gt; bool:\n            return len(self.xmlxml.findall('param')) &gt; 0\n\n    class TemplateParams:\n        def __init__(self, xml: Element, parser: XmlParser, kind: Kind):\n            self.xmlxml = xml\n            self.parserparser = parser\n            self.kindkind = kind\n\n        def md(self, plain: bool = False) -&gt; str:\n            return ', '.join(self.arrayarray(plain=plain))\n\n        def plain(self) -&gt; str:\n            return ', '.join(self.arrayarray(plain=True))\n\n        def array(self, plain: bool = False, notype: bool = False) -&gt; [str]:\n            ret = []\n            templateparamlist = self.xmlxml.find('templateparamlist')\n            if templateparamlist is not None:\n                for param in templateparamlist.findall('param'):\n                    if notype:\n                        declname = param.find('declname')\n                        if declname is None:\n                            declname = param.find('type')\n                        ret.append(self.parserparser.paras_as_str(declname, plain=plain))\n                    else:\n                        type = param.find('type')\n                        declname = param.find('declname')\n                        if declname is None:\n                            declname = param.find('type')\n                        ret.append(\n                            f'{self.parser.paras_as_str(type, plain=plain)} {self.parser.paras_as_str(declname, plain=plain)}'\n                        )\n            return ret\n\n        def has(self) -&gt; bool:\n            return self.xmlxml.find('templateparamlist') is not None\n\n    class CodeBlock:\n        def __init__(self, xml: Element, parser: XmlParser, kind: Kind):\n            self.xmlxml = xml\n            self.parserparser = parser\n            self.kindkind = kind\n\n        def md(self, plain: bool = False) -&gt; str:\n            return self.plainplain()\n\n        def plain(self) -&gt; str:\n            return ''\n\n        def has(self) -&gt; bool:\n            return True\n\n    class Specifiers:\n        def __init__(self, xml: Element, parser: XmlParser, kind: Kind):\n            self.xmlxml = xml\n            self.parserparser = parser\n            self.kindkind = kind\n\n        def md(self, plain: bool = False) -&gt; str:\n            return self.parsedparsed()\n\n        def plain(self) -&gt; str:\n            argss = self.xmlxml.find('argsstring')\n            return '' if argss is None or argss.text is None else argss.text\n\n        def parsed(self) -&gt; str:\n            argss = self.xmlxml.find('argsstring')\n            if argss is None or argss.text is None:\n                return ''\n\n            argsstring = argss.text\n            ret = []\n\n            # Is deleted?\n            if re.search('\\\\)\\\\s*=\\\\s*delete', argsstring):\n                ret.append('= delete')\n\n            # Is default?\n            if re.search('\\\\)\\\\s*=\\\\s*default', argsstring):\n                ret.append('= default')\n\n            # Is noexcept\n            if re.search('\\\\).*noexcept', argsstring):\n                ret.append('noexcept')\n\n            # Is override\n            if re.search('\\\\).*override', argsstring):\n                ret.append('override')\n\n            # Is const?\n            if self.xmlxml.get('const') == 'yes':\n                ret.append('const')\n\n            # Is pure?\n            virt = self.xmlxml.get('virt')\n            if virt == 'pure-virtual':\n                ret.append('= 0')\n\n            return ' '.join(ret)\n\n        def has(self) -&gt; bool:\n            return self.xmlxml.find('argsstring') is not None\n\n    class Values:\n        def __init__(self, xml: Element, parser: XmlParser, kind: Kind):\n            self.xmlxml = xml\n            self.parserparser = parser\n            self.kindkind = kind\n\n        def md(self, plain: bool = False) -&gt; str:\n            return ', '.join(self.arrayarray(plain=plain))\n\n        def plain(self) -&gt; str:\n            return ', '.join(self.arrayarray(plain=False))\n\n        def array(self, plain: bool = False) -&gt; [str]:\n            ret = []\n            if self.kindkind.is_enum():\n                for enumvalue in self.xmlxml.findall('enumvalue'):\n                    p = '**' + escape(enumvalue.find('name').text) + '**'\n                    initializer = enumvalue.find('initializer')\n                    if initializer is not None:\n                        p += f' {self.parser.paras_as_str(initializer, plain=plain)}'\n                    ret.append(p)\n            return ret\n\n        def has(self) -&gt; bool:\n            return self.xmlxml.find('enumvalue') is not None if self.kindkind.is_enum() else False\n\n    class Initializer:\n        def __init__(self, xml: Element, parser: XmlParser, kind: Kind):\n            self.xmlxml = xml\n            self.parserparser = parser\n            self.kindkind = kind\n\n        def md(self, plain: bool = False) -&gt; str:\n            initializer = self.xmlxml.find('initializer')\n            if initializer is not None:\n                return self.parserparser.paras_as_str(initializer, plain=plain)\n            else:\n                return ''\n\n        def plain(self) -&gt; str:\n            return self.mdmd(plain=True)\n\n        def has(self) -&gt; bool:\n            return self.xmlxml.find('initializer') is not None\n\n    class Definition:\n        def __init__(self, xml: Element, parser: XmlParser, kind: Kind):\n            self.xmlxml = xml\n            self.parserparser = parser\n            self.kindkind = kind\n\n        def md(self, plain: bool = False) -&gt; str:\n            return self.plainplain()\n\n        def plain(self) -&gt; str:\n            definition = self.xmlxml.find('definition')\n            if definition is not None and definition.text:\n                return f'{definition.text};'\n            else:\n                return ''\n\n        def has(self) -&gt; bool:\n            return self.xmlxml.find('definition') is not None\n\n    class Programlisting:\n        def __init__(self, xml: Element, parser: XmlParser, kind: Kind):\n            self.xmlxml = xml\n            self.parserparser = parser\n            self.kindkind = kind\n\n        def md(self, plain: bool = False) -&gt; str:\n            programlisting = self.xmlxml.find('programlisting')\n            if programlisting is None:\n                return ''\n\n            return self.parserparser.programlisting_as_str(programlisting)\n\n        def has(self) -&gt; bool:\n            return self.xmlxml.find('programlisting') is not None\n</code></pre>"},{"location":"mkdoxyApi/utils_8py/","title":"File utils.py","text":"<p>FileList &gt; mkdoxy &gt; utils.py</p> <p>Go to the source code of this file</p>"},{"location":"mkdoxyApi/utils_8py/#namespaces","title":"Namespaces","text":"Type Name namespace utils <p>The documentation for this class was generated from the following file <code>mkdoxy/utils.py</code></p>"},{"location":"mkdoxyApi/utils_8py_source/","title":"File utils.py","text":"<p>File List &gt; mkdoxy &gt; utils.py</p> <p>Go to the documentation of this file</p> <pre><code>import logging\nimport re\n\nfrom mkdocs.config import Config\nfrom ruamel.yaml import YAML\n\nlog: logging.Logger = logging.getLogger(\"mkdocs\")\n\n\nregex = r\"(-{3}|\\.{3})\\n(?P&lt;meta&gt;([\\S\\s])*)\\n(-{3}|\\.{3})\\n(?P&lt;template&gt;([\\S\\s])*)\"\n\n# Credits: https://stackoverflow.com/a/1630350\ndef lookahead(iterable):\n\"\"\"Pass through all values from the given iterable, augmented by the\n    information if there are more values to come after the current one\n    (True), or if it is the last value (False).\n    \"\"\"\n    # Get an iterator and pull the first value.\n    it = iter(iterable)\n    last = next(it)\n    # Run the iterator to exhaustion (starting from the second value).\n    for val in it:\n        # Report the *previous* value (more to come).\n        yield last, True\n        last = val\n    # Report the last value.\n    yield last, False\n\n\ndef contains(a, pos, b):\n    ai = pos\n    bi = 0\n    if len(b) &gt; len(a) - ai:\n        return False\n    while bi &lt; len(b):\n        if a[ai] != b[bi]:\n            return False\n        ai += 1\n        bi += 1\n    return True\n\n\ndef split_safe(s: str, delim: str) -&gt; [str]:\n    tokens = []\n    i = 0\n    last = 0\n    inside = 0\n    while i &lt; len(s):\n        c = s[i]\n        if i == len(s) - 1:\n            tokens.append(s[last:i + 1])\n        if c in ['&lt;', '[', '{', '(']:\n            inside += 1\n            i += 1\n            continue\n        if c in ['&gt;', ']', '}', ')']:\n            inside -= 1\n            i += 1\n            continue\n        if inside &gt; 0:\n            i += 1\n            continue\n        if contains(s, i, delim):\n            tokens.append(s[last:i])\n            i += 2\n            last = i\n        i += 1\n    return tokens\n\n\ndef parseTemplateFile(templateFile: str):\n    match = re.match(regex, templateFile, re.MULTILINE)\n    if match:\n        template = match[\"template\"]\n        meta = match[\"meta\"]\n        yaml = YAML(typ='safe')\n        metaData = yaml.load(meta)\n        # yaml.dump(metaData, sys.stdout)\n        return template, metaData\n    return templateFile, {}\n\n\ndef merge_two_dicts(base, new):\n    \"https://stackoverflow.com/a/26853961\"\n    result = base.copy()  # start with keys and values of x\n    result.update(new)  # modifies z with keys and values of y\n    return result\n\n# def recursive_find(nodes: [Node], kind: Kind):\ndef recursive_find(nodes, kind):\n    ret = []\n    for node in nodes:\n        if node.kind == kind:\n            ret.append(node)\n        if node.kind.is_parent():\n            ret.extend(recursive_find(node.children, kind))\n    return ret\n\n# def recursive_find_with_parent(nodes: [Node], kinds: [Kind], parent_kinds: [Kind]):\ndef recursive_find_with_parent(nodes, kinds, parent_kinds):\n    ret = []\n    for node in nodes:\n        if node.kind in kinds and node.parent is not None and node.parent.kind in parent_kinds:\n            ret.append(node)\n        if node.kind.is_parent() or node.kind.is_dir() or node.kind.is_file():\n            ret.extend(recursive_find_with_parent(node.children, kinds, parent_kinds))\n    return ret\n\ndef check_enabled_markdown_extensions(config: Config, mkdoxyConfig: Config) -&gt; None:\n    # sourcery skip: merge-nested-ifs\n\"\"\"\n    Checks if the required markdown extensions are enabled.\n    :param config: The MkDocs config.\n    \"\"\"\n    # enabled_extensions = config['markdown_extensions']\n    # if mkdoxyConfig.get(\"emojis-enabled\", False):\n    #   if 'pymdownx.emoji' not in enabled_extensions:\n    #       log.warning(\"The 'pymdownx.emoji' extension is not enabled. Some emojis may not be rendered correctly. https://squidfunk.github.io/mkdocs-material/reference/icons-emojis/#configuration\")\n</code></pre>"},{"location":"mkdoxyApi/xml__parser_8py/","title":"File xml_parser.py","text":"<p>FileList &gt; mkdoxy &gt; xml_parser.py</p> <p>Go to the source code of this file</p>"},{"location":"mkdoxyApi/xml__parser_8py/#namespaces","title":"Namespaces","text":"Type Name namespace xml_parser"},{"location":"mkdoxyApi/xml__parser_8py/#classes","title":"Classes","text":"Type Name class XmlParser <p>The documentation for this class was generated from the following file <code>mkdoxy/xml_parser.py</code></p>"},{"location":"mkdoxyApi/xml__parser_8py_source/","title":"File xml_parser.py","text":"<p>File List &gt; mkdoxy &gt; xml_parser.py</p> <p>Go to the documentation of this file</p> <pre><code>from xml.etree.ElementTree import Element as Element\n\nfrom mkdoxy.cache import Cache\nfrom mkdoxy.markdown import Md, MdRenderer, MdParagraph, MdTable, Code, MdTableRow, MdCodeBlock, MdTableCell, \\\n    MdHeader, MdImage, MdList, MdBlockQuote, MdLink, MdBold, MdItalic, Text, Br\nfrom mkdoxy.utils import lookahead\n\nSIMPLE_SECTIONS = {\n    'see': 'See also:',\n    'note': 'Note:',\n    'bug': 'Bug:',\n    'warning': 'Warning:',\n    'return': 'Returns:',\n    'returns': 'Returns:',\n    'param': 'Parameters:',\n    'templateparam': 'Template parameters:',\n    'retval': 'Return value:',\n    'author': 'Author:',\n    'authors': 'Authors:',\n    'since': 'Since:',\n    'pre': 'Precondition:',\n    'remark': 'Remark:',\n    'copyright': 'Copyright:',\n    'post': 'Postcondition:',\n    'rcs': 'Rcs:',\n    'attention': 'Attention:',\n    'invariant': 'Invariant:',\n    'exception': 'Exception:',\n    'date': 'Date:',\n    'version': 'Version:',\n}\n\nclass XmlParser:\n    def __init__(self, cache: Cache, debug: bool = False):\n        self.cachecache = cache\n        self.debugdebug = debug\n\n    def anchor(self, name: str) -&gt; str:\n        return '&lt;a name=\\\"' + name + '\\\"&gt;&lt;/a&gt;'\n\n    def paras_as_str(self, p: Element, italic: bool = False, plain: bool = False) -&gt; str:\n        if plain:\n            return self.plain_as_strplain_as_str(p)\n        renderer = MdRenderer()\n        for m in self.parasparas(p, italic=italic):\n            m.render(renderer, '')\n        return renderer.output\n\n    def reference_as_str(self, p: Element) -&gt; str:\n        renderer = MdRenderer()\n        refid = p.get('refid')\n        if refid is None:\n            return p.text\n        m = MdLink([MdBold([Text(p.text)])], refid)\n        m.render(renderer, '')\n        return renderer.output\n\n    def programlisting_as_str(self, p: Element) -&gt; str:\n        renderer = MdRenderer()\n        for m in self.programlistingprogramlisting(p):\n            m.render(renderer, '')\n        return renderer.output\n\n    def plain_as_str(self, p: Element) -&gt; str:\n        return ' '.join(self.plainplain(p)).strip()\n\n    def plain(self, p: Element) -&gt; [str]:\n        ret = []\n        if p is None:\n            return ret\n        if p.text:\n            ret.append(p.text.strip())\n        for item in list(p):\n            ret.extend(self.plainplain(item))\n        if p.tail:\n            ret.append(p.tail.strip())\n        return ret\n\n    def programlisting(self, p: Element) -&gt; [Md]:\n        ret = []\n        # programlisting\n        if p.tag == 'programlisting':\n            got_lang = False\n            code = MdCodeBlock([])\n            for codeline in p.findall('codeline'):\n                line = ''\n                for highlight in codeline.findall('highlight'):\n                    if highlight.text is not None:\n                        line += highlight.text\n                    for c in list(highlight):\n                        if c.tag == 'sp':\n                            line += ' '\n                        if c.text:\n                            line += c.text\n                        if c.tail:\n                            line += c.tail\n                code.append(line)\n            ret.extend((Text('\\n'), code))\n        return ret\n\n    def paras(self, p: Element, italic: bool = False) -&gt; [Md]:\n        ret = []\n        if p is None:\n            return ret\n        if p.text:\n            if italic:\n                ret.extend((MdItalic([Text(p.text.strip())]), Text(' ')))\n            else:\n                ret.append(Text(p.text))\n        for item in list(p):\n            # para\n            if item.tag == 'para':\n                ret.extend((MdParagraph(self.parasparas(item)), Text('\\n')))\n            elif item.tag == 'image':\n                url = item.get('name')\n                ret.append(MdImage(url))\n\n            elif item.tag == 'computeroutput':\n                text = []\n                if item.text:\n                    text.append(item.text)\n                for i in list(item):\n                    text.extend(self.plainplain(i))\n                ret.append(Code(' '.join(text)))\n\n            elif item.tag == 'programlisting':\n                ret.extend(self.programlistingprogramlisting(item))\n\n            elif item.tag == 'table':\n                t = MdTable()\n                for row in item.findall('row'):\n                    r = MdTableRow([])\n                    for cell in row.findall('entry'):\n                        for para in cell.findall('para'):\n                            r.append(MdTableCell(self.parasparas(para)))\n                    t.append(r)\n                ret.append(t)\n\n            elif item.tag == 'blockquote':\n                b = MdBlockQuote([])\n                for para in item.findall('para'):\n                    b.extend(self.parasparas(para))\n                ret.append(b)\n\n            elif item.tag == 'heading':\n                ret.append(MdHeader(int(item.get('level')), self.parasparas(item)))\n\n            elif item.tag in ['orderedlist', 'itemizedlist']:\n                lst = MdList([])\n                for listitem in item.findall('listitem'):\n                    i = MdParagraph([])\n                    for para in listitem.findall('para'):\n                        i.extend(self.parasparas(para))\n                    lst.append(i)\n                ret.append(lst)\n\n            elif item.tag == 'ref':\n                refid = item.get('refid')\n                try:\n                    ref = self.cachecache.get(refid)\n                    if italic:\n                        if item.text:\n                            ret.append(MdLink([MdItalic([MdBold([Text(item.text)])])], ref.url))\n                        else:\n                            ret.append(MdLink([MdItalic([MdBold([Text(ref.get_full_name())])])], ref.url))\n                    elif item.text:\n                        ret.append(MdLink([MdBold([Text(item.text)])], ref.url))\n                    else:\n                        ret.append(MdLink([MdBold([Text(ref.get_full_name())])], ref.url))\n                except Exception:\n                    if item.text:\n                        ret.append(Text(item.text))\n\n            elif item.tag == 'sect1':\n                title = item.find('title').text\n                ret.append(MdHeader(2, [Text(title)]))\n                ret.extend(self.parasparas(item))\n\n            elif item.tag == 'sect2':\n                title = item.find('title').text\n                ret.append(MdHeader(3, [Text(title)]))\n                ret.extend(self.parasparas(item))\n\n            elif item.tag == 'sect3':\n                title = item.find('title').text\n                ret.append(MdHeader(4, [Text(title)]))\n                ret.extend(self.parasparas(item))\n\n            elif item.tag == 'sect4':\n                title = item.find('title').text\n                ret.append(MdHeader(5, [Text(title)]))\n                ret.extend(self.parasparas(item))\n\n            elif item.tag == 'sect5':\n                title = item.find('title').text\n                ret.append(MdHeader(6, [Text(title)]))\n                ret.extend(self.parasparas(item))\n\n            elif item.tag == 'variablelist':\n                varlistentry = item.find('varlistentry')\n\n                ret.append(MdHeader(4, self.parasparas(varlistentry.find('term'))))\n\n                term = varlistentry.find('term')\n                for listitem in item.findall('listitem'):\n                    ret.extend(MdParagraph(self.parasparas(para)) for para in listitem.findall('para'))\n            elif item.tag == 'parameterlist':\n                parameteritems = item.findall('parameteritem')\n                lst = MdList([])\n                for parameteritem in parameteritems:\n                    name = parameteritem.find('parameternamelist').find('parametername')\n                    description = parameteritem.find('parameterdescription').findall('para')\n                    par = MdParagraph([])\n                    if len(name) &gt; 0:\n                        par.extend(self.parasparas(name))\n                    else:\n                        par.append(Code(name.text))\n                    par.append(Text(' '))\n                    for ip in description:\n                        par.extend(self.parasparas(ip))\n                    lst.append(par)\n                ret.extend(\n                    (Br(), MdBold([Text(SIMPLE_SECTIONS[item.get('kind')])]), Br(), lst)\n                )\n            elif item.tag == 'simplesect':\n                kind = item.get('kind')\n                ret.extend((Br(), MdBold([Text(SIMPLE_SECTIONS[kind])])))\n                if kind != 'see':\n                    ret.append(Br())\n                else:\n                    ret.append(Text(' '))\n\n                for sp, has_more in lookahead(item.findall('para')):\n                    ret.extend(self.parasparas(sp))\n                    if kind == 'see':\n                        if has_more:\n                            ret.append(Text(', '))\n                    else:\n                        ret.append(Br())\n\n            elif item.tag == 'xrefsect':\n                xreftitle = item.find('xreftitle')\n                xrefdescription = item.find('xrefdescription')\n                kind = xreftitle.text.lower()\n                ret.extend((Br(), MdBold(self.parasparas(xreftitle)), Br()))\n                for sp in xrefdescription.findall('para'):\n                    ret.extend(self.parasparas(sp))\n                    ret.append(Br())\n\n            elif item.tag == 'ulink':\n                ret.append(MdLink(self.parasparas(item), item.get('url')))\n\n            elif item.tag == 'bold':\n                ret.append(MdBold(self.parasparas(item)))\n\n            elif item.tag == 'emphasis':\n                ret.append(MdItalic(self.parasparas(item)))\n\n            if item.tail:\n                if italic:\n                    ret.extend((Text(' '), MdItalic([Text(item.tail.strip())])))\n                else:\n                    ret.append(Text(item.tail))\n        return ret\n</code></pre>"},{"location":"mkdoxyApi/namespaces/","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p> <ul> <li>namespace mkdoxy <ul> <li>namespace DoxyTagParser </li> <li>namespace cache </li> <li>namespace constants </li> <li>namespace doxygen </li> <li>namespace doxyrun </li> <li>namespace finder </li> <li>namespace generatorAuto </li> <li>namespace generatorBase </li> <li>namespace generatorSnippets </li> <li>namespace markdown </li> <li>namespace node </li> <li>namespace plugin </li> <li>namespace property </li> <li>namespace utils </li> <li>namespace xml_parser </li> </ul> </li> <li>namespace pprint </li> </ul>"},{"location":"mkdoxyApi/classes/","title":"Class Index","text":""},{"location":"mkdoxyApi/classes/#b","title":"b","text":"<ul> <li>Br (mkdoxy::markdown)</li> <li>Brief (mkdoxy::property::Property)</li> </ul>"},{"location":"mkdoxyApi/classes/#c","title":"c","text":"<ul> <li>Cache (mkdoxy::cache)</li> <li>Code (mkdoxy::markdown)</li> <li>CodeBlock (mkdoxy::property::Property)</li> </ul>"},{"location":"mkdoxyApi/classes/#d","title":"d","text":"<ul> <li>Definition (mkdoxy::property::Property)</li> <li>Details (mkdoxy::property::Property)</li> <li>Doxygen (mkdoxy::doxygen)</li> <li>DoxygenRun (mkdoxy::doxyrun)</li> <li>DoxyTagParser (mkdoxy::DoxyTagParser)</li> <li>DummyNode (mkdoxy::node)</li> </ul>"},{"location":"mkdoxyApi/classes/#f","title":"f","text":"<ul> <li>Finder (mkdoxy::finder)</li> </ul>"},{"location":"mkdoxyApi/classes/#g","title":"g","text":"<ul> <li>GeneratorAuto (mkdoxy::generatorAuto)</li> <li>GeneratorBase (mkdoxy::generatorBase)</li> <li>GeneratorSnippets (mkdoxy::generatorSnippets)</li> </ul>"},{"location":"mkdoxyApi/classes/#i","title":"i","text":"<ul> <li>Includes (mkdoxy::property::Property)</li> <li>Initializer (mkdoxy::property::Property)</li> </ul>"},{"location":"mkdoxyApi/classes/#k","title":"k","text":"<ul> <li>Kind (mkdoxy::constants)</li> </ul>"},{"location":"mkdoxyApi/classes/#l","title":"l","text":"<ul> <li>Location (mkdoxy::property::Property)</li> </ul>"},{"location":"mkdoxyApi/classes/#m","title":"m","text":"<ul> <li>Md (mkdoxy::markdown)</li> <li>MdBlockQuote (mkdoxy::markdown)</li> <li>MdBold (mkdoxy::markdown)</li> <li>MdCodeBlock (mkdoxy::markdown)</li> <li>MdHeader (mkdoxy::markdown)</li> <li>MdHint (mkdoxy::markdown)</li> <li>MdImage (mkdoxy::markdown)</li> <li>MdItalic (mkdoxy::markdown)</li> <li>MdLine (mkdoxy::markdown)</li> <li>MdLink (mkdoxy::markdown)</li> <li>MdList (mkdoxy::markdown)</li> <li>MdParagraph (mkdoxy::markdown)</li> <li>MdRenderer (mkdoxy::markdown)</li> <li>MdTable (mkdoxy::markdown)</li> <li>MdTableCell (mkdoxy::markdown)</li> <li>MdTableRow (mkdoxy::markdown)</li> <li>MkDoxy (mkdoxy::plugin)</li> </ul>"},{"location":"mkdoxyApi/classes/#n","title":"n","text":"<ul> <li>Node (mkdoxy::node)</li> </ul>"},{"location":"mkdoxyApi/classes/#p","title":"p","text":"<ul> <li>Params (mkdoxy::property::Property)</li> <li>Programlisting (mkdoxy::property::Property)</li> <li>Property (mkdoxy::property)</li> </ul>"},{"location":"mkdoxyApi/classes/#s","title":"s","text":"<ul> <li>SnippetClass (mkdoxy::generatorSnippets)</li> <li>Specifiers (mkdoxy::property::Property)</li> </ul>"},{"location":"mkdoxyApi/classes/#t","title":"t","text":"<ul> <li>TemplateParams (mkdoxy::property::Property)</li> <li>Text (mkdoxy::markdown)</li> <li>Type (mkdoxy::property::Property)</li> </ul>"},{"location":"mkdoxyApi/classes/#v","title":"v","text":"<ul> <li>Values (mkdoxy::property::Property)</li> <li>Visibility (mkdoxy::constants)</li> </ul>"},{"location":"mkdoxyApi/classes/#x","title":"x","text":"<ul> <li>XmlParser (mkdoxy::xml_parser)</li> </ul>"},{"location":"mkdoxyApi/hierarchy/","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p> <ul> <li>class mkdoxy::DoxyTagParser::DoxyTagParser </li> <li>class mkdoxy::cache::Cache </li> <li>class mkdoxy::doxygen::Doxygen </li> <li>class mkdoxy::doxyrun::DoxygenRun Class for running Doxygen. </li> <li>class mkdoxy::finder::Finder </li> <li>class mkdoxy::generatorAuto::GeneratorAuto </li> <li>class mkdoxy::generatorBase::GeneratorBase Base class for all generators. </li> <li>class mkdoxy::generatorSnippets::GeneratorSnippets </li> <li>class mkdoxy::generatorSnippets::SnippetClass </li> <li>class mkdoxy::markdown::Br </li> <li>class mkdoxy::markdown::Code </li> <li>class mkdoxy::markdown::Md <ul> <li>class mkdoxy::markdown::MdBlockQuote </li> <li>class mkdoxy::markdown::MdBold </li> <li>class mkdoxy::markdown::MdHeader </li> <li>class mkdoxy::markdown::MdHint </li> <li>class mkdoxy::markdown::MdItalic </li> <li>class mkdoxy::markdown::MdLink </li> <li>class mkdoxy::markdown::MdList </li> <li>class mkdoxy::markdown::MdParagraph </li> <li>class mkdoxy::markdown::MdTable </li> <li>class mkdoxy::markdown::MdTableCell </li> <li>class mkdoxy::markdown::MdTableRow </li> </ul> </li> <li>class mkdoxy::markdown::MdCodeBlock </li> <li>class mkdoxy::markdown::MdImage </li> <li>class mkdoxy::markdown::MdLine </li> <li>class mkdoxy::markdown::MdRenderer </li> <li>class mkdoxy::markdown::Text </li> <li>class mkdoxy::node::DummyNode </li> <li>class mkdoxy::node::Node </li> <li>class mkdoxy::property::Property </li> <li>class mkdoxy::property::Property::Brief </li> <li>class mkdoxy::property::Property::CodeBlock </li> <li>class mkdoxy::property::Property::Definition </li> <li>class mkdoxy::property::Property::Details </li> <li>class mkdoxy::property::Property::Includes </li> <li>class mkdoxy::property::Property::Initializer </li> <li>class mkdoxy::property::Property::Location </li> <li>class mkdoxy::property::Property::Params </li> <li>class mkdoxy::property::Property::Programlisting </li> <li>class mkdoxy::property::Property::Specifiers </li> <li>class mkdoxy::property::Property::TemplateParams </li> <li>class mkdoxy::property::Property::Type </li> <li>class mkdoxy::property::Property::Values </li> <li>class mkdoxy::xml_parser::XmlParser </li> <li>class Enum <ul> <li>class mkdoxy::constants::Kind </li> <li>class mkdoxy::constants::Visibility </li> </ul> </li> <li>class BasePlugin <ul> <li>class mkdoxy::plugin::MkDoxy MkDocs plugin for generating documentation from Doxygen XML files. </li> </ul> </li> </ul>"},{"location":"mkdoxyApi/modules/","title":"Modules","text":"<p>No modules found.</p>"},{"location":"mkdoxyApi/pages/","title":"Related Pages","text":"<p>Here is a list of all related documentation pages:</p>"},{"location":"mkdoxyApi/class_members/","title":"Class Members","text":""},{"location":"mkdoxyApi/class_members/#a","title":"a","text":"<ul> <li>add (mkdoxy::cache::Cache)</li> <li>annotated (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>apiPath (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>append (mkdoxy::markdown::Md, mkdoxy::markdown::MdCodeBlock)</li> <li>add_child (mkdoxy::node::Node)</li> <li>anchor (mkdoxy::node::Node, mkdoxy::xml_parser::XmlParser)</li> <li>array (mkdoxy::property::Property::Includes, mkdoxy::property::Property::Params, mkdoxy::property::Property::TemplateParams, mkdoxy::property::Property::Values)</li> </ul>"},{"location":"mkdoxyApi/class_members/#b","title":"b","text":"<ul> <li>base_classes (mkdoxy::node::Node)</li> <li>base_name (mkdoxy::node::Node)</li> <li>base_url (mkdoxy::node::Node)</li> <li>brief (mkdoxy::node::Node)</li> <li>bodyend (mkdoxy::property::Property::Location)</li> <li>bodystart (mkdoxy::property::Property::Location)</li> </ul>"},{"location":"mkdoxyApi/class_members/#c","title":"c","text":"<ul> <li>cache (mkdoxy::cache::Cache, mkdoxy::doxygen::Doxygen, mkdoxy::xml_parser::XmlParser)</li> <li>CLASS (mkdoxy::constants::Kind)</li> <li>checkAndRun (mkdoxy::doxyrun::DoxygenRun)</li> <li>classes (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>code (mkdoxy::generatorBase::GeneratorBase)</li> <li>call_doxy_by_name (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>checkConfig (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>codeStrip (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>config (mkdoxy::generatorSnippets::GeneratorSnippets, mkdoxy::generatorSnippets::SnippetClass)</li> <li>children (mkdoxy::markdown::Md, mkdoxy::node::Node)</li> <li>code_language (mkdoxy::node::Node)</li> <li>codeblock (mkdoxy::node::Node)</li> <li>config_project (mkdoxy::plugin::MkDoxy)</li> <li>config_scheme (mkdoxy::plugin::MkDoxy)</li> <li>column (mkdoxy::property::Property::Location)</li> </ul>"},{"location":"mkdoxyApi/class_members/#d","title":"d","text":"<ul> <li>debug (mkdoxy::DoxyTagParser::DoxyTagParser, mkdoxy::doxygen::Doxygen, mkdoxy::finder::Finder, mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorSnippets::GeneratorSnippets, mkdoxy::node::Node, mkdoxy::plugin::MkDoxy, mkdoxy::xml_parser::XmlParser)</li> <li>dot (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>doxy_key (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>DEFINE (mkdoxy::constants::Kind)</li> <li>DIR (mkdoxy::constants::Kind)</li> <li>dox_dict2str (mkdoxy::doxyrun::DoxygenRun)</li> <li>doxyClass (mkdoxy::finder::Finder, mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyClassMethod (mkdoxy::finder::Finder, mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyCode (mkdoxy::finder::Finder, mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyFunction (mkdoxy::finder::Finder, mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxygen (mkdoxy::finder::Finder, mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorSnippets::GeneratorSnippets, mkdoxy::plugin::MkDoxy)</li> <li>doxyClassHierarchy (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyClassIndex (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyClassList (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyError (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyFileList (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyNamespaceList (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxy_arguments (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>default (mkdoxy::generatorSnippets::SnippetClass)</li> <li>derived_classes (mkdoxy::node::DummyNode, mkdoxy::node::Node)</li> <li>definition (mkdoxy::node::Node)</li> <li>details (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_members/#e","title":"e","text":"<ul> <li>ENUM (mkdoxy::constants::Kind)</li> <li>ENUMVALUE (mkdoxy::constants::Kind)</li> <li>EXAMPLE (mkdoxy::constants::Kind)</li> <li>examples (mkdoxy::doxygen::Doxygen, mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>example (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>error (mkdoxy::generatorBase::GeneratorBase)</li> <li>extend (mkdoxy::markdown::Md)</li> <li>eol (mkdoxy::markdown::MdRenderer)</li> <li>eol_flag (mkdoxy::markdown::MdRenderer)</li> </ul>"},{"location":"mkdoxyApi/class_members/#f","title":"f","text":"<ul> <li>FILE (mkdoxy::constants::Kind)</li> <li>FRIEND (mkdoxy::constants::Kind)</li> <li>FUNCTION (mkdoxy::constants::Kind)</li> <li>from_str (mkdoxy::constants::Kind)</li> <li>files (mkdoxy::doxygen::Doxygen, mkdoxy::generatorAuto::GeneratorAuto)</li> <li>file (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>fileindex (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>fullDoc (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>fullDocFiles (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>function (mkdoxy::generatorBase::GeneratorBase)</li> <li>finder (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>filename (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_members/#g","title":"g","text":"<ul> <li>get (mkdoxy::cache::Cache)</li> <li>GROUP (mkdoxy::constants::Kind)</li> <li>groups (mkdoxy::doxygen::Doxygen)</li> <li>getOutputFolder (mkdoxy::doxyrun::DoxygenRun)</li> <li>generatorBase (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorSnippets::GeneratorSnippets, mkdoxy::plugin::MkDoxy)</li> <li>generate (mkdoxy::generatorSnippets::GeneratorSnippets)</li> </ul>"},{"location":"mkdoxyApi/class_members/#h","title":"h","text":"<ul> <li>hasChanged (mkdoxy::doxyrun::DoxygenRun)</li> <li>hierarchy (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>has (mkdoxy::node::Node, mkdoxy::property::Property::Brief, mkdoxy::property::Property::CodeBlock, mkdoxy::property::Property::Definition, mkdoxy::property::Property::Details, mkdoxy::property::Property::Includes, mkdoxy::property::Property::Initializer, mkdoxy::property::Property::Location, mkdoxy::property::Property::Params, mkdoxy::property::Property::Programlisting, mkdoxy::property::Property::Specifiers, mkdoxy::property::Property::TemplateParams, mkdoxy::property::Property::Type, mkdoxy::property::Property::Values)</li> <li>has_base_classes (mkdoxy::node::Node)</li> <li>has_brief (mkdoxy::node::Node)</li> <li>has_children (mkdoxy::node::Node)</li> <li>has_definition (mkdoxy::node::Node)</li> <li>has_derived_classes (mkdoxy::node::Node)</li> <li>has_details (mkdoxy::node::Node)</li> <li>has_includes (mkdoxy::node::Node)</li> <li>has_initializer (mkdoxy::node::Node)</li> <li>has_location (mkdoxy::node::Node)</li> <li>has_params (mkdoxy::node::Node)</li> <li>has_programlisting (mkdoxy::node::Node)</li> <li>has_specifiers (mkdoxy::node::Node)</li> <li>has_templateparams (mkdoxy::node::Node)</li> <li>has_type (mkdoxy::node::Node)</li> <li>has_values (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_members/#i","title":"i","text":"<ul> <li>indent (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>INTERFACE (mkdoxy::constants::Kind)</li> <li>is_class (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_class_or_struct (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_define (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_dir (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_enum (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_example (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_file (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_friend (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_function (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_group (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_interface (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_language (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_member (mkdoxy::constants::Kind)</li> <li>is_namespace (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_page (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_parent (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_root (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_struct (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_typedef (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_union (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_variable (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>index (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>incorrect_argument (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>incorrect_project (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>is_doxy_inactive (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>is_project_exist (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>is_resolved (mkdoxy::node::DummyNode, mkdoxy::node::Node)</li> <li>includes (mkdoxy::node::Node)</li> <li>initializer (mkdoxy::node::Node)</li> <li>is_const (mkdoxy::node::Node)</li> <li>is_explicit (mkdoxy::node::Node)</li> <li>is_inline (mkdoxy::node::Node)</li> <li>is_mutable (mkdoxy::node::Node)</li> <li>is_operator (mkdoxy::node::Node)</li> <li>is_overloaded (mkdoxy::node::Node)</li> <li>is_pure (mkdoxy::node::Node)</li> <li>is_static (mkdoxy::node::Node)</li> <li>is_virtual (mkdoxy::node::Node)</li> <li>is_enabled (mkdoxy::plugin::MkDoxy)</li> </ul>"},{"location":"mkdoxyApi/class_members/#k","title":"k","text":"<ul> <li>key (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>kind (mkdoxy::node::DummyNode, mkdoxy::node::Node, mkdoxy::property::Property::Brief, mkdoxy::property::Property::CodeBlock, mkdoxy::property::Property::Definition, mkdoxy::property::Property::Details, mkdoxy::property::Property::Includes, mkdoxy::property::Property::Initializer, mkdoxy::property::Property::Location, mkdoxy::property::Property::Params, mkdoxy::property::Property::Programlisting, mkdoxy::property::Property::Specifiers, mkdoxy::property::Property::TemplateParams, mkdoxy::property::Property::Type, mkdoxy::property::Property::Values)</li> </ul>"},{"location":"mkdoxyApi/class_members/#l","title":"l","text":"<ul> <li>look_ahead (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>listToNames (mkdoxy::finder::Finder)</li> <li>loadConfigAndTemplate (mkdoxy::generatorBase::GeneratorBase)</li> <li>lines (mkdoxy::markdown::MdCodeBlock)</li> <li>level (mkdoxy::markdown::MdHeader)</li> <li>linkPrefix (mkdoxy::node::Node)</li> <li>location (mkdoxy::node::Node)</li> <li>location_bodyend (mkdoxy::node::Node)</li> <li>location_bodystart (mkdoxy::node::Node)</li> <li>line (mkdoxy::property::Property::Location)</li> </ul>"},{"location":"mkdoxyApi/class_members/#m","title":"m","text":"<ul> <li>markdown_page (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>member (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>members (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>modules (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>markdown (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>md (mkdoxy::property::Property::Brief, mkdoxy::property::Property::CodeBlock, mkdoxy::property::Property::Definition, mkdoxy::property::Property::Details, mkdoxy::property::Property::Includes, mkdoxy::property::Property::Initializer, mkdoxy::property::Property::Location, mkdoxy::property::Property::Params, mkdoxy::property::Property::Programlisting, mkdoxy::property::Property::Specifiers, mkdoxy::property::Property::TemplateParams, mkdoxy::property::Property::Type, mkdoxy::property::Property::Values)</li> </ul>"},{"location":"mkdoxyApi/class_members/#n","title":"n","text":"<ul> <li>NAMESPACE (mkdoxy::constants::Kind)</li> <li>NONE (mkdoxy::constants::Kind)</li> <li>namespaces (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>name_long (mkdoxy::node::DummyNode, mkdoxy::node::Node)</li> <li>name (mkdoxy::node::Node)</li> <li>name_full_unescaped (mkdoxy::node::Node)</li> <li>name_params (mkdoxy::node::Node)</li> <li>name_short (mkdoxy::node::Node)</li> <li>name_tokens (mkdoxy::node::Node)</li> <li>name_url_safe (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_members/#o","title":"o","text":"<ul> <li>optional_dot (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>output (mkdoxy::markdown::MdRenderer)</li> <li>operator_num (mkdoxy::node::Node)</li> <li>operators_total (mkdoxy::node::Node)</li> <li>overload_num (mkdoxy::node::Node)</li> <li>overload_suffix (mkdoxy::node::Node)</li> <li>overload_total (mkdoxy::node::Node)</li> <li>on_files (mkdoxy::plugin::MkDoxy)</li> <li>on_page_markdown (mkdoxy::plugin::MkDoxy)</li> </ul>"},{"location":"mkdoxyApi/class_members/#p","title":"p","text":"<ul> <li>parseEmptyTag (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>parseProject (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>parseProjectTagMulti (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>parseProjectTagSingle (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>project (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>PAGE (mkdoxy::constants::Kind)</li> <li>PROPERTY (mkdoxy::constants::Kind)</li> <li>PRIVATE (mkdoxy::constants::Visibility)</li> <li>PROTECTED (mkdoxy::constants::Visibility)</li> <li>PUBLIC (mkdoxy::constants::Visibility)</li> <li>pages (mkdoxy::doxygen::Doxygen, mkdoxy::generatorAuto::GeneratorAuto)</li> <li>parser (mkdoxy::doxygen::Doxygen, mkdoxy::property::Property::Brief, mkdoxy::property::Property::CodeBlock, mkdoxy::property::Property::Definition, mkdoxy::property::Property::Details, mkdoxy::property::Property::Includes, mkdoxy::property::Property::Initializer, mkdoxy::property::Property::Location, mkdoxy::property::Property::Params, mkdoxy::property::Property::Programlisting, mkdoxy::property::Property::Specifiers, mkdoxy::property::Property::TemplateParams, mkdoxy::property::Property::Type, mkdoxy::property::Property::Values)</li> <li>printStructure (mkdoxy::doxygen::Doxygen)</li> <li>print_node (mkdoxy::doxygen::Doxygen)</li> <li>page (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase, mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>programlisting (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase, mkdoxy::node::Node, mkdoxy::xml_parser::XmlParser)</li> <li>pageUrlPrefix (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>projects (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>params (mkdoxy::node::Node)</li> <li>parent (mkdoxy::node::Node)</li> <li>parents (mkdoxy::node::Node)</li> <li>prefix (mkdoxy::node::Node)</li> <li>print_node_recursive (mkdoxy::node::Node)</li> <li>plain (mkdoxy::property::Property::Brief, mkdoxy::property::Property::CodeBlock, mkdoxy::property::Property::Definition, mkdoxy::property::Property::Details, mkdoxy::property::Property::Includes, mkdoxy::property::Property::Initializer, mkdoxy::property::Property::Location, mkdoxy::property::Property::Params, mkdoxy::property::Property::Specifiers, mkdoxy::property::Property::TemplateParams, mkdoxy::property::Property::Type, mkdoxy::property::Property::Values, mkdoxy::xml_parser::XmlParser)</li> <li>parsed (mkdoxy::property::Property::Specifiers)</li> <li>paras (mkdoxy::xml_parser::XmlParser)</li> <li>paras_as_str (mkdoxy::xml_parser::XmlParser)</li> <li>plain_as_str (mkdoxy::xml_parser::XmlParser)</li> <li>programlisting_as_str (mkdoxy::xml_parser::XmlParser)</li> </ul>"},{"location":"mkdoxyApi/class_members/#q","title":"q","text":"<ul> <li>query (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_members/#r","title":"r","text":"<ul> <li>replaceMarkdown (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>returnMarkdown (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>ROOT (mkdoxy::constants::Kind)</li> <li>root (mkdoxy::doxygen::Doxygen, mkdoxy::node::Node)</li> <li>run (mkdoxy::doxyrun::DoxygenRun)</li> <li>relatedpages (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>render (mkdoxy::generatorBase::GeneratorBase, mkdoxy::markdown::Br, mkdoxy::markdown::Code, mkdoxy::markdown::MdBlockQuote, mkdoxy::markdown::MdBold, mkdoxy::markdown::MdCodeBlock, mkdoxy::markdown::MdHeader, mkdoxy::markdown::MdHint, mkdoxy::markdown::MdImage, mkdoxy::markdown::MdItalic, mkdoxy::markdown::MdLine, mkdoxy::markdown::MdLink, mkdoxy::markdown::MdList, mkdoxy::markdown::MdParagraph, mkdoxy::markdown::MdTable, mkdoxy::markdown::MdTableCell, mkdoxy::markdown::MdTableRow, mkdoxy::markdown::Text)</li> <li>replace_markdown (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>refid (mkdoxy::node::Node)</li> <li>reimplements (mkdoxy::node::Node)</li> <li>reference_as_str (mkdoxy::xml_parser::XmlParser)</li> </ul>"},{"location":"mkdoxyApi/class_members/#s","title":"s","text":"<ul> <li>SIGNAL (mkdoxy::constants::Kind)</li> <li>SLOT (mkdoxy::constants::Kind)</li> <li>STRUCT (mkdoxy::constants::Kind)</li> <li>save (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>siteDir (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>summary (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>shift_each_line (mkdoxy::generatorBase::GeneratorBase)</li> <li>setLinkPrefix (mkdoxy::node::Node)</li> <li>sort_children (mkdoxy::node::Node)</li> <li>specifiders (mkdoxy::node::Node)</li> <li>suffix (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_members/#t","title":"t","text":"<ul> <li>TYPEDEF (mkdoxy::constants::Kind)</li> <li>tempDoxyDir (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>try_load_yaml (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>text (mkdoxy::markdown::Code, mkdoxy::markdown::Text)</li> <li>title (mkdoxy::markdown::MdHint, mkdoxy::node::Node)</li> <li>typ (mkdoxy::markdown::MdHint)</li> <li>templateparams (mkdoxy::node::Node)</li> <li>type (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_members/#u","title":"u","text":"<ul> <li>UNION (mkdoxy::constants::Kind)</li> <li>useDirectoryUrls (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>url (mkdoxy::markdown::MdImage, mkdoxy::markdown::MdLink, mkdoxy::node::Node)</li> <li>url_source (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_members/#v","title":"v","text":"<ul> <li>VARIABLE (mkdoxy::constants::Kind)</li> <li>values (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_members/#w","title":"w","text":"<ul> <li>write (mkdoxy::markdown::MdRenderer)</li> </ul>"},{"location":"mkdoxyApi/class_members/#x","title":"x","text":"<ul> <li>xml (mkdoxy::property::Property::Brief, mkdoxy::property::Property::CodeBlock, mkdoxy::property::Property::Definition, mkdoxy::property::Property::Details, mkdoxy::property::Property::Includes, mkdoxy::property::Property::Initializer, mkdoxy::property::Property::Location, mkdoxy::property::Property::Params, mkdoxy::property::Property::Programlisting, mkdoxy::property::Property::Specifiers, mkdoxy::property::Property::TemplateParams, mkdoxy::property::Property::Type, mkdoxy::property::Property::Values)</li> </ul>"},{"location":"mkdoxyApi/class_members/#_","title":"_","text":"<ul> <li>__init__ (mkdoxy::DoxyTagParser::DoxyTagParser, mkdoxy::cache::Cache, mkdoxy::doxygen::Doxygen, mkdoxy::doxyrun::DoxygenRun, mkdoxy::finder::Finder, mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase, mkdoxy::generatorSnippets::GeneratorSnippets, mkdoxy::generatorSnippets::SnippetClass, mkdoxy::markdown::Br, mkdoxy::markdown::Code, mkdoxy::markdown::Md, mkdoxy::markdown::MdBlockQuote, mkdoxy::markdown::MdBold, mkdoxy::markdown::MdCodeBlock, mkdoxy::markdown::MdHeader, mkdoxy::markdown::MdHint, mkdoxy::markdown::MdImage, mkdoxy::markdown::MdItalic, mkdoxy::markdown::MdLine, mkdoxy::markdown::MdLink, mkdoxy::markdown::MdList, mkdoxy::markdown::MdParagraph, mkdoxy::markdown::MdRenderer, mkdoxy::markdown::MdTable, mkdoxy::markdown::MdTableCell, mkdoxy::markdown::MdTableRow, mkdoxy::markdown::Text, mkdoxy::node::DummyNode, mkdoxy::node::Node, mkdoxy::property::Property::Brief, mkdoxy::property::Property::CodeBlock, mkdoxy::property::Property::Definition, mkdoxy::property::Property::Details, mkdoxy::property::Property::Includes, mkdoxy::property::Property::Initializer, mkdoxy::property::Property::Location, mkdoxy::property::Property::Params, mkdoxy::property::Property::Programlisting, mkdoxy::property::Property::Specifiers, mkdoxy::property::Property::TemplateParams, mkdoxy::property::Property::Type, mkdoxy::property::Property::Values, mkdoxy::xml_parser::XmlParser)</li> <li>_fix_duplicates (mkdoxy::doxygen::Doxygen)</li> <li>_fix_parents (mkdoxy::doxygen::Doxygen)</li> <li>_is_in_root (mkdoxy::doxygen::Doxygen)</li> <li>_recursive_sort (mkdoxy::doxygen::Doxygen)</li> <li>_remove_from_root (mkdoxy::doxygen::Doxygen)</li> <li>_normalize (mkdoxy::finder::Finder)</li> <li>_generate_recursive (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>_generate_recursive_examples (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>_generate_recursive_files (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>_generate_recursive_groups (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>_generate_recursive_pages (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>_find_base_classes (mkdoxy::generatorBase::GeneratorBase)</li> <li>_recurs_setLinkPrefixNode (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>_recurs_setLinkPrefixNodes (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>__repr__ (mkdoxy::node::Node)</li> <li>_brief (mkdoxy::node::Node)</li> <li>_check_attrs (mkdoxy::node::Node)</li> <li>_check_for_children (mkdoxy::node::Node)</li> <li>_const (mkdoxy::node::Node)</li> <li>_definition (mkdoxy::node::Node)</li> <li>_details (mkdoxy::node::Node)</li> <li>_dirname (mkdoxy::node::Node)</li> <li>_explicit (mkdoxy::node::Node)</li> <li>_includes (mkdoxy::node::Node)</li> <li>_initializer (mkdoxy::node::Node)</li> <li>_inline (mkdoxy::node::Node)</li> <li>_kind (mkdoxy::node::Node)</li> <li>_language (mkdoxy::node::Node)</li> <li>_location (mkdoxy::node::Node)</li> <li>_mutable (mkdoxy::node::Node)</li> <li>_name (mkdoxy::node::Node)</li> <li>_params (mkdoxy::node::Node)</li> <li>_parent (mkdoxy::node::Node)</li> <li>_print_node_recursive_md (mkdoxy::node::Node)</li> <li>_programlisting (mkdoxy::node::Node)</li> <li>_pure (mkdoxy::node::Node)</li> <li>_refid (mkdoxy::node::Node)</li> <li>_specifiers (mkdoxy::node::Node)</li> <li>_static (mkdoxy::node::Node)</li> <li>_templateparams (mkdoxy::node::Node)</li> <li>_title (mkdoxy::node::Node)</li> <li>_type (mkdoxy::node::Node)</li> <li>_values (mkdoxy::node::Node)</li> <li>_virtual (mkdoxy::node::Node)</li> <li>_visibility (mkdoxy::node::Node)</li> <li>_xml (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/","title":"Class Member Functions","text":""},{"location":"mkdoxyApi/class_member_functions/#a","title":"a","text":"<ul> <li>add (mkdoxy::cache::Cache)</li> <li>annotated (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>append (mkdoxy::markdown::Md, mkdoxy::markdown::MdCodeBlock)</li> <li>add_child (mkdoxy::node::Node)</li> <li>anchor (mkdoxy::node::Node, mkdoxy::xml_parser::XmlParser)</li> <li>array (mkdoxy::property::Property::Includes, mkdoxy::property::Property::Params, mkdoxy::property::Property::TemplateParams, mkdoxy::property::Property::Values)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#b","title":"b","text":"<ul> <li>base_classes (mkdoxy::node::Node)</li> <li>base_name (mkdoxy::node::Node)</li> <li>base_url (mkdoxy::node::Node)</li> <li>brief (mkdoxy::node::Node)</li> <li>bodyend (mkdoxy::property::Property::Location)</li> <li>bodystart (mkdoxy::property::Property::Location)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#c","title":"c","text":"<ul> <li>checkAndRun (mkdoxy::doxyrun::DoxygenRun)</li> <li>classes (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>code (mkdoxy::generatorBase::GeneratorBase)</li> <li>call_doxy_by_name (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>checkConfig (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>codeStrip (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>children (mkdoxy::node::Node)</li> <li>code_language (mkdoxy::node::Node)</li> <li>codeblock (mkdoxy::node::Node)</li> <li>column (mkdoxy::property::Property::Location)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#d","title":"d","text":"<ul> <li>dox_dict2str (mkdoxy::doxyrun::DoxygenRun)</li> <li>doxyClass (mkdoxy::finder::Finder, mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyClassMethod (mkdoxy::finder::Finder, mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyCode (mkdoxy::finder::Finder, mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyFunction (mkdoxy::finder::Finder, mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyClassHierarchy (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyClassIndex (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyClassList (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyError (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyFileList (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>doxyNamespaceList (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>default (mkdoxy::generatorSnippets::SnippetClass)</li> <li>definition (mkdoxy::node::Node)</li> <li>derived_classes (mkdoxy::node::Node)</li> <li>details (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#e","title":"e","text":"<ul> <li>example (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>examples (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>error (mkdoxy::generatorBase::GeneratorBase)</li> <li>extend (mkdoxy::markdown::Md)</li> <li>eol (mkdoxy::markdown::MdRenderer)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#f","title":"f","text":"<ul> <li>from_str (mkdoxy::constants::Kind)</li> <li>file (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>fileindex (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>files (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>fullDoc (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>function (mkdoxy::generatorBase::GeneratorBase)</li> <li>filename (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#g","title":"g","text":"<ul> <li>get (mkdoxy::cache::Cache)</li> <li>getOutputFolder (mkdoxy::doxyrun::DoxygenRun)</li> <li>generate (mkdoxy::generatorSnippets::GeneratorSnippets)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#h","title":"h","text":"<ul> <li>hasChanged (mkdoxy::doxyrun::DoxygenRun)</li> <li>hierarchy (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>has (mkdoxy::node::Node, mkdoxy::property::Property::Brief, mkdoxy::property::Property::CodeBlock, mkdoxy::property::Property::Definition, mkdoxy::property::Property::Details, mkdoxy::property::Property::Includes, mkdoxy::property::Property::Initializer, mkdoxy::property::Property::Location, mkdoxy::property::Property::Params, mkdoxy::property::Property::Programlisting, mkdoxy::property::Property::Specifiers, mkdoxy::property::Property::TemplateParams, mkdoxy::property::Property::Type, mkdoxy::property::Property::Values)</li> <li>has_base_classes (mkdoxy::node::Node)</li> <li>has_brief (mkdoxy::node::Node)</li> <li>has_children (mkdoxy::node::Node)</li> <li>has_definition (mkdoxy::node::Node)</li> <li>has_derived_classes (mkdoxy::node::Node)</li> <li>has_details (mkdoxy::node::Node)</li> <li>has_includes (mkdoxy::node::Node)</li> <li>has_initializer (mkdoxy::node::Node)</li> <li>has_location (mkdoxy::node::Node)</li> <li>has_params (mkdoxy::node::Node)</li> <li>has_programlisting (mkdoxy::node::Node)</li> <li>has_specifiers (mkdoxy::node::Node)</li> <li>has_templateparams (mkdoxy::node::Node)</li> <li>has_type (mkdoxy::node::Node)</li> <li>has_values (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#i","title":"i","text":"<ul> <li>is_class (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_class_or_struct (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_define (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_dir (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_enum (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_example (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_file (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_friend (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_function (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_group (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_interface (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_language (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_member (mkdoxy::constants::Kind)</li> <li>is_namespace (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_page (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_parent (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_root (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_struct (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_typedef (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_union (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>is_variable (mkdoxy::constants::Kind, mkdoxy::node::Node)</li> <li>index (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>incorrect_argument (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>incorrect_project (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>is_doxy_inactive (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>is_project_exist (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>is_resolved (mkdoxy::node::DummyNode, mkdoxy::node::Node)</li> <li>includes (mkdoxy::node::Node)</li> <li>initializer (mkdoxy::node::Node)</li> <li>is_const (mkdoxy::node::Node)</li> <li>is_explicit (mkdoxy::node::Node)</li> <li>is_inline (mkdoxy::node::Node)</li> <li>is_mutable (mkdoxy::node::Node)</li> <li>is_operator (mkdoxy::node::Node)</li> <li>is_overloaded (mkdoxy::node::Node)</li> <li>is_pure (mkdoxy::node::Node)</li> <li>is_static (mkdoxy::node::Node)</li> <li>is_virtual (mkdoxy::node::Node)</li> <li>is_enabled (mkdoxy::plugin::MkDoxy)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#k","title":"k","text":"<ul> <li>kind (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#l","title":"l","text":"<ul> <li>listToNames (mkdoxy::finder::Finder)</li> <li>loadConfigAndTemplate (mkdoxy::generatorBase::GeneratorBase)</li> <li>location (mkdoxy::node::Node)</li> <li>location_bodyend (mkdoxy::node::Node)</li> <li>location_bodystart (mkdoxy::node::Node)</li> <li>line (mkdoxy::property::Property::Location)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#m","title":"m","text":"<ul> <li>member (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>members (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>modules (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>md (mkdoxy::property::Property::Brief, mkdoxy::property::Property::CodeBlock, mkdoxy::property::Property::Definition, mkdoxy::property::Property::Details, mkdoxy::property::Property::Includes, mkdoxy::property::Property::Initializer, mkdoxy::property::Property::Location, mkdoxy::property::Property::Params, mkdoxy::property::Property::Programlisting, mkdoxy::property::Property::Specifiers, mkdoxy::property::Property::TemplateParams, mkdoxy::property::Property::Type, mkdoxy::property::Property::Values)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#n","title":"n","text":"<ul> <li>namespaces (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>name (mkdoxy::node::Node)</li> <li>name_full_unescaped (mkdoxy::node::Node)</li> <li>name_long (mkdoxy::node::Node)</li> <li>name_params (mkdoxy::node::Node)</li> <li>name_short (mkdoxy::node::Node)</li> <li>name_tokens (mkdoxy::node::Node)</li> <li>name_url_safe (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#o","title":"o","text":"<ul> <li>operator_num (mkdoxy::node::Node)</li> <li>operators_total (mkdoxy::node::Node)</li> <li>overload_num (mkdoxy::node::Node)</li> <li>overload_suffix (mkdoxy::node::Node)</li> <li>overload_total (mkdoxy::node::Node)</li> <li>on_files (mkdoxy::plugin::MkDoxy)</li> <li>on_page_markdown (mkdoxy::plugin::MkDoxy)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#p","title":"p","text":"<ul> <li>parseEmptyTag (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>parseProject (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>parseProjectTagMulti (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>parseProjectTagSingle (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>printStructure (mkdoxy::doxygen::Doxygen)</li> <li>print_node (mkdoxy::doxygen::Doxygen)</li> <li>page (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>pages (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>programlisting (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase, mkdoxy::node::Node, mkdoxy::xml_parser::XmlParser)</li> <li>params (mkdoxy::node::Node)</li> <li>parent (mkdoxy::node::Node)</li> <li>parents (mkdoxy::node::Node)</li> <li>prefix (mkdoxy::node::Node)</li> <li>print_node_recursive (mkdoxy::node::Node)</li> <li>plain (mkdoxy::property::Property::Brief, mkdoxy::property::Property::CodeBlock, mkdoxy::property::Property::Definition, mkdoxy::property::Property::Details, mkdoxy::property::Property::Includes, mkdoxy::property::Property::Initializer, mkdoxy::property::Property::Location, mkdoxy::property::Property::Params, mkdoxy::property::Property::Specifiers, mkdoxy::property::Property::TemplateParams, mkdoxy::property::Property::Type, mkdoxy::property::Property::Values, mkdoxy::xml_parser::XmlParser)</li> <li>parsed (mkdoxy::property::Property::Specifiers)</li> <li>paras (mkdoxy::xml_parser::XmlParser)</li> <li>paras_as_str (mkdoxy::xml_parser::XmlParser)</li> <li>plain_as_str (mkdoxy::xml_parser::XmlParser)</li> <li>programlisting_as_str (mkdoxy::xml_parser::XmlParser)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#q","title":"q","text":"<ul> <li>query (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#r","title":"r","text":"<ul> <li>replaceMarkdown (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>returnMarkdown (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>run (mkdoxy::doxyrun::DoxygenRun)</li> <li>relatedpages (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase)</li> <li>render (mkdoxy::generatorBase::GeneratorBase, mkdoxy::markdown::Br, mkdoxy::markdown::Code, mkdoxy::markdown::MdBlockQuote, mkdoxy::markdown::MdBold, mkdoxy::markdown::MdCodeBlock, mkdoxy::markdown::MdHeader, mkdoxy::markdown::MdHint, mkdoxy::markdown::MdImage, mkdoxy::markdown::MdItalic, mkdoxy::markdown::MdLine, mkdoxy::markdown::MdLink, mkdoxy::markdown::MdList, mkdoxy::markdown::MdParagraph, mkdoxy::markdown::MdTable, mkdoxy::markdown::MdTableCell, mkdoxy::markdown::MdTableRow, mkdoxy::markdown::Text)</li> <li>replace_markdown (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>refid (mkdoxy::node::Node)</li> <li>reimplements (mkdoxy::node::Node)</li> <li>root (mkdoxy::node::Node)</li> <li>reference_as_str (mkdoxy::xml_parser::XmlParser)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#s","title":"s","text":"<ul> <li>save (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>summary (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>shift_each_line (mkdoxy::generatorBase::GeneratorBase)</li> <li>setLinkPrefix (mkdoxy::node::Node)</li> <li>sort_children (mkdoxy::node::Node)</li> <li>specifiders (mkdoxy::node::Node)</li> <li>suffix (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#t","title":"t","text":"<ul> <li>try_load_yaml (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>templateparams (mkdoxy::node::Node)</li> <li>title (mkdoxy::node::Node)</li> <li>type (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#u","title":"u","text":"<ul> <li>url (mkdoxy::node::Node)</li> <li>url_source (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#v","title":"v","text":"<ul> <li>values (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#w","title":"w","text":"<ul> <li>write (mkdoxy::markdown::MdRenderer)</li> </ul>"},{"location":"mkdoxyApi/class_member_functions/#_","title":"_","text":"<ul> <li>__init__ (mkdoxy::DoxyTagParser::DoxyTagParser, mkdoxy::cache::Cache, mkdoxy::doxygen::Doxygen, mkdoxy::doxyrun::DoxygenRun, mkdoxy::finder::Finder, mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorBase::GeneratorBase, mkdoxy::generatorSnippets::GeneratorSnippets, mkdoxy::generatorSnippets::SnippetClass, mkdoxy::markdown::Br, mkdoxy::markdown::Code, mkdoxy::markdown::Md, mkdoxy::markdown::MdBlockQuote, mkdoxy::markdown::MdBold, mkdoxy::markdown::MdCodeBlock, mkdoxy::markdown::MdHeader, mkdoxy::markdown::MdHint, mkdoxy::markdown::MdImage, mkdoxy::markdown::MdItalic, mkdoxy::markdown::MdLine, mkdoxy::markdown::MdLink, mkdoxy::markdown::MdList, mkdoxy::markdown::MdParagraph, mkdoxy::markdown::MdRenderer, mkdoxy::markdown::MdTable, mkdoxy::markdown::MdTableCell, mkdoxy::markdown::MdTableRow, mkdoxy::markdown::Text, mkdoxy::node::DummyNode, mkdoxy::node::Node, mkdoxy::property::Property::Brief, mkdoxy::property::Property::CodeBlock, mkdoxy::property::Property::Definition, mkdoxy::property::Property::Details, mkdoxy::property::Property::Includes, mkdoxy::property::Property::Initializer, mkdoxy::property::Property::Location, mkdoxy::property::Property::Params, mkdoxy::property::Property::Programlisting, mkdoxy::property::Property::Specifiers, mkdoxy::property::Property::TemplateParams, mkdoxy::property::Property::Type, mkdoxy::property::Property::Values, mkdoxy::xml_parser::XmlParser)</li> <li>_fix_duplicates (mkdoxy::doxygen::Doxygen)</li> <li>_fix_parents (mkdoxy::doxygen::Doxygen)</li> <li>_is_in_root (mkdoxy::doxygen::Doxygen)</li> <li>_recursive_sort (mkdoxy::doxygen::Doxygen)</li> <li>_remove_from_root (mkdoxy::doxygen::Doxygen)</li> <li>_normalize (mkdoxy::finder::Finder)</li> <li>_generate_recursive (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>_generate_recursive_examples (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>_generate_recursive_files (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>_generate_recursive_groups (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>_generate_recursive_pages (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>_find_base_classes (mkdoxy::generatorBase::GeneratorBase)</li> <li>_recurs_setLinkPrefixNode (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>_recurs_setLinkPrefixNodes (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>__repr__ (mkdoxy::node::Node)</li> <li>_check_attrs (mkdoxy::node::Node)</li> <li>_check_for_children (mkdoxy::node::Node)</li> <li>_print_node_recursive_md (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/","title":"Class Member Variables","text":""},{"location":"mkdoxyApi/class_member_variables/#a","title":"a","text":"<ul> <li>apiPath (mkdoxy::generatorAuto::GeneratorAuto)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#c","title":"c","text":"<ul> <li>cache (mkdoxy::cache::Cache, mkdoxy::doxygen::Doxygen, mkdoxy::xml_parser::XmlParser)</li> <li>CLASS (mkdoxy::constants::Kind)</li> <li>config (mkdoxy::generatorSnippets::GeneratorSnippets, mkdoxy::generatorSnippets::SnippetClass)</li> <li>children (mkdoxy::markdown::Md)</li> <li>config_project (mkdoxy::plugin::MkDoxy)</li> <li>config_scheme (mkdoxy::plugin::MkDoxy)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#d","title":"d","text":"<ul> <li>debug (mkdoxy::DoxyTagParser::DoxyTagParser, mkdoxy::doxygen::Doxygen, mkdoxy::finder::Finder, mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorSnippets::GeneratorSnippets, mkdoxy::node::Node, mkdoxy::plugin::MkDoxy, mkdoxy::xml_parser::XmlParser)</li> <li>dot (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>doxy_key (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>DEFINE (mkdoxy::constants::Kind)</li> <li>DIR (mkdoxy::constants::Kind)</li> <li>doxygen (mkdoxy::finder::Finder, mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorSnippets::GeneratorSnippets, mkdoxy::plugin::MkDoxy)</li> <li>doxy_arguments (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>derived_classes (mkdoxy::node::DummyNode)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#e","title":"e","text":"<ul> <li>ENUM (mkdoxy::constants::Kind)</li> <li>ENUMVALUE (mkdoxy::constants::Kind)</li> <li>EXAMPLE (mkdoxy::constants::Kind)</li> <li>examples (mkdoxy::doxygen::Doxygen)</li> <li>eol_flag (mkdoxy::markdown::MdRenderer)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#f","title":"f","text":"<ul> <li>FILE (mkdoxy::constants::Kind)</li> <li>FRIEND (mkdoxy::constants::Kind)</li> <li>FUNCTION (mkdoxy::constants::Kind)</li> <li>files (mkdoxy::doxygen::Doxygen)</li> <li>fullDocFiles (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>finder (mkdoxy::generatorSnippets::GeneratorSnippets)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#g","title":"g","text":"<ul> <li>GROUP (mkdoxy::constants::Kind)</li> <li>groups (mkdoxy::doxygen::Doxygen)</li> <li>generatorBase (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorSnippets::GeneratorSnippets, mkdoxy::plugin::MkDoxy)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#i","title":"i","text":"<ul> <li>indent (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>INTERFACE (mkdoxy::constants::Kind)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#k","title":"k","text":"<ul> <li>key (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>kind (mkdoxy::node::DummyNode, mkdoxy::property::Property::Brief, mkdoxy::property::Property::CodeBlock, mkdoxy::property::Property::Definition, mkdoxy::property::Property::Details, mkdoxy::property::Property::Includes, mkdoxy::property::Property::Initializer, mkdoxy::property::Property::Location, mkdoxy::property::Property::Params, mkdoxy::property::Property::Programlisting, mkdoxy::property::Property::Specifiers, mkdoxy::property::Property::TemplateParams, mkdoxy::property::Property::Type, mkdoxy::property::Property::Values)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#l","title":"l","text":"<ul> <li>look_ahead (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>lines (mkdoxy::markdown::MdCodeBlock)</li> <li>level (mkdoxy::markdown::MdHeader)</li> <li>linkPrefix (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#m","title":"m","text":"<ul> <li>markdown_page (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>markdown (mkdoxy::generatorSnippets::GeneratorSnippets)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#n","title":"n","text":"<ul> <li>NAMESPACE (mkdoxy::constants::Kind)</li> <li>NONE (mkdoxy::constants::Kind)</li> <li>name_long (mkdoxy::node::DummyNode)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#o","title":"o","text":"<ul> <li>optional_dot (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>output (mkdoxy::markdown::MdRenderer)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#p","title":"p","text":"<ul> <li>project (mkdoxy::DoxyTagParser::DoxyTagParser)</li> <li>PAGE (mkdoxy::constants::Kind)</li> <li>PROPERTY (mkdoxy::constants::Kind)</li> <li>PRIVATE (mkdoxy::constants::Visibility)</li> <li>PROTECTED (mkdoxy::constants::Visibility)</li> <li>PUBLIC (mkdoxy::constants::Visibility)</li> <li>pages (mkdoxy::doxygen::Doxygen)</li> <li>parser (mkdoxy::doxygen::Doxygen, mkdoxy::property::Property::Brief, mkdoxy::property::Property::CodeBlock, mkdoxy::property::Property::Definition, mkdoxy::property::Property::Details, mkdoxy::property::Property::Includes, mkdoxy::property::Property::Initializer, mkdoxy::property::Property::Location, mkdoxy::property::Property::Params, mkdoxy::property::Property::Programlisting, mkdoxy::property::Property::Specifiers, mkdoxy::property::Property::TemplateParams, mkdoxy::property::Property::Type, mkdoxy::property::Property::Values)</li> <li>page (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>pageUrlPrefix (mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>projects (mkdoxy::generatorSnippets::GeneratorSnippets)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#r","title":"r","text":"<ul> <li>ROOT (mkdoxy::constants::Kind)</li> <li>root (mkdoxy::doxygen::Doxygen)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#s","title":"s","text":"<ul> <li>SIGNAL (mkdoxy::constants::Kind)</li> <li>SLOT (mkdoxy::constants::Kind)</li> <li>STRUCT (mkdoxy::constants::Kind)</li> <li>siteDir (mkdoxy::generatorAuto::GeneratorAuto)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#t","title":"t","text":"<ul> <li>TYPEDEF (mkdoxy::constants::Kind)</li> <li>tempDoxyDir (mkdoxy::generatorAuto::GeneratorAuto)</li> <li>text (mkdoxy::markdown::Code, mkdoxy::markdown::Text)</li> <li>title (mkdoxy::markdown::MdHint)</li> <li>typ (mkdoxy::markdown::MdHint)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#u","title":"u","text":"<ul> <li>UNION (mkdoxy::constants::Kind)</li> <li>useDirectoryUrls (mkdoxy::generatorAuto::GeneratorAuto, mkdoxy::generatorSnippets::GeneratorSnippets)</li> <li>url (mkdoxy::markdown::MdImage, mkdoxy::markdown::MdLink)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#v","title":"v","text":"<ul> <li>VARIABLE (mkdoxy::constants::Kind)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#x","title":"x","text":"<ul> <li>xml (mkdoxy::property::Property::Brief, mkdoxy::property::Property::CodeBlock, mkdoxy::property::Property::Definition, mkdoxy::property::Property::Details, mkdoxy::property::Property::Includes, mkdoxy::property::Property::Initializer, mkdoxy::property::Property::Location, mkdoxy::property::Property::Params, mkdoxy::property::Property::Programlisting, mkdoxy::property::Property::Specifiers, mkdoxy::property::Property::TemplateParams, mkdoxy::property::Property::Type, mkdoxy::property::Property::Values)</li> </ul>"},{"location":"mkdoxyApi/class_member_variables/#_","title":"_","text":"<ul> <li>_brief (mkdoxy::node::Node)</li> <li>_const (mkdoxy::node::Node)</li> <li>_definition (mkdoxy::node::Node)</li> <li>_details (mkdoxy::node::Node)</li> <li>_dirname (mkdoxy::node::Node)</li> <li>_explicit (mkdoxy::node::Node)</li> <li>_includes (mkdoxy::node::Node)</li> <li>_initializer (mkdoxy::node::Node)</li> <li>_inline (mkdoxy::node::Node)</li> <li>_kind (mkdoxy::node::Node)</li> <li>_language (mkdoxy::node::Node)</li> <li>_location (mkdoxy::node::Node)</li> <li>_mutable (mkdoxy::node::Node)</li> <li>_name (mkdoxy::node::Node)</li> <li>_params (mkdoxy::node::Node)</li> <li>_parent (mkdoxy::node::Node)</li> <li>_programlisting (mkdoxy::node::Node)</li> <li>_pure (mkdoxy::node::Node)</li> <li>_refid (mkdoxy::node::Node)</li> <li>_specifiers (mkdoxy::node::Node)</li> <li>_static (mkdoxy::node::Node)</li> <li>_templateparams (mkdoxy::node::Node)</li> <li>_title (mkdoxy::node::Node)</li> <li>_type (mkdoxy::node::Node)</li> <li>_values (mkdoxy::node::Node)</li> <li>_virtual (mkdoxy::node::Node)</li> <li>_visibility (mkdoxy::node::Node)</li> <li>_xml (mkdoxy::node::Node)</li> </ul>"},{"location":"mkdoxyApi/class_member_typedefs/","title":"Class Member Typedefs","text":"<p>Nothing related to Class Member Typedefs found.</p>"},{"location":"mkdoxyApi/class_member_enums/","title":"Class Member Enums","text":"<p>Nothing related to Class Member Enums found.</p>"},{"location":"mkdoxyApi/namespace_members/","title":"Namespace Members","text":""},{"location":"mkdoxyApi/namespace_members/#a","title":"a","text":"<ul> <li>ADDITIONAL_FILES (mkdoxy::generatorAuto)</li> </ul>"},{"location":"mkdoxyApi/namespace_members/#c","title":"c","text":"<ul> <li>check_enabled_markdown_extensions (mkdoxy::utils)</li> <li>contains (mkdoxy::utils)</li> </ul>"},{"location":"mkdoxyApi/namespace_members/#e","title":"e","text":"<ul> <li>escape (mkdoxy::markdown)</li> </ul>"},{"location":"mkdoxyApi/namespace_members/#g","title":"g","text":"<ul> <li>generate_link (mkdoxy::generatorAuto)</li> </ul>"},{"location":"mkdoxyApi/namespace_members/#l","title":"l","text":"<ul> <li>Logger (mkdoxy::doxygen, mkdoxy::doxyrun, mkdoxy::generatorAuto, mkdoxy::generatorBase, mkdoxy::generatorSnippets, mkdoxy::node, mkdoxy::plugin, mkdoxy::utils)</li> <li>LETTERS (mkdoxy::generatorBase)</li> <li>lookahead (mkdoxy::utils)</li> </ul>"},{"location":"mkdoxyApi/namespace_members/#m","title":"m","text":"<ul> <li>merge_two_dicts (mkdoxy::utils)</li> </ul>"},{"location":"mkdoxyApi/namespace_members/#o","title":"o","text":"<ul> <li>OVERLOAD_OPERATORS (mkdoxy::constants)</li> </ul>"},{"location":"mkdoxyApi/namespace_members/#p","title":"p","text":"<ul> <li>parseTemplateFile (mkdoxy::utils)</li> </ul>"},{"location":"mkdoxyApi/namespace_members/#r","title":"r","text":"<ul> <li>regexIncorrect (mkdoxy::generatorSnippets)</li> <li>regexLong (mkdoxy::generatorSnippets)</li> <li>regexShort (mkdoxy::generatorSnippets)</li> <li>recursive_find (mkdoxy::utils)</li> <li>recursive_find_with_parent (mkdoxy::utils)</li> <li>regex (mkdoxy::utils)</li> </ul>"},{"location":"mkdoxyApi/namespace_members/#s","title":"s","text":"<ul> <li>str (mkdoxy::plugin)</li> <li>split_safe (mkdoxy::utils)</li> <li>SIMPLE_SECTIONS (mkdoxy::xml_parser)</li> </ul>"},{"location":"mkdoxyApi/namespace_member_functions/","title":"Namespace Member Functions","text":""},{"location":"mkdoxyApi/namespace_member_functions/#c","title":"c","text":"<ul> <li>check_enabled_markdown_extensions (mkdoxy::utils)</li> <li>contains (mkdoxy::utils)</li> </ul>"},{"location":"mkdoxyApi/namespace_member_functions/#e","title":"e","text":"<ul> <li>escape (mkdoxy::markdown)</li> </ul>"},{"location":"mkdoxyApi/namespace_member_functions/#g","title":"g","text":"<ul> <li>generate_link (mkdoxy::generatorAuto)</li> </ul>"},{"location":"mkdoxyApi/namespace_member_functions/#l","title":"l","text":"<ul> <li>lookahead (mkdoxy::utils)</li> </ul>"},{"location":"mkdoxyApi/namespace_member_functions/#m","title":"m","text":"<ul> <li>merge_two_dicts (mkdoxy::utils)</li> </ul>"},{"location":"mkdoxyApi/namespace_member_functions/#p","title":"p","text":"<ul> <li>parseTemplateFile (mkdoxy::utils)</li> </ul>"},{"location":"mkdoxyApi/namespace_member_functions/#r","title":"r","text":"<ul> <li>recursive_find (mkdoxy::utils)</li> <li>recursive_find_with_parent (mkdoxy::utils)</li> </ul>"},{"location":"mkdoxyApi/namespace_member_functions/#s","title":"s","text":"<ul> <li>split_safe (mkdoxy::utils)</li> </ul>"},{"location":"mkdoxyApi/namespace_member_variables/","title":"Namespace Member Variables","text":""},{"location":"mkdoxyApi/namespace_member_variables/#a","title":"a","text":"<ul> <li>ADDITIONAL_FILES (mkdoxy::generatorAuto)</li> </ul>"},{"location":"mkdoxyApi/namespace_member_variables/#l","title":"l","text":"<ul> <li>Logger (mkdoxy::doxygen, mkdoxy::doxyrun, mkdoxy::generatorAuto, mkdoxy::generatorBase, mkdoxy::generatorSnippets, mkdoxy::node, mkdoxy::plugin, mkdoxy::utils)</li> <li>LETTERS (mkdoxy::generatorBase)</li> </ul>"},{"location":"mkdoxyApi/namespace_member_variables/#o","title":"o","text":"<ul> <li>OVERLOAD_OPERATORS (mkdoxy::constants)</li> </ul>"},{"location":"mkdoxyApi/namespace_member_variables/#r","title":"r","text":"<ul> <li>regexIncorrect (mkdoxy::generatorSnippets)</li> <li>regexLong (mkdoxy::generatorSnippets)</li> <li>regexShort (mkdoxy::generatorSnippets)</li> <li>regex (mkdoxy::utils)</li> </ul>"},{"location":"mkdoxyApi/namespace_member_variables/#s","title":"s","text":"<ul> <li>str (mkdoxy::plugin)</li> <li>SIMPLE_SECTIONS (mkdoxy::xml_parser)</li> </ul>"},{"location":"mkdoxyApi/namespace_member_typedefs/","title":"Namespace Member Typedefs","text":"<p>Nothing related to Namespace Member Typedefs found.</p>"},{"location":"mkdoxyApi/namespace_member_enums/","title":"Namespace Member Enums","text":"<p>Nothing related to Namespace Member Enums found.</p>"},{"location":"mkdoxyApi/functions/","title":"Functions","text":"<p>Nothing related to Functions found.</p>"},{"location":"mkdoxyApi/macros/","title":"Macros","text":"<p>Nothing related to Macros found.</p>"},{"location":"mkdoxyApi/variables/","title":"Variables","text":"<p>Nothing related to Variables found.</p>"},{"location":"mkdoxyApi/links/","title":"Links","text":"<ul> <li>Related Pages</li> <li>Modules</li> <li>Class List</li> <li>Namespace ListNamespace List</li> <li>Namespace Members</li> <li>Namespace Member Functions</li> <li>Namespace Member Variables</li> <li>Namespace Member Typedefs</li> <li>Namespace Member Enumerations</li> <li>Class Index</li> <li>Class Hierarchy</li> <li>Class Members</li> <li>Class Member Functions</li> <li>Class Member Variables</li> <li>Class Member Typedefs</li> <li>Class Member Enumerations</li> <li>Files</li> <li>File Variables</li> <li>File Functions</li> <li>File Macros</li> </ul>"},{"location":"animal/annotated/","title":"Class List","text":"<p>Here are the classes, structs, unions and interfaces with brief descriptions:</p> <ul> <li>struct BirdOrRodent </li> <li>class CuteChinchilla </li> <li>namespace example <ul> <li>class Animal Base class for all animals from which Bird derives. <ul> <li>struct Result Some random inner class of Animal . </li> </ul> </li> <li>interface AnimalInterface </li> <li>class Bird </li> <li>class CustomException </li> <li>class NumericException </li> <li>class SpecialBird </li> <li>namespace inner_namespace <ul> <li>class Vector </li> </ul> </li> </ul> </li> <li>namespace std </li> </ul>"},{"location":"animal/files/","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p> <ul> <li>dir demo-projects <ul> <li>dir animal <ul> <li>file animal.h </li> <li>file animal_interface.h </li> <li>file bird.h </li> <li>file chinchilla.h </li> <li>file config.h This is a config file. </li> <li>dir examples <ul> <li>dir bird <ul> <li>file main.cpp </li> </ul> </li> </ul> </li> <li>dir utils <ul> <li>file exception.h </li> </ul> </li> <li>file example.h </li> <li>file special_bird.h </li> </ul> </li> </ul> </li> </ul>"},{"location":"animal/structBirdOrRodent/","title":"Struct BirdOrRodent","text":"<p>ClassList &gt; BirdOrRodent</p>"},{"location":"animal/structBirdOrRodent/#public-attributes","title":"Public Attributes","text":"Type Name union BirdOrRodent::@0 @1 int legs double wingspan"},{"location":"animal/structBirdOrRodent/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"animal/structBirdOrRodent/#variable-1","title":"variable @1","text":"<pre><code>union BirdOrRodent::@0 BirdOrRodent::@1;\n</code></pre>"},{"location":"animal/structBirdOrRodent/#variable-legs","title":"variable legs","text":"<pre><code>int BirdOrRodent::legs;\n</code></pre>"},{"location":"animal/structBirdOrRodent/#variable-wingspan","title":"variable wingspan","text":"<pre><code>double BirdOrRodent::wingspan;\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/config.h</code></p>"},{"location":"animal/classCuteChinchilla/","title":"Class CuteChinchilla","text":"<p>ClassList &gt; CuteChinchilla</p> <p>Inherits the following classes: QObject</p>"},{"location":"animal/classCuteChinchilla/#public-types","title":"Public Types","text":"Type Name enum Species"},{"location":"animal/classCuteChinchilla/#public-slots","title":"Public Slots","text":"Type Name slot void setWeight (int weight) Please weigh your pet regularly and set the new weight here."},{"location":"animal/classCuteChinchilla/#public-signals","title":"Public Signals","text":"Type Name signal void weightChanged (int newWeight) emitted when the weight of the Chinchilla changed."},{"location":"animal/classCuteChinchilla/#public-functions","title":"Public Functions","text":"Type Name CuteChinchilla ()  int weight () const"},{"location":"animal/classCuteChinchilla/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"animal/classCuteChinchilla/#enum-species","title":"enum Species","text":"<pre><code>enum CuteChinchilla::Species {\nChinchillaChinchilla,\nChinchillaLanigera\n};\n</code></pre>"},{"location":"animal/classCuteChinchilla/#public-slots-documentation","title":"Public Slots Documentation","text":""},{"location":"animal/classCuteChinchilla/#slot-setweight","title":"slot setWeight","text":"<pre><code>void CuteChinchilla::setWeight;\n</code></pre>"},{"location":"animal/classCuteChinchilla/#public-signals-documentation","title":"Public Signals Documentation","text":""},{"location":"animal/classCuteChinchilla/#signal-weightchanged","title":"signal weightChanged","text":"<pre><code>void CuteChinchilla::weightChanged;\n</code></pre>"},{"location":"animal/classCuteChinchilla/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/classCuteChinchilla/#function-cutechinchilla","title":"function CuteChinchilla","text":"<pre><code>inline CuteChinchilla::CuteChinchilla () </code></pre>"},{"location":"animal/classCuteChinchilla/#function-weight","title":"function weight","text":"<pre><code>inline int CuteChinchilla::weight () const\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/chinchilla.h</code></p>"},{"location":"animal/namespaceexample/","title":"Namespace example","text":"<p>Namespace List &gt; example</p>"},{"location":"animal/namespaceexample/#namespaces","title":"Namespaces","text":"Type Name namespace inner_namespace"},{"location":"animal/namespaceexample/#classes","title":"Classes","text":"Type Name class Animal Base class for all animals from which Bird derives. interface AnimalInterface class Bird class CustomException class NumericException class SpecialBird"},{"location":"animal/namespaceexample/#public-types","title":"Public Types","text":"Type Name typedef std::function&lt; void *(Animal *)&gt; Callback Animal callback function definition. enum CallbackType Different types of an Animal callback events."},{"location":"animal/namespaceexample/#public-functions","title":"Public Functions","text":"Type Name void some_namespace_function (Animal * animal) Some random namespace function that modifies Animal ."},{"location":"animal/namespaceexample/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"animal/namespaceexample/#typedef-callback","title":"typedef Callback","text":"<pre><code>typedef std::function&lt;void*(Animal*)&gt; example::Callback;\n</code></pre>"},{"location":"animal/namespaceexample/#enum-callbacktype","title":"enum CallbackType","text":"<pre><code>enum example::CallbackType {\nNONE = 0,\nEAT,\nSLEEP,\nATTACK\n};\n</code></pre>"},{"location":"animal/namespaceexample/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/namespaceexample/#function-some_namespace_function","title":"function some_namespace_function","text":"<p>Some random namespace function that modifies Animal . <pre><code>void example::some_namespace_function (\nAnimal * animal\n) </code></pre></p> <p>See also: Animal </p> <p>Parameters:</p> <ul> <li><code>animal</code> The pointer to the animal instance </li> </ul> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/animal.h</code></p>"},{"location":"animal/classexample_1_1Animal/","title":"Class example::Animal","text":"<p>ClassList &gt; example &gt; Animal</p> <p>Base class for all animals from which Bird derives.More...</p> <ul> <li><code>#include &lt;animal.h&gt;</code></li> </ul> <p>Inherits the following classes: example::AnimalInterface</p> <p>Inherited by the following classes: example::Bird</p>"},{"location":"animal/classexample_1_1Animal/#classes","title":"Classes","text":"Type Name struct Result Some random inner class of Animal ."},{"location":"animal/classexample_1_1Animal/#public-types","title":"Public Types","text":"Type Name typedef std::pair&lt; Animal *, Animal * &gt; Parents enum Type The 6 classes of animal kingdom."},{"location":"animal/classexample_1_1Animal/#public-functions","title":"Public Functions","text":"Type Name Animal (Type type, const std::string &amp; name, Animal * mother=nullptr, Animal * father=nullptr) The main constructor. Animal (const Animal &amp; other) = delete Animal (Animal &amp;&amp; animal) noexcept const std::string &amp; get_name () constGet the name of the animal. virtual int get_num_of_eyes () override constReturns the number of eyes. virtual int get_num_of_limbs () override constReturns the number of limbs. Parents get_parents () const virtual bool has_tail () override constReturns true if the animal has a tail. virtual void make_sound () = 0 virtual void move ()  operator bool () constReturns true if this is an valid animal. Animal &amp; operator= (const Animal &amp; other) = deleteDeleted copy operator. Animal &amp; operator= (Animal &amp;&amp; other) noexceptMove operator. void some_inline_member_function (Animal * animal) Lorem Ipsum. void swap (Animal &amp; other) noexcept virtual ~Animal () = default"},{"location":"animal/classexample_1_1Animal/#public-functions-inherited-from-exampleanimalinterface","title":"Public Functions inherited from example::AnimalInterface","text":"<p>See example::AnimalInterface</p> Type Name virtual int get_num_of_eyes () const = 0Returns the number of eyes. virtual int get_num_of_limbs () const = 0Returns the number of limbs. virtual bool has_tail () const = 0Returns true if the animal has a tail."},{"location":"animal/classexample_1_1Animal/#public-static-functions","title":"Public Static Functions","text":"Type Name Animal * find_child_by_name (Animal * parent)  Animal * find_parent_by_name (Animal * child)"},{"location":"animal/classexample_1_1Animal/#protected-attributes","title":"Protected Attributes","text":"Type Name Animal * father The pointer to the father. Animal * mother The pointer to the mother. std::string name"},{"location":"animal/classexample_1_1Animal/#detailed-description","title":"Detailed Description","text":"<p>Lorem Ipsum Donor. Some Random link with bold and italics And the following is a <code>typewritter</code> font.</p> <p>Example code:</p> <p>Animal animal = Animal(\"Hello World\", nullptr, nullptr); std::cout &lt;&lt; animal.get_name() &lt;&lt; std::endl;</p> <p>See also: Bird </p> <p>Bug</p> <p>Some random bug </p> <p>Note:</p> <p>Some random note </p> <p>Warning:</p> <p>Some random warning </p> <p>Test</p> <p>Some random test description </p> <p>Todo</p> <p>Some random todo </p> <p>Template parameters:</p> <ul> <li><code>T</code> Some random template paramater description which actually does not exist in the code! </li> </ul> <p>Precondition:</p> <p>First initialize the system. </p> <p>Date:</p> <p>2017-2018 </p> <p>Author:</p> <p>Matus Novak </p> <p>Author:</p> <p>Hello World </p>"},{"location":"animal/classexample_1_1Animal/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"animal/classexample_1_1Animal/#typedef-parents","title":"typedef Parents","text":"<pre><code>typedef std::pair&lt;Animal*, Animal*&gt; example::Animal::Parents;\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#enum-type","title":"enum Type","text":"<p>The 6 classes of animal kingdom. <pre><code>enum example::Animal::Type {\nNONE = 0,\nINSECT = 1,\nAMPHIBIAN = 2,\nBIRD = 3,\nFISH = 4,\nREPTILE = 5,\nMAMMAL = 6\n};\n</code></pre></p> <p>Lorem Ipsum Donor. </p>"},{"location":"animal/classexample_1_1Animal/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/classexample_1_1Animal/#function-animal-13","title":"function Animal [1/3]","text":"<p>The main constructor. <pre><code>example::Animal::Animal (\nType type,\nconst std::string &amp; name,\nAnimal * mother=nullptr,\nAnimal * father=nullptr\n) </code></pre></p> <p>Use this constructor to allocate a new instance of Animal </p> <p>Parameters:</p> <ul> <li><code>type</code> The type of the animal that matches Animal::Type </li> <li><code>name</code> Any name to associate the animal with </li> </ul> <p>Exception:</p> <ul> <li>CustomException If either only mother or father is assigned </li> </ul>"},{"location":"animal/classexample_1_1Animal/#function-animal-23","title":"function Animal [2/3]","text":"<pre><code>example::Animal::Animal (\nconst Animal &amp; other\n) = delete\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#function-animal-33","title":"function Animal [3/3]","text":"<pre><code>example::Animal::Animal (\nAnimal &amp;&amp; animal\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#function-get_name","title":"function get_name","text":"<p>Get the name of the animal. <pre><code>inline const std::string &amp; example::Animal::get_name () const\n</code></pre></p> <p>Returns:</p> <p>A constant reference to the name </p>"},{"location":"animal/classexample_1_1Animal/#function-get_num_of_eyes","title":"function get_num_of_eyes","text":"<p>Returns the number of eyes. <pre><code>virtual int example::Animal::get_num_of_eyes () override const\n</code></pre></p> <p>See also: get_num_of_limbs, get_num_of_eyes </p> <p>Implements example::AnimalInterface::get_num_of_eyes</p>"},{"location":"animal/classexample_1_1Animal/#function-get_num_of_limbs","title":"function get_num_of_limbs","text":"<p>Returns the number of limbs. <pre><code>virtual int example::Animal::get_num_of_limbs () override const\n</code></pre></p> <p>See also: get_num_of_eyes, get_num_of_limbs </p> <p>Implements example::AnimalInterface::get_num_of_limbs</p>"},{"location":"animal/classexample_1_1Animal/#function-get_parents","title":"function get_parents","text":"<pre><code>inline Parents example::Animal::get_parents () const\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#function-has_tail","title":"function has_tail","text":"<p>Returns true if the animal has a tail. <pre><code>virtual bool example::Animal::has_tail () override const\n</code></pre></p> <p>See also: get_num_of_limbs, get_num_of_eyes </p> <p>Return value:</p> <ul> <li><code>true</code> Does have a tail </li> <li><code>false</code> Does not have a tail </li> </ul> <p>Implements example::AnimalInterface::has_tail</p>"},{"location":"animal/classexample_1_1Animal/#function-make_sound","title":"function make_sound","text":"<pre><code>virtual void example::Animal::make_sound () = 0\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#function-move","title":"function move","text":"<pre><code>virtual void example::Animal::move () </code></pre>"},{"location":"animal/classexample_1_1Animal/#function-operator-bool","title":"function operator bool","text":"<p>Returns true if this is an valid animal. <pre><code>example::Animal::operator bool () const\n</code></pre></p> <p>Lorem Ipsum returns true </p>"},{"location":"animal/classexample_1_1Animal/#function-operator","title":"function operator=","text":"<pre><code>Animal &amp; example::Animal::operator= (\nconst Animal &amp; other\n) = delete\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#function-operator_1","title":"function operator=","text":"<pre><code>Animal &amp; example::Animal::operator= (\nAnimal &amp;&amp; other\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#function-some_inline_member_function","title":"function some_inline_member_function","text":"<p>Lorem Ipsum. <pre><code>inline void example::Animal::some_inline_member_function (\nAnimal * animal\n) </code></pre></p> <p>See also: Animal </p> <p>Parameters:</p> <ul> <li><code>animal</code> The pointer to the animal instance</li> </ul> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>"},{"location":"animal/classexample_1_1Animal/#implementation","title":"Implementation:","text":""},{"location":"animal/classexample_1_1Animal/#function-swap","title":"function swap","text":"<pre><code>void example::Animal::swap (\nAnimal &amp; other\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#function-animal","title":"function ~Animal","text":"<pre><code>virtual example::Animal::~Animal () = default\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"animal/classexample_1_1Animal/#function-find_child_by_name","title":"function find_child_by_name","text":"<pre><code>static Animal * example::Animal::find_child_by_name (\nAnimal * parent\n) </code></pre>"},{"location":"animal/classexample_1_1Animal/#function-find_parent_by_name","title":"function find_parent_by_name","text":"<pre><code>static Animal * example::Animal::find_parent_by_name (\nAnimal * child\n) </code></pre>"},{"location":"animal/classexample_1_1Animal/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"animal/classexample_1_1Animal/#variable-father","title":"variable father","text":"<p>The pointer to the father. <pre><code>Animal* example::Animal::father;\n</code></pre></p> <p>Can be null! </p>"},{"location":"animal/classexample_1_1Animal/#variable-mother","title":"variable mother","text":"<p>The pointer to the mother. <pre><code>Animal* example::Animal::mother;\n</code></pre></p> <p>Can be null! </p>"},{"location":"animal/classexample_1_1Animal/#variable-name","title":"variable name","text":"<pre><code>std::string example::Animal::name;\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#friends-documentation","title":"Friends Documentation","text":""},{"location":"animal/classexample_1_1Animal/#friend-some_global_function","title":"friend some_global_function","text":"<p>Some random global function that modifies Animal . <pre><code>void example::Animal::some_global_function (\nAnimal * animal\n) </code></pre></p> <p>See also: Animal </p> <p>Parameters:</p> <ul> <li><code>animal</code> The pointer to the animal instance </li> </ul> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/animal.h</code></p>"},{"location":"animal/structexample_1_1Animal_1_1Result/","title":"Struct example::Animal::Result","text":"<p>ClassList &gt; example &gt; Animal &gt; Result</p> <p>Some random inner class of Animal .</p> <ul> <li><code>#include &lt;animal.h&gt;</code></li> </ul>"},{"location":"animal/structexample_1_1Animal_1_1Result/#public-attributes","title":"Public Attributes","text":"Type Name const Animal * father   = = nullptr const Animal * mother   = = nullptr const std::string name const Type type   = = Type::NONE"},{"location":"animal/structexample_1_1Animal_1_1Result/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"animal/structexample_1_1Animal_1_1Result/#variable-father","title":"variable father","text":"<pre><code>const Animal* example::Animal::Result::father;\n</code></pre>"},{"location":"animal/structexample_1_1Animal_1_1Result/#variable-mother","title":"variable mother","text":"<pre><code>const Animal* example::Animal::Result::mother;\n</code></pre>"},{"location":"animal/structexample_1_1Animal_1_1Result/#variable-name","title":"variable name","text":"<pre><code>const std::string example::Animal::Result::name;\n</code></pre>"},{"location":"animal/structexample_1_1Animal_1_1Result/#variable-type","title":"variable type","text":"<pre><code>const Type example::Animal::Result::type;\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/animal.h</code></p>"},{"location":"animal/classexample_1_1AnimalInterface/","title":"Interface example::AnimalInterface","text":"<p>ClassList &gt; example &gt; AnimalInterface</p> <p>Inherited by the following classes: example::Animal</p>"},{"location":"animal/classexample_1_1AnimalInterface/#public-functions","title":"Public Functions","text":"Type Name virtual int get_num_of_eyes () const = 0Returns the number of eyes. virtual int get_num_of_limbs () const = 0Returns the number of limbs. virtual bool has_tail () const = 0Returns true if the animal has a tail."},{"location":"animal/classexample_1_1AnimalInterface/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/classexample_1_1AnimalInterface/#function-get_num_of_eyes","title":"function get_num_of_eyes","text":"<p>Returns the number of eyes. <pre><code>virtual int example::AnimalInterface::get_num_of_eyes () const = 0\n</code></pre></p> <p>See also: get_num_of_limbs </p>"},{"location":"animal/classexample_1_1AnimalInterface/#function-get_num_of_limbs","title":"function get_num_of_limbs","text":"<p>Returns the number of limbs. <pre><code>virtual int example::AnimalInterface::get_num_of_limbs () const = 0\n</code></pre></p> <p>See also: get_num_of_eyes </p>"},{"location":"animal/classexample_1_1AnimalInterface/#function-has_tail","title":"function has_tail","text":"<p>Returns true if the animal has a tail. <pre><code>virtual bool example::AnimalInterface::has_tail () const = 0\n</code></pre></p> <p>See also: get_num_of_limbs </p> <p>Return value:</p> <ul> <li><code>true</code> Does have a tail </li> <li><code>false</code> Does not have a tail </li> </ul> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/animal_interface.h</code></p>"},{"location":"animal/classexample_1_1Bird/","title":"Class example::Bird","text":"<p>ClassList &gt; example &gt; Bird</p> <p>Inherits the following classes: example::Animal</p> <p>Inherited by the following classes: example::SpecialBird</p>"},{"location":"animal/classexample_1_1Bird/#public-types-inherited-from-exampleanimal","title":"Public Types inherited from example::Animal","text":"<p>See example::Animal</p> Type Name typedef std::pair&lt; Animal *, Animal * &gt; Parents enum Type The 6 classes of animal kingdom."},{"location":"animal/classexample_1_1Bird/#public-functions","title":"Public Functions","text":"Type Name Bird (const std::string &amp; name, Bird * mother=nullptr, Bird * father=nullptr)  Bird (const Bird &amp; other) = delete Bird (Bird &amp;&amp; Bird) noexcept virtual void make_sound () override virtual void move () override Bird &amp; operator= (const Bird &amp; other) = deleteDeleted copy operator. Bird &amp; operator= (Bird &amp;&amp; other) noexceptMove operator. void swap (Bird &amp; other) noexcept ~Bird () = default"},{"location":"animal/classexample_1_1Bird/#public-functions-inherited-from-exampleanimal","title":"Public Functions inherited from example::Animal","text":"<p>See example::Animal</p> Type Name Animal (Type type, const std::string &amp; name, Animal * mother=nullptr, Animal * father=nullptr) The main constructor. Animal (const Animal &amp; other) = delete Animal (Animal &amp;&amp; animal) noexcept const std::string &amp; get_name () constGet the name of the animal. virtual int get_num_of_eyes () override constReturns the number of eyes. virtual int get_num_of_limbs () override constReturns the number of limbs. Parents get_parents () const virtual bool has_tail () override constReturns true if the animal has a tail. virtual void make_sound () = 0 virtual void move ()  operator bool () constReturns true if this is an valid animal. Animal &amp; operator= (const Animal &amp; other) = deleteDeleted copy operator. Animal &amp; operator= (Animal &amp;&amp; other) noexceptMove operator. void some_inline_member_function (Animal * animal) Lorem Ipsum. void swap (Animal &amp; other) noexcept virtual ~Animal () = default"},{"location":"animal/classexample_1_1Bird/#public-functions-inherited-from-exampleanimalinterface","title":"Public Functions inherited from example::AnimalInterface","text":"<p>See example::AnimalInterface</p> Type Name virtual int get_num_of_eyes () const = 0Returns the number of eyes. virtual int get_num_of_limbs () const = 0Returns the number of limbs. virtual bool has_tail () const = 0Returns true if the animal has a tail."},{"location":"animal/classexample_1_1Bird/#public-static-functions-inherited-from-exampleanimal","title":"Public Static Functions inherited from example::Animal","text":"<p>See example::Animal</p> Type Name Animal * find_child_by_name (Animal * parent)  Animal * find_parent_by_name (Animal * child)"},{"location":"animal/classexample_1_1Bird/#protected-attributes-inherited-from-exampleanimal","title":"Protected Attributes inherited from example::Animal","text":"<p>See example::Animal</p> Type Name Animal * father The pointer to the father. Animal * mother The pointer to the mother. std::string name"},{"location":"animal/classexample_1_1Bird/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/classexample_1_1Bird/#function-bird-13","title":"function Bird [1/3]","text":"<pre><code>example::Bird::Bird (\nconst std::string &amp; name,\nBird * mother=nullptr,\nBird * father=nullptr\n) </code></pre>"},{"location":"animal/classexample_1_1Bird/#function-bird-23","title":"function Bird [2/3]","text":"<pre><code>example::Bird::Bird (\nconst Bird &amp; other\n) = delete\n</code></pre>"},{"location":"animal/classexample_1_1Bird/#function-bird-33","title":"function Bird [3/3]","text":"<pre><code>example::Bird::Bird (\nBird &amp;&amp; Bird\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1Bird/#function-make_sound","title":"function make_sound","text":"<pre><code>virtual void example::Bird::make_sound () override\n</code></pre> <p>Implements example::Animal::make_sound</p>"},{"location":"animal/classexample_1_1Bird/#function-move","title":"function move","text":"<pre><code>virtual void example::Bird::move () override\n</code></pre> <p>Implements example::Animal::move</p>"},{"location":"animal/classexample_1_1Bird/#function-operator","title":"function operator=","text":"<pre><code>Bird &amp; example::Bird::operator= (\nconst Bird &amp; other\n) = delete\n</code></pre>"},{"location":"animal/classexample_1_1Bird/#function-operator_1","title":"function operator=","text":"<pre><code>Bird &amp; example::Bird::operator= (\nBird &amp;&amp; other\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1Bird/#function-swap","title":"function swap","text":"<pre><code>void example::Bird::swap (\nBird &amp; other\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1Bird/#function-bird","title":"function ~Bird","text":"<pre><code>example::Bird::~Bird () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/bird.h</code></p>"},{"location":"animal/classexample_1_1CustomException/","title":"Class example::CustomException","text":"<p>ClassList &gt; example &gt; CustomException</p> <p>Inherits the following classes: std::exception</p>"},{"location":"animal/classexample_1_1CustomException/#public-functions","title":"Public Functions","text":"Type Name CustomException (const std::string &amp; msg)  virtual const char * what () const"},{"location":"animal/classexample_1_1CustomException/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/classexample_1_1CustomException/#function-customexception","title":"function CustomException","text":"<pre><code>inline example::CustomException::CustomException (\nconst std::string &amp; msg\n) </code></pre>"},{"location":"animal/classexample_1_1CustomException/#function-what","title":"function what","text":"<pre><code>inline virtual const char * example::CustomException::what () const\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/utils/exception.h</code></p>"},{"location":"animal/classexample_1_1NumericException/","title":"Class example::NumericException","text":"<p>ClassList &gt; example &gt; NumericException</p> <p>Inherits the following classes: std::exception</p>"},{"location":"animal/classexample_1_1NumericException/#public-functions","title":"Public Functions","text":"Type Name NumericException (const std::string &amp; msg)  virtual const char * what () const"},{"location":"animal/classexample_1_1NumericException/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/classexample_1_1NumericException/#function-numericexception","title":"function NumericException","text":"<pre><code>inline example::NumericException::NumericException (\nconst std::string &amp; msg\n) </code></pre>"},{"location":"animal/classexample_1_1NumericException/#function-what","title":"function what","text":"<pre><code>inline virtual const char * example::NumericException::what () const\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/utils/exception.h</code></p>"},{"location":"animal/classexample_1_1SpecialBird/","title":"Class example::SpecialBird","text":"<p>ClassList &gt; example &gt; SpecialBird</p> <p>Inherits the following classes: example::Bird</p>"},{"location":"animal/classexample_1_1SpecialBird/#public-types-inherited-from-exampleanimal","title":"Public Types inherited from example::Animal","text":"<p>See example::Animal</p> Type Name typedef std::pair&lt; Animal *, Animal * &gt; Parents enum Type The 6 classes of animal kingdom."},{"location":"animal/classexample_1_1SpecialBird/#public-functions","title":"Public Functions","text":"Type Name SpecialBird (const std::string &amp; name, SpecialBird * mother=nullptr, SpecialBird * father=nullptr)  SpecialBird (const SpecialBird &amp; other) = delete SpecialBird (SpecialBird &amp;&amp; SpecialBird) noexcept void do_something_special ()  SpecialBird &amp; operator= (const SpecialBird &amp; other) = delete SpecialBird &amp; operator= (SpecialBird &amp;&amp; other) noexcept void swap (SpecialBird &amp; other) noexcept ~SpecialBird () = default"},{"location":"animal/classexample_1_1SpecialBird/#public-functions-inherited-from-examplebird","title":"Public Functions inherited from example::Bird","text":"<p>See example::Bird</p> Type Name Bird (const std::string &amp; name, Bird * mother=nullptr, Bird * father=nullptr)  Bird (const Bird &amp; other) = delete Bird (Bird &amp;&amp; Bird) noexcept virtual void make_sound () override virtual void move () override Bird &amp; operator= (const Bird &amp; other) = deleteDeleted copy operator. Bird &amp; operator= (Bird &amp;&amp; other) noexceptMove operator. void swap (Bird &amp; other) noexcept ~Bird () = default"},{"location":"animal/classexample_1_1SpecialBird/#public-functions-inherited-from-exampleanimal","title":"Public Functions inherited from example::Animal","text":"<p>See example::Animal</p> Type Name Animal (Type type, const std::string &amp; name, Animal * mother=nullptr, Animal * father=nullptr) The main constructor. Animal (const Animal &amp; other) = delete Animal (Animal &amp;&amp; animal) noexcept const std::string &amp; get_name () constGet the name of the animal. virtual int get_num_of_eyes () override constReturns the number of eyes. virtual int get_num_of_limbs () override constReturns the number of limbs. Parents get_parents () const virtual bool has_tail () override constReturns true if the animal has a tail. virtual void make_sound () = 0 virtual void move ()  operator bool () constReturns true if this is an valid animal. Animal &amp; operator= (const Animal &amp; other) = deleteDeleted copy operator. Animal &amp; operator= (Animal &amp;&amp; other) noexceptMove operator. void some_inline_member_function (Animal * animal) Lorem Ipsum. void swap (Animal &amp; other) noexcept virtual ~Animal () = default"},{"location":"animal/classexample_1_1SpecialBird/#public-functions-inherited-from-exampleanimalinterface","title":"Public Functions inherited from example::AnimalInterface","text":"<p>See example::AnimalInterface</p> Type Name virtual int get_num_of_eyes () const = 0Returns the number of eyes. virtual int get_num_of_limbs () const = 0Returns the number of limbs. virtual bool has_tail () const = 0Returns true if the animal has a tail."},{"location":"animal/classexample_1_1SpecialBird/#public-static-functions-inherited-from-exampleanimal","title":"Public Static Functions inherited from example::Animal","text":"<p>See example::Animal</p> Type Name Animal * find_child_by_name (Animal * parent)  Animal * find_parent_by_name (Animal * child)"},{"location":"animal/classexample_1_1SpecialBird/#protected-attributes-inherited-from-exampleanimal","title":"Protected Attributes inherited from example::Animal","text":"<p>See example::Animal</p> Type Name Animal * father The pointer to the father. Animal * mother The pointer to the mother. std::string name"},{"location":"animal/classexample_1_1SpecialBird/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/classexample_1_1SpecialBird/#function-specialbird-13","title":"function SpecialBird [1/3]","text":"<pre><code>example::SpecialBird::SpecialBird (\nconst std::string &amp; name,\nSpecialBird * mother=nullptr,\nSpecialBird * father=nullptr\n) </code></pre>"},{"location":"animal/classexample_1_1SpecialBird/#function-specialbird-23","title":"function SpecialBird [2/3]","text":"<pre><code>example::SpecialBird::SpecialBird (\nconst SpecialBird &amp; other\n) = delete\n</code></pre>"},{"location":"animal/classexample_1_1SpecialBird/#function-specialbird-33","title":"function SpecialBird [3/3]","text":"<pre><code>example::SpecialBird::SpecialBird (\nSpecialBird &amp;&amp; SpecialBird\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1SpecialBird/#function-do_something_special","title":"function do_something_special","text":"<pre><code>void example::SpecialBird::do_something_special () </code></pre>"},{"location":"animal/classexample_1_1SpecialBird/#function-operator","title":"function operator=","text":"<pre><code>SpecialBird &amp; example::SpecialBird::operator= (\nconst SpecialBird &amp; other\n) = delete\n</code></pre>"},{"location":"animal/classexample_1_1SpecialBird/#function-operator_1","title":"function operator=","text":"<pre><code>SpecialBird &amp; example::SpecialBird::operator= (\nSpecialBird &amp;&amp; other\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1SpecialBird/#function-swap","title":"function swap","text":"<pre><code>void example::SpecialBird::swap (\nSpecialBird &amp; other\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1SpecialBird/#function-specialbird","title":"function ~SpecialBird","text":"<pre><code>example::SpecialBird::~SpecialBird () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/special_bird.h</code></p>"},{"location":"animal/namespaceexample_1_1inner__namespace/","title":"Namespace example::inner_namespace","text":"<p>Namespace List &gt; example &gt; inner_namespace</p>"},{"location":"animal/namespaceexample_1_1inner__namespace/#classes","title":"Classes","text":"Type Name class Vector <p>The documentation for this class was generated from the following file <code>demo-projects/animal/animal.h</code></p>"},{"location":"animal/classexample_1_1inner__namespace_1_1Vector/","title":"Class example::inner_namespace::Vector","text":"<p>ClassList &gt; example &gt; inner_namespace &gt; Vector</p> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/animal.h</code></p>"},{"location":"animal/namespacestd/","title":"Namespace std","text":"<p>Namespace List &gt; std</p> <p>The documentation for this class was generated from the following file <code>[generated]</code></p>"},{"location":"animal/group__organism/","title":"Group organism","text":"<p>Modules &gt; organism</p> <p>This is a brief description to the organism group. More...</p>"},{"location":"animal/group__organism/#modules","title":"Modules","text":"Type Name module An animal group example This is a brief description to the animals group."},{"location":"animal/group__organism/#detailed-description","title":"Detailed Description","text":"<p>Some detailed description here </p>"},{"location":"animal/group__animals/","title":"Group animals","text":"<p>Modules &gt; animals</p> <p>This is a brief description to the animals group. More...</p>"},{"location":"animal/group__animals/#files","title":"Files","text":"Type Name file config.h This is a config file."},{"location":"animal/group__animals/#classes","title":"Classes","text":"Type Name struct BirdOrRodent class example::Animal Base class for all animals from which Bird derives. interface example::AnimalInterface class example::Bird class example::CustomException class example::NumericException class example::SpecialBird"},{"location":"animal/group__animals/#public-types","title":"Public Types","text":"Type Name enum example::Animal::Type The 6 classes of animal kingdom."},{"location":"animal/group__animals/#public-functions","title":"Public Functions","text":"Type Name void some_global_function (example::Animal * animal) Some random global function that modifies Animal. void example::some_namespace_function (Animal * animal) Some random namespace function that modifies Animal ."},{"location":"animal/group__animals/#macros","title":"Macros","text":"Type Name define CONFIG_HELLO  (123) define CONFIG_WORLD  (\"abx\") define PI  3.14159265358979323846 define PRINT_PRETTY (MSG, ...) printf(MSG, __VA_ARGS__)"},{"location":"animal/group__animals/#detailed-description","title":"Detailed Description","text":"<p>Some inner namespace.</p> <p>Some random brief description.</p> <p>Some detailed description here </p>"},{"location":"animal/group__animals/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"animal/group__animals/#enum-type","title":"enum Type","text":"<p>The 6 classes of animal kingdom. <pre><code>enum example::Animal::Type {\nNONE = 0,\nINSECT = 1,\nAMPHIBIAN = 2,\nBIRD = 3,\nFISH = 4,\nREPTILE = 5,\nMAMMAL = 6\n};\n</code></pre></p> <p>Lorem Ipsum Donor. </p>"},{"location":"animal/group__animals/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/group__animals/#function-some_global_function","title":"function some_global_function","text":"<p>Some random global function that modifies Animal. <pre><code>void some_global_function (\nexample::Animal * animal\n) </code></pre></p> <p>See also: Animal </p> <p>Parameters:</p> <ul> <li><code>animal</code> The pointer to the animal instance </li> </ul>"},{"location":"animal/group__animals/#function-some_namespace_function","title":"function some_namespace_function","text":"<p>Some random namespace function that modifies Animal . <pre><code>void example::some_namespace_function (\nAnimal * animal\n) </code></pre></p> <p>See also: Animal </p> <p>Parameters:</p> <ul> <li><code>animal</code> The pointer to the animal instance </li> </ul>"},{"location":"animal/group__animals/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"animal/group__animals/#define-config_hello","title":"define CONFIG_HELLO","text":"<pre><code>#define CONFIG_HELLO (123)\n</code></pre>"},{"location":"animal/group__animals/#define-config_world","title":"define CONFIG_WORLD","text":"<pre><code>#define CONFIG_WORLD (\"abx\")\n</code></pre>"},{"location":"animal/group__animals/#define-pi","title":"define PI","text":"<pre><code>#define PI 3.14159265358979323846\n</code></pre>"},{"location":"animal/group__animals/#define-print_pretty","title":"define PRINT_PRETTY","text":"<pre><code>#define PRINT_PRETTY (\nMSG,\n...\n) printf(MSG, __VA_ARGS__)\n</code></pre>"},{"location":"animal/structBirdOrRodent/","title":"Struct BirdOrRodent","text":"<p>ClassList &gt; BirdOrRodent</p>"},{"location":"animal/structBirdOrRodent/#public-attributes","title":"Public Attributes","text":"Type Name union BirdOrRodent::@0 @1 int legs double wingspan"},{"location":"animal/structBirdOrRodent/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"animal/structBirdOrRodent/#variable-1","title":"variable @1","text":"<pre><code>union BirdOrRodent::@0 BirdOrRodent::@1;\n</code></pre>"},{"location":"animal/structBirdOrRodent/#variable-legs","title":"variable legs","text":"<pre><code>int BirdOrRodent::legs;\n</code></pre>"},{"location":"animal/structBirdOrRodent/#variable-wingspan","title":"variable wingspan","text":"<pre><code>double BirdOrRodent::wingspan;\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/config.h</code></p>"},{"location":"animal/config_8h/","title":"File config.h","text":"<p>FileList &gt; animal &gt; config.h</p> <p>Go to the source code of this file</p> <p>This is a config file. More...</p>"},{"location":"animal/config_8h/#classes","title":"Classes","text":"Type Name struct BirdOrRodent"},{"location":"animal/config_8h/#macros","title":"Macros","text":"Type Name define CONFIG_HELLO  (123) define CONFIG_WORLD  (\"abx\") define PI  3.14159265358979323846 define PRINT_PRETTY (MSG, ...) printf(MSG, __VA_ARGS__)"},{"location":"animal/config_8h/#detailed-description","title":"Detailed Description","text":"<p>This is a detailed description </p>"},{"location":"animal/config_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"animal/config_8h/#define-config_hello","title":"define CONFIG_HELLO","text":"<pre><code>#define CONFIG_HELLO (123)\n</code></pre>"},{"location":"animal/config_8h/#define-config_world","title":"define CONFIG_WORLD","text":"<pre><code>#define CONFIG_WORLD (\"abx\")\n</code></pre>"},{"location":"animal/config_8h/#define-pi","title":"define PI","text":"<pre><code>#define PI 3.14159265358979323846\n</code></pre>"},{"location":"animal/config_8h/#define-print_pretty","title":"define PRINT_PRETTY","text":"<pre><code>#define PRINT_PRETTY (\nMSG,\n...\n) printf(MSG, __VA_ARGS__)\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/config.h</code></p>"},{"location":"animal/structBirdOrRodent/","title":"Struct BirdOrRodent","text":"<p>ClassList &gt; BirdOrRodent</p>"},{"location":"animal/structBirdOrRodent/#public-attributes","title":"Public Attributes","text":"Type Name union BirdOrRodent::@0 @1 int legs double wingspan"},{"location":"animal/structBirdOrRodent/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"animal/structBirdOrRodent/#variable-1","title":"variable @1","text":"<pre><code>union BirdOrRodent::@0 BirdOrRodent::@1;\n</code></pre>"},{"location":"animal/structBirdOrRodent/#variable-legs","title":"variable legs","text":"<pre><code>int BirdOrRodent::legs;\n</code></pre>"},{"location":"animal/structBirdOrRodent/#variable-wingspan","title":"variable wingspan","text":"<pre><code>double BirdOrRodent::wingspan;\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/config.h</code></p>"},{"location":"animal/classexample_1_1Animal/","title":"Class example::Animal","text":"<p>ClassList &gt; example &gt; Animal</p> <p>Base class for all animals from which Bird derives.More...</p> <ul> <li><code>#include &lt;animal.h&gt;</code></li> </ul> <p>Inherits the following classes: example::AnimalInterface</p> <p>Inherited by the following classes: example::Bird</p>"},{"location":"animal/classexample_1_1Animal/#classes","title":"Classes","text":"Type Name struct Result Some random inner class of Animal ."},{"location":"animal/classexample_1_1Animal/#public-types","title":"Public Types","text":"Type Name typedef std::pair&lt; Animal *, Animal * &gt; Parents enum Type The 6 classes of animal kingdom."},{"location":"animal/classexample_1_1Animal/#public-functions","title":"Public Functions","text":"Type Name Animal (Type type, const std::string &amp; name, Animal * mother=nullptr, Animal * father=nullptr) The main constructor. Animal (const Animal &amp; other) = delete Animal (Animal &amp;&amp; animal) noexcept const std::string &amp; get_name () constGet the name of the animal. virtual int get_num_of_eyes () override constReturns the number of eyes. virtual int get_num_of_limbs () override constReturns the number of limbs. Parents get_parents () const virtual bool has_tail () override constReturns true if the animal has a tail. virtual void make_sound () = 0 virtual void move ()  operator bool () constReturns true if this is an valid animal. Animal &amp; operator= (const Animal &amp; other) = deleteDeleted copy operator. Animal &amp; operator= (Animal &amp;&amp; other) noexceptMove operator. void some_inline_member_function (Animal * animal) Lorem Ipsum. void swap (Animal &amp; other) noexcept virtual ~Animal () = default"},{"location":"animal/classexample_1_1Animal/#public-functions-inherited-from-exampleanimalinterface","title":"Public Functions inherited from example::AnimalInterface","text":"<p>See example::AnimalInterface</p> Type Name virtual int get_num_of_eyes () const = 0Returns the number of eyes. virtual int get_num_of_limbs () const = 0Returns the number of limbs. virtual bool has_tail () const = 0Returns true if the animal has a tail."},{"location":"animal/classexample_1_1Animal/#public-static-functions","title":"Public Static Functions","text":"Type Name Animal * find_child_by_name (Animal * parent)  Animal * find_parent_by_name (Animal * child)"},{"location":"animal/classexample_1_1Animal/#protected-attributes","title":"Protected Attributes","text":"Type Name Animal * father The pointer to the father. Animal * mother The pointer to the mother. std::string name"},{"location":"animal/classexample_1_1Animal/#detailed-description","title":"Detailed Description","text":"<p>Lorem Ipsum Donor. Some Random link with bold and italics And the following is a <code>typewritter</code> font.</p> <p>Example code:</p> <p>Animal animal = Animal(\"Hello World\", nullptr, nullptr); std::cout &lt;&lt; animal.get_name() &lt;&lt; std::endl;</p> <p>See also: Bird </p> <p>Bug</p> <p>Some random bug </p> <p>Note:</p> <p>Some random note </p> <p>Warning:</p> <p>Some random warning </p> <p>Test</p> <p>Some random test description </p> <p>Todo</p> <p>Some random todo </p> <p>Template parameters:</p> <ul> <li><code>T</code> Some random template paramater description which actually does not exist in the code! </li> </ul> <p>Precondition:</p> <p>First initialize the system. </p> <p>Date:</p> <p>2017-2018 </p> <p>Author:</p> <p>Matus Novak </p> <p>Author:</p> <p>Hello World </p>"},{"location":"animal/classexample_1_1Animal/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"animal/classexample_1_1Animal/#typedef-parents","title":"typedef Parents","text":"<pre><code>typedef std::pair&lt;Animal*, Animal*&gt; example::Animal::Parents;\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#enum-type","title":"enum Type","text":"<p>The 6 classes of animal kingdom. <pre><code>enum example::Animal::Type {\nNONE = 0,\nINSECT = 1,\nAMPHIBIAN = 2,\nBIRD = 3,\nFISH = 4,\nREPTILE = 5,\nMAMMAL = 6\n};\n</code></pre></p> <p>Lorem Ipsum Donor. </p>"},{"location":"animal/classexample_1_1Animal/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/classexample_1_1Animal/#function-animal-13","title":"function Animal [1/3]","text":"<p>The main constructor. <pre><code>example::Animal::Animal (\nType type,\nconst std::string &amp; name,\nAnimal * mother=nullptr,\nAnimal * father=nullptr\n) </code></pre></p> <p>Use this constructor to allocate a new instance of Animal </p> <p>Parameters:</p> <ul> <li><code>type</code> The type of the animal that matches Animal::Type </li> <li><code>name</code> Any name to associate the animal with </li> </ul> <p>Exception:</p> <ul> <li>CustomException If either only mother or father is assigned </li> </ul>"},{"location":"animal/classexample_1_1Animal/#function-animal-23","title":"function Animal [2/3]","text":"<pre><code>example::Animal::Animal (\nconst Animal &amp; other\n) = delete\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#function-animal-33","title":"function Animal [3/3]","text":"<pre><code>example::Animal::Animal (\nAnimal &amp;&amp; animal\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#function-get_name","title":"function get_name","text":"<p>Get the name of the animal. <pre><code>inline const std::string &amp; example::Animal::get_name () const\n</code></pre></p> <p>Returns:</p> <p>A constant reference to the name </p>"},{"location":"animal/classexample_1_1Animal/#function-get_num_of_eyes","title":"function get_num_of_eyes","text":"<p>Returns the number of eyes. <pre><code>virtual int example::Animal::get_num_of_eyes () override const\n</code></pre></p> <p>See also: get_num_of_limbs, get_num_of_eyes </p> <p>Implements example::AnimalInterface::get_num_of_eyes</p>"},{"location":"animal/classexample_1_1Animal/#function-get_num_of_limbs","title":"function get_num_of_limbs","text":"<p>Returns the number of limbs. <pre><code>virtual int example::Animal::get_num_of_limbs () override const\n</code></pre></p> <p>See also: get_num_of_eyes, get_num_of_limbs </p> <p>Implements example::AnimalInterface::get_num_of_limbs</p>"},{"location":"animal/classexample_1_1Animal/#function-get_parents","title":"function get_parents","text":"<pre><code>inline Parents example::Animal::get_parents () const\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#function-has_tail","title":"function has_tail","text":"<p>Returns true if the animal has a tail. <pre><code>virtual bool example::Animal::has_tail () override const\n</code></pre></p> <p>See also: get_num_of_limbs, get_num_of_eyes </p> <p>Return value:</p> <ul> <li><code>true</code> Does have a tail </li> <li><code>false</code> Does not have a tail </li> </ul> <p>Implements example::AnimalInterface::has_tail</p>"},{"location":"animal/classexample_1_1Animal/#function-make_sound","title":"function make_sound","text":"<pre><code>virtual void example::Animal::make_sound () = 0\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#function-move","title":"function move","text":"<pre><code>virtual void example::Animal::move () </code></pre>"},{"location":"animal/classexample_1_1Animal/#function-operator-bool","title":"function operator bool","text":"<p>Returns true if this is an valid animal. <pre><code>example::Animal::operator bool () const\n</code></pre></p> <p>Lorem Ipsum returns true </p>"},{"location":"animal/classexample_1_1Animal/#function-operator","title":"function operator=","text":"<pre><code>Animal &amp; example::Animal::operator= (\nconst Animal &amp; other\n) = delete\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#function-operator_1","title":"function operator=","text":"<pre><code>Animal &amp; example::Animal::operator= (\nAnimal &amp;&amp; other\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#function-some_inline_member_function","title":"function some_inline_member_function","text":"<p>Lorem Ipsum. <pre><code>inline void example::Animal::some_inline_member_function (\nAnimal * animal\n) </code></pre></p> <p>See also: Animal </p> <p>Parameters:</p> <ul> <li><code>animal</code> The pointer to the animal instance</li> </ul> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>"},{"location":"animal/classexample_1_1Animal/#implementation","title":"Implementation:","text":""},{"location":"animal/classexample_1_1Animal/#function-swap","title":"function swap","text":"<pre><code>void example::Animal::swap (\nAnimal &amp; other\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#function-animal","title":"function ~Animal","text":"<pre><code>virtual example::Animal::~Animal () = default\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"animal/classexample_1_1Animal/#function-find_child_by_name","title":"function find_child_by_name","text":"<pre><code>static Animal * example::Animal::find_child_by_name (\nAnimal * parent\n) </code></pre>"},{"location":"animal/classexample_1_1Animal/#function-find_parent_by_name","title":"function find_parent_by_name","text":"<pre><code>static Animal * example::Animal::find_parent_by_name (\nAnimal * child\n) </code></pre>"},{"location":"animal/classexample_1_1Animal/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"animal/classexample_1_1Animal/#variable-father","title":"variable father","text":"<p>The pointer to the father. <pre><code>Animal* example::Animal::father;\n</code></pre></p> <p>Can be null! </p>"},{"location":"animal/classexample_1_1Animal/#variable-mother","title":"variable mother","text":"<p>The pointer to the mother. <pre><code>Animal* example::Animal::mother;\n</code></pre></p> <p>Can be null! </p>"},{"location":"animal/classexample_1_1Animal/#variable-name","title":"variable name","text":"<pre><code>std::string example::Animal::name;\n</code></pre>"},{"location":"animal/classexample_1_1Animal/#friends-documentation","title":"Friends Documentation","text":""},{"location":"animal/classexample_1_1Animal/#friend-some_global_function","title":"friend some_global_function","text":"<p>Some random global function that modifies Animal . <pre><code>void example::Animal::some_global_function (\nAnimal * animal\n) </code></pre></p> <p>See also: Animal </p> <p>Parameters:</p> <ul> <li><code>animal</code> The pointer to the animal instance </li> </ul> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/animal.h</code></p>"},{"location":"animal/structexample_1_1Animal_1_1Result/","title":"Struct example::Animal::Result","text":"<p>ClassList &gt; example &gt; Animal &gt; Result</p> <p>Some random inner class of Animal .</p> <ul> <li><code>#include &lt;animal.h&gt;</code></li> </ul>"},{"location":"animal/structexample_1_1Animal_1_1Result/#public-attributes","title":"Public Attributes","text":"Type Name const Animal * father   = = nullptr const Animal * mother   = = nullptr const std::string name const Type type   = = Type::NONE"},{"location":"animal/structexample_1_1Animal_1_1Result/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"animal/structexample_1_1Animal_1_1Result/#variable-father","title":"variable father","text":"<pre><code>const Animal* example::Animal::Result::father;\n</code></pre>"},{"location":"animal/structexample_1_1Animal_1_1Result/#variable-mother","title":"variable mother","text":"<pre><code>const Animal* example::Animal::Result::mother;\n</code></pre>"},{"location":"animal/structexample_1_1Animal_1_1Result/#variable-name","title":"variable name","text":"<pre><code>const std::string example::Animal::Result::name;\n</code></pre>"},{"location":"animal/structexample_1_1Animal_1_1Result/#variable-type","title":"variable type","text":"<pre><code>const Type example::Animal::Result::type;\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/animal.h</code></p>"},{"location":"animal/classexample_1_1AnimalInterface/","title":"Interface example::AnimalInterface","text":"<p>ClassList &gt; example &gt; AnimalInterface</p> <p>Inherited by the following classes: example::Animal</p>"},{"location":"animal/classexample_1_1AnimalInterface/#public-functions","title":"Public Functions","text":"Type Name virtual int get_num_of_eyes () const = 0Returns the number of eyes. virtual int get_num_of_limbs () const = 0Returns the number of limbs. virtual bool has_tail () const = 0Returns true if the animal has a tail."},{"location":"animal/classexample_1_1AnimalInterface/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/classexample_1_1AnimalInterface/#function-get_num_of_eyes","title":"function get_num_of_eyes","text":"<p>Returns the number of eyes. <pre><code>virtual int example::AnimalInterface::get_num_of_eyes () const = 0\n</code></pre></p> <p>See also: get_num_of_limbs </p>"},{"location":"animal/classexample_1_1AnimalInterface/#function-get_num_of_limbs","title":"function get_num_of_limbs","text":"<p>Returns the number of limbs. <pre><code>virtual int example::AnimalInterface::get_num_of_limbs () const = 0\n</code></pre></p> <p>See also: get_num_of_eyes </p>"},{"location":"animal/classexample_1_1AnimalInterface/#function-has_tail","title":"function has_tail","text":"<p>Returns true if the animal has a tail. <pre><code>virtual bool example::AnimalInterface::has_tail () const = 0\n</code></pre></p> <p>See also: get_num_of_limbs </p> <p>Return value:</p> <ul> <li><code>true</code> Does have a tail </li> <li><code>false</code> Does not have a tail </li> </ul> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/animal_interface.h</code></p>"},{"location":"animal/classexample_1_1Bird/","title":"Class example::Bird","text":"<p>ClassList &gt; example &gt; Bird</p> <p>Inherits the following classes: example::Animal</p> <p>Inherited by the following classes: example::SpecialBird</p>"},{"location":"animal/classexample_1_1Bird/#public-types-inherited-from-exampleanimal","title":"Public Types inherited from example::Animal","text":"<p>See example::Animal</p> Type Name typedef std::pair&lt; Animal *, Animal * &gt; Parents enum Type The 6 classes of animal kingdom."},{"location":"animal/classexample_1_1Bird/#public-functions","title":"Public Functions","text":"Type Name Bird (const std::string &amp; name, Bird * mother=nullptr, Bird * father=nullptr)  Bird (const Bird &amp; other) = delete Bird (Bird &amp;&amp; Bird) noexcept virtual void make_sound () override virtual void move () override Bird &amp; operator= (const Bird &amp; other) = deleteDeleted copy operator. Bird &amp; operator= (Bird &amp;&amp; other) noexceptMove operator. void swap (Bird &amp; other) noexcept ~Bird () = default"},{"location":"animal/classexample_1_1Bird/#public-functions-inherited-from-exampleanimal","title":"Public Functions inherited from example::Animal","text":"<p>See example::Animal</p> Type Name Animal (Type type, const std::string &amp; name, Animal * mother=nullptr, Animal * father=nullptr) The main constructor. Animal (const Animal &amp; other) = delete Animal (Animal &amp;&amp; animal) noexcept const std::string &amp; get_name () constGet the name of the animal. virtual int get_num_of_eyes () override constReturns the number of eyes. virtual int get_num_of_limbs () override constReturns the number of limbs. Parents get_parents () const virtual bool has_tail () override constReturns true if the animal has a tail. virtual void make_sound () = 0 virtual void move ()  operator bool () constReturns true if this is an valid animal. Animal &amp; operator= (const Animal &amp; other) = deleteDeleted copy operator. Animal &amp; operator= (Animal &amp;&amp; other) noexceptMove operator. void some_inline_member_function (Animal * animal) Lorem Ipsum. void swap (Animal &amp; other) noexcept virtual ~Animal () = default"},{"location":"animal/classexample_1_1Bird/#public-functions-inherited-from-exampleanimalinterface","title":"Public Functions inherited from example::AnimalInterface","text":"<p>See example::AnimalInterface</p> Type Name virtual int get_num_of_eyes () const = 0Returns the number of eyes. virtual int get_num_of_limbs () const = 0Returns the number of limbs. virtual bool has_tail () const = 0Returns true if the animal has a tail."},{"location":"animal/classexample_1_1Bird/#public-static-functions-inherited-from-exampleanimal","title":"Public Static Functions inherited from example::Animal","text":"<p>See example::Animal</p> Type Name Animal * find_child_by_name (Animal * parent)  Animal * find_parent_by_name (Animal * child)"},{"location":"animal/classexample_1_1Bird/#protected-attributes-inherited-from-exampleanimal","title":"Protected Attributes inherited from example::Animal","text":"<p>See example::Animal</p> Type Name Animal * father The pointer to the father. Animal * mother The pointer to the mother. std::string name"},{"location":"animal/classexample_1_1Bird/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/classexample_1_1Bird/#function-bird-13","title":"function Bird [1/3]","text":"<pre><code>example::Bird::Bird (\nconst std::string &amp; name,\nBird * mother=nullptr,\nBird * father=nullptr\n) </code></pre>"},{"location":"animal/classexample_1_1Bird/#function-bird-23","title":"function Bird [2/3]","text":"<pre><code>example::Bird::Bird (\nconst Bird &amp; other\n) = delete\n</code></pre>"},{"location":"animal/classexample_1_1Bird/#function-bird-33","title":"function Bird [3/3]","text":"<pre><code>example::Bird::Bird (\nBird &amp;&amp; Bird\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1Bird/#function-make_sound","title":"function make_sound","text":"<pre><code>virtual void example::Bird::make_sound () override\n</code></pre> <p>Implements example::Animal::make_sound</p>"},{"location":"animal/classexample_1_1Bird/#function-move","title":"function move","text":"<pre><code>virtual void example::Bird::move () override\n</code></pre> <p>Implements example::Animal::move</p>"},{"location":"animal/classexample_1_1Bird/#function-operator","title":"function operator=","text":"<pre><code>Bird &amp; example::Bird::operator= (\nconst Bird &amp; other\n) = delete\n</code></pre>"},{"location":"animal/classexample_1_1Bird/#function-operator_1","title":"function operator=","text":"<pre><code>Bird &amp; example::Bird::operator= (\nBird &amp;&amp; other\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1Bird/#function-swap","title":"function swap","text":"<pre><code>void example::Bird::swap (\nBird &amp; other\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1Bird/#function-bird","title":"function ~Bird","text":"<pre><code>example::Bird::~Bird () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/bird.h</code></p>"},{"location":"animal/classexample_1_1CustomException/","title":"Class example::CustomException","text":"<p>ClassList &gt; example &gt; CustomException</p> <p>Inherits the following classes: std::exception</p>"},{"location":"animal/classexample_1_1CustomException/#public-functions","title":"Public Functions","text":"Type Name CustomException (const std::string &amp; msg)  virtual const char * what () const"},{"location":"animal/classexample_1_1CustomException/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/classexample_1_1CustomException/#function-customexception","title":"function CustomException","text":"<pre><code>inline example::CustomException::CustomException (\nconst std::string &amp; msg\n) </code></pre>"},{"location":"animal/classexample_1_1CustomException/#function-what","title":"function what","text":"<pre><code>inline virtual const char * example::CustomException::what () const\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/utils/exception.h</code></p>"},{"location":"animal/classexample_1_1NumericException/","title":"Class example::NumericException","text":"<p>ClassList &gt; example &gt; NumericException</p> <p>Inherits the following classes: std::exception</p>"},{"location":"animal/classexample_1_1NumericException/#public-functions","title":"Public Functions","text":"Type Name NumericException (const std::string &amp; msg)  virtual const char * what () const"},{"location":"animal/classexample_1_1NumericException/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/classexample_1_1NumericException/#function-numericexception","title":"function NumericException","text":"<pre><code>inline example::NumericException::NumericException (\nconst std::string &amp; msg\n) </code></pre>"},{"location":"animal/classexample_1_1NumericException/#function-what","title":"function what","text":"<pre><code>inline virtual const char * example::NumericException::what () const\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/utils/exception.h</code></p>"},{"location":"animal/classexample_1_1SpecialBird/","title":"Class example::SpecialBird","text":"<p>ClassList &gt; example &gt; SpecialBird</p> <p>Inherits the following classes: example::Bird</p>"},{"location":"animal/classexample_1_1SpecialBird/#public-types-inherited-from-exampleanimal","title":"Public Types inherited from example::Animal","text":"<p>See example::Animal</p> Type Name typedef std::pair&lt; Animal *, Animal * &gt; Parents enum Type The 6 classes of animal kingdom."},{"location":"animal/classexample_1_1SpecialBird/#public-functions","title":"Public Functions","text":"Type Name SpecialBird (const std::string &amp; name, SpecialBird * mother=nullptr, SpecialBird * father=nullptr)  SpecialBird (const SpecialBird &amp; other) = delete SpecialBird (SpecialBird &amp;&amp; SpecialBird) noexcept void do_something_special ()  SpecialBird &amp; operator= (const SpecialBird &amp; other) = delete SpecialBird &amp; operator= (SpecialBird &amp;&amp; other) noexcept void swap (SpecialBird &amp; other) noexcept ~SpecialBird () = default"},{"location":"animal/classexample_1_1SpecialBird/#public-functions-inherited-from-examplebird","title":"Public Functions inherited from example::Bird","text":"<p>See example::Bird</p> Type Name Bird (const std::string &amp; name, Bird * mother=nullptr, Bird * father=nullptr)  Bird (const Bird &amp; other) = delete Bird (Bird &amp;&amp; Bird) noexcept virtual void make_sound () override virtual void move () override Bird &amp; operator= (const Bird &amp; other) = deleteDeleted copy operator. Bird &amp; operator= (Bird &amp;&amp; other) noexceptMove operator. void swap (Bird &amp; other) noexcept ~Bird () = default"},{"location":"animal/classexample_1_1SpecialBird/#public-functions-inherited-from-exampleanimal","title":"Public Functions inherited from example::Animal","text":"<p>See example::Animal</p> Type Name Animal (Type type, const std::string &amp; name, Animal * mother=nullptr, Animal * father=nullptr) The main constructor. Animal (const Animal &amp; other) = delete Animal (Animal &amp;&amp; animal) noexcept const std::string &amp; get_name () constGet the name of the animal. virtual int get_num_of_eyes () override constReturns the number of eyes. virtual int get_num_of_limbs () override constReturns the number of limbs. Parents get_parents () const virtual bool has_tail () override constReturns true if the animal has a tail. virtual void make_sound () = 0 virtual void move ()  operator bool () constReturns true if this is an valid animal. Animal &amp; operator= (const Animal &amp; other) = deleteDeleted copy operator. Animal &amp; operator= (Animal &amp;&amp; other) noexceptMove operator. void some_inline_member_function (Animal * animal) Lorem Ipsum. void swap (Animal &amp; other) noexcept virtual ~Animal () = default"},{"location":"animal/classexample_1_1SpecialBird/#public-functions-inherited-from-exampleanimalinterface","title":"Public Functions inherited from example::AnimalInterface","text":"<p>See example::AnimalInterface</p> Type Name virtual int get_num_of_eyes () const = 0Returns the number of eyes. virtual int get_num_of_limbs () const = 0Returns the number of limbs. virtual bool has_tail () const = 0Returns true if the animal has a tail."},{"location":"animal/classexample_1_1SpecialBird/#public-static-functions-inherited-from-exampleanimal","title":"Public Static Functions inherited from example::Animal","text":"<p>See example::Animal</p> Type Name Animal * find_child_by_name (Animal * parent)  Animal * find_parent_by_name (Animal * child)"},{"location":"animal/classexample_1_1SpecialBird/#protected-attributes-inherited-from-exampleanimal","title":"Protected Attributes inherited from example::Animal","text":"<p>See example::Animal</p> Type Name Animal * father The pointer to the father. Animal * mother The pointer to the mother. std::string name"},{"location":"animal/classexample_1_1SpecialBird/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/classexample_1_1SpecialBird/#function-specialbird-13","title":"function SpecialBird [1/3]","text":"<pre><code>example::SpecialBird::SpecialBird (\nconst std::string &amp; name,\nSpecialBird * mother=nullptr,\nSpecialBird * father=nullptr\n) </code></pre>"},{"location":"animal/classexample_1_1SpecialBird/#function-specialbird-23","title":"function SpecialBird [2/3]","text":"<pre><code>example::SpecialBird::SpecialBird (\nconst SpecialBird &amp; other\n) = delete\n</code></pre>"},{"location":"animal/classexample_1_1SpecialBird/#function-specialbird-33","title":"function SpecialBird [3/3]","text":"<pre><code>example::SpecialBird::SpecialBird (\nSpecialBird &amp;&amp; SpecialBird\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1SpecialBird/#function-do_something_special","title":"function do_something_special","text":"<pre><code>void example::SpecialBird::do_something_special () </code></pre>"},{"location":"animal/classexample_1_1SpecialBird/#function-operator","title":"function operator=","text":"<pre><code>SpecialBird &amp; example::SpecialBird::operator= (\nconst SpecialBird &amp; other\n) = delete\n</code></pre>"},{"location":"animal/classexample_1_1SpecialBird/#function-operator_1","title":"function operator=","text":"<pre><code>SpecialBird &amp; example::SpecialBird::operator= (\nSpecialBird &amp;&amp; other\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1SpecialBird/#function-swap","title":"function swap","text":"<pre><code>void example::SpecialBird::swap (\nSpecialBird &amp; other\n) noexcept\n</code></pre>"},{"location":"animal/classexample_1_1SpecialBird/#function-specialbird","title":"function ~SpecialBird","text":"<pre><code>example::SpecialBird::~SpecialBird () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/special_bird.h</code></p>"},{"location":"animal/dir_b79f60e82a55fcb2461cb624126a6c6a/","title":"Dir demo-projects","text":"<p>FileList &gt; demo-projects</p>"},{"location":"animal/dir_b79f60e82a55fcb2461cb624126a6c6a/#directories","title":"Directories","text":"Type Name dir animal <p>The documentation for this class was generated from the following file <code>demo-projects/</code></p>"},{"location":"animal/dir_0434e61765a4c42f4617406236556099/","title":"Dir demo-projects/animal","text":"<p>FileList &gt; animal</p>"},{"location":"animal/dir_0434e61765a4c42f4617406236556099/#files","title":"Files","text":"Type Name file animal.h file animal_interface.h file bird.h file chinchilla.h file config.h This is a config file. file example.h file special_bird.h"},{"location":"animal/dir_0434e61765a4c42f4617406236556099/#directories","title":"Directories","text":"Type Name dir examples dir utils <p>The documentation for this class was generated from the following file <code>demo-projects/animal/</code></p>"},{"location":"animal/animal_8h/","title":"File animal.h","text":"<p>FileList &gt; animal &gt; animal.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;functional&gt;</code></li> <li><code>#include \"animal_interface.h\"</code></li> </ul>"},{"location":"animal/animal_8h/#namespaces","title":"Namespaces","text":"Type Name namespace example namespace inner_namespace"},{"location":"animal/animal_8h/#classes","title":"Classes","text":"Type Name class Animal Base class for all animals from which Bird derives. struct Result Some random inner class of Animal . class Vector"},{"location":"animal/animal_8h/#public-functions","title":"Public Functions","text":"Type Name void some_global_function (example::Animal * animal) Some random global function that modifies Animal."},{"location":"animal/animal_8h/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/animal_8h/#function-some_global_function","title":"function some_global_function","text":"<p>Some random global function that modifies Animal. <pre><code>void some_global_function (\nexample::Animal * animal\n) </code></pre></p> <p>See also: Animal </p> <p>Parameters:</p> <ul> <li><code>animal</code> The pointer to the animal instance </li> </ul> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/animal.h</code></p>"},{"location":"animal/animal_8h_source/","title":"File animal.h","text":"<p>File List &gt; animal &gt; animal.h</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef EXAMPLE_ANIMAL_H\n#define EXAMPLE_ANIMAL_H\n\n#include &lt;functional&gt;\n#include \"animal_interface.h\"\n\nnamespace example {\nnamespace inner_namespace {\nclass Vector {\nint x, y, z;\n};\n}\nclass Animal: public AnimalInterface {\npublic:\nenum Type {\nNONE = 0,\nINSECT = 1,\nAMPHIBIAN = 2,\nBIRD = 3,\nFISH = 4,\nREPTILE = 5,\nMAMMAL = 6\n};\n\ntypedef std::pair&lt;Animal*, Animal*&gt; Parents;\nstruct Result {\nconst Type type = Type::NONE;\nconst std::string name;\nconst Animal* mother = nullptr;\nconst Animal* father = nullptr;\n};\n\nstatic Animal* find_parent_by_name(Animal* child);\nstatic Animal* find_child_by_name(Animal* parent);\n\nAnimal(Type type, const std::string&amp; name, Animal* mother = nullptr, Animal* father = nullptr);\nAnimal(const Animal&amp; other) = delete;\nAnimal(Animal&amp;&amp; animal) noexcept;\nvirtual ~Animal() = default;\n\noperator bool() const;\n\nvoid swap(Animal&amp; other) noexcept;\n\nint get_num_of_limbs() const override;\n\nint get_num_of_eyes() const override;\n\nbool has_tail() const override;\n\nvirtual void move();\nvirtual void make_sound() = 0;\n\ninline Parents get_parents() const {\nreturn Parents(mother, father);\n}\n\ninline const std::string&amp; get_name() const {\nreturn name;\n}\ninline void some_inline_member_function(Animal* animal) {\ndo_more_things();\n\ncheck_best();\n}\n\nAnimal&amp; operator = (const Animal&amp; other) = delete;\nAnimal&amp; operator = (Animal&amp;&amp; other) noexcept;\n\nfriend void some_global_function(Animal* animal);\n\nprotected:\nAnimal* mother;\nAnimal* father;\nstd::string name;\n};\n\nvoid some_namespace_function(Animal* animal);\ntypedef std::function&lt;void*(Animal*)&gt; Callback;\nenum class CallbackType {\nNONE = 0,\nEAT,\nSLEEP,\nATTACK\n};\n}\n\nextern void some_global_function(example::Animal* animal);\n\n#endif\n</code></pre>"},{"location":"animal/animal__interface_8h/","title":"File animal_interface.h","text":"<p>FileList &gt; animal &gt; animal_interface.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> </ul>"},{"location":"animal/animal__interface_8h/#namespaces","title":"Namespaces","text":"Type Name namespace example"},{"location":"animal/animal__interface_8h/#classes","title":"Classes","text":"Type Name interface AnimalInterface <p>The documentation for this class was generated from the following file <code>demo-projects/animal/animal_interface.h</code></p>"},{"location":"animal/animal__interface_8h_source/","title":"File animal_interface.h","text":"<p>File List &gt; animal &gt; animal_interface.h</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef EXAMPLE_ANIMAL_INTERFACE_H\n#define EXAMPLE_ANIMAL_INTERFACE_H\n\n#include &lt;string&gt;\n\nnamespace example {\nclass AnimalInterface {\npublic:\nvirtual int get_num_of_limbs() const = 0;\n\nvirtual int get_num_of_eyes() const = 0;\n\nvirtual bool has_tail() const = 0;\n};\n}\n\n#endif\n</code></pre>"},{"location":"animal/bird_8h/","title":"File bird.h","text":"<p>FileList &gt; animal &gt; bird.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"animal.h\"</code></li> </ul>"},{"location":"animal/bird_8h/#namespaces","title":"Namespaces","text":"Type Name namespace example"},{"location":"animal/bird_8h/#classes","title":"Classes","text":"Type Name class Bird <p>The documentation for this class was generated from the following file <code>demo-projects/animal/bird.h</code></p>"},{"location":"animal/bird_8h_source/","title":"File bird.h","text":"<p>File List &gt; animal &gt; bird.h</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef EXAMPLE_BIRD_H\n#define EXAMPLE_BIRD_H\n\n#include \"animal.h\"\n\nnamespace example {\nclass Bird: public Animal {\npublic:\nBird(const std::string&amp; name, Bird* mother = nullptr, Bird* father = nullptr);\nBird(const Bird&amp; other) = delete;\nBird(Bird&amp;&amp; Bird) noexcept;\n~Bird() = default;\n\nvoid swap(Bird&amp; other) noexcept;\n\nvoid move() override;\nvoid make_sound() override;\nBird&amp; operator = (const Bird&amp; other) = delete;\nBird&amp; operator = (Bird&amp;&amp; other) noexcept;\n};\n}\n\n#endif\n</code></pre>"},{"location":"animal/chinchilla_8h/","title":"File chinchilla.h","text":"<p>FileList &gt; animal &gt; chinchilla.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;QObject&gt;</code></li> </ul>"},{"location":"animal/chinchilla_8h/#classes","title":"Classes","text":"Type Name class CuteChinchilla <p>The documentation for this class was generated from the following file <code>demo-projects/animal/chinchilla.h</code></p>"},{"location":"animal/chinchilla_8h_source/","title":"File chinchilla.h","text":"<p>File List &gt; animal &gt; chinchilla.h</p> <p>Go to the documentation of this file</p> <pre><code>#include &lt;QObject&gt;\n\nclass CuteChinchilla : public QObject\n{\nQ_OBJECT\n\npublic:\nenum class Species {\nChinchillaChinchilla,\nChinchillaLanigera\n};\n\nCuteChinchilla() { m_weight = 0; }\nint weight() const { return m_weight; }\n\npublic slots:\nvoid setWeight(int weight);\n\nsignals:\nvoid weightChanged(int newWeight);\n\nprivate slots:\nvoid foo();\n\nprivate:\nint m_weight;\n};\n</code></pre>"},{"location":"animal/config_8h/","title":"File config.h","text":"<p>FileList &gt; animal &gt; config.h</p> <p>Go to the source code of this file</p> <p>This is a config file. More...</p>"},{"location":"animal/config_8h/#classes","title":"Classes","text":"Type Name struct BirdOrRodent"},{"location":"animal/config_8h/#macros","title":"Macros","text":"Type Name define CONFIG_HELLO  (123) define CONFIG_WORLD  (\"abx\") define PI  3.14159265358979323846 define PRINT_PRETTY (MSG, ...) printf(MSG, __VA_ARGS__)"},{"location":"animal/config_8h/#detailed-description","title":"Detailed Description","text":"<p>This is a detailed description </p>"},{"location":"animal/config_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"animal/config_8h/#define-config_hello","title":"define CONFIG_HELLO","text":"<pre><code>#define CONFIG_HELLO (123)\n</code></pre>"},{"location":"animal/config_8h/#define-config_world","title":"define CONFIG_WORLD","text":"<pre><code>#define CONFIG_WORLD (\"abx\")\n</code></pre>"},{"location":"animal/config_8h/#define-pi","title":"define PI","text":"<pre><code>#define PI 3.14159265358979323846\n</code></pre>"},{"location":"animal/config_8h/#define-print_pretty","title":"define PRINT_PRETTY","text":"<pre><code>#define PRINT_PRETTY (\nMSG,\n...\n) printf(MSG, __VA_ARGS__)\n</code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/config.h</code></p>"},{"location":"animal/config_8h_source/","title":"File config.h","text":"<p>File List &gt; animal &gt; config.h</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef EXAMPLE_CONFIG_H\n#define EXAMPLE_CONFIG_H\n#define CONFIG_HELLO (123)\n#define CONFIG_WORLD (\"abx\")\n#define PI 3.14159265358979323846\n#define PRINT_PRETTY(MSG, ...) printf(MSG, __VA_ARGS__)\n\nstruct BirdOrRodent\n{\nunion {\nint legs;\ndouble wingspan;\n};\n};\n\n#endif\n</code></pre>"},{"location":"animal/dir_2f4a44b452e0c53e7b1d0e7ea7c31d8f/","title":"Dir demo-projects/animal/examples","text":"<p>FileList &gt; animal &gt; examples</p>"},{"location":"animal/dir_2f4a44b452e0c53e7b1d0e7ea7c31d8f/#directories","title":"Directories","text":"Type Name dir bird <p>The documentation for this class was generated from the following file <code>demo-projects/animal/examples/</code></p>"},{"location":"animal/dir_5c4c618613824c5b20eab66cad438133/","title":"Dir demo-projects/animal/examples/bird","text":"<p>FileList &gt; animal &gt; examples &gt; bird</p>"},{"location":"animal/dir_5c4c618613824c5b20eab66cad438133/#files","title":"Files","text":"Type Name file main.cpp <p>The documentation for this class was generated from the following file <code>demo-projects/animal/examples/bird/</code></p>"},{"location":"animal/main_8cpp/","title":"File main.cpp","text":"<p>FileList &gt; animal &gt; examples &gt; bird &gt; main.cpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;iostream&gt;</code></li> <li><code>#include \"bird.h\"</code></li> </ul>"},{"location":"animal/main_8cpp/#public-functions","title":"Public Functions","text":"Type Name int main (int argc, char const * argv)"},{"location":"animal/main_8cpp/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"animal/main_8cpp/#function-main","title":"function main","text":"<pre><code>int main (\nint argc,\nchar const * argv\n) </code></pre> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/examples/bird/main.cpp</code></p>"},{"location":"animal/main_8cpp_source/","title":"File main.cpp","text":"<p>File List &gt; animal &gt; examples &gt; bird &gt; main.cpp</p> <p>Go to the documentation of this file</p> <pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n#include \"bird.h\"\n\nint main(int argc, char const *argv[])\n{\nBird bird(\"Polly\", 2, \"Parrot\");\nstd::cout &lt;&lt; bird.getName() &lt;&lt; \" is a \" &lt;&lt; bird.getAge() &lt;&lt; \" year old \" &lt;&lt; bird.getSpecies() &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre>"},{"location":"animal/dir_ac12fac2c0ebdbcf9ee82161434885e5/","title":"Dir demo-projects/animal/utils","text":"<p>FileList &gt; animal &gt; utils</p>"},{"location":"animal/dir_ac12fac2c0ebdbcf9ee82161434885e5/#files","title":"Files","text":"Type Name file exception.h <p>The documentation for this class was generated from the following file <code>demo-projects/animal/utils/</code></p>"},{"location":"animal/exception_8h/","title":"File exception.h","text":"<p>FileList &gt; animal &gt; utils &gt; exception.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;exception&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> </ul>"},{"location":"animal/exception_8h/#namespaces","title":"Namespaces","text":"Type Name namespace example"},{"location":"animal/exception_8h/#classes","title":"Classes","text":"Type Name class CustomException class NumericException <p>The documentation for this class was generated from the following file <code>demo-projects/animal/utils/exception.h</code></p>"},{"location":"animal/exception_8h_source/","title":"File exception.h","text":"<p>File List &gt; animal &gt; utils &gt; exception.h</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef EXAMPLE_EXCEPTION_H\n#define EXAMPLE_EXCEPTION_H\n\n#include &lt;exception&gt;\n#include &lt;string&gt;\n\nnamespace example {\nclass CustomException : public std::exception {\npublic:\nCustomException(const std::string&amp; msg):std::exception(),msg(msg){\n\n}\n\nvirtual const char* what() const throw() {\nreturn msg.c_str();\n}\n\nprivate:\nstd::string msg;\n};\n\nclass NumericException : public std::exception {\npublic:\nNumericException(const std::string&amp; msg):std::exception(),msg(msg){\n\n}\n\nvirtual const char* what() const throw() {\nreturn msg.c_str();\n}\n\nprivate:\nstd::string msg;\n};\n}\n\n#endif\n</code></pre>"},{"location":"animal/example_8h/","title":"File example.h","text":"<p>FileList &gt; animal &gt; example.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"animal.h\"</code></li> <li><code>#include \"bird.h\"</code></li> <li><code>#include \"utils/exception.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>demo-projects/animal/example.h</code></p>"},{"location":"animal/example_8h_source/","title":"File example.h","text":"<p>File List &gt; animal &gt; example.h</p> <p>Go to the documentation of this file</p> <pre><code>/*\n *\n * \\section intro_sec Introduction\n *\n * This is the introduction.\n *\n * \\section install_sec Installation\n *\n * \\subsection step1 Step 1: Opening the box\n *\n * etc...\n */\n\n#include \"animal.h\"\n#include \"bird.h\"\n#include \"utils/exception.h\"\n</code></pre>"},{"location":"animal/special__bird_8h/","title":"File special_bird.h","text":"<p>FileList &gt; animal &gt; special_bird.h</p> <p>Go to the source code of this file</p> <ul> <li><code>#include \"bird.h\"</code></li> </ul>"},{"location":"animal/special__bird_8h/#namespaces","title":"Namespaces","text":"Type Name namespace example"},{"location":"animal/special__bird_8h/#classes","title":"Classes","text":"Type Name class SpecialBird <p>The documentation for this class was generated from the following file <code>demo-projects/animal/special_bird.h</code></p>"},{"location":"animal/special__bird_8h_source/","title":"File special_bird.h","text":"<p>File List &gt; animal &gt; special_bird.h</p> <p>Go to the documentation of this file</p> <pre><code>#ifndef EXAMPLE_SPECIAL_BIRD_H\n#define EXAMPLE_SPECIAL_BIRD_H\n\n#include \"bird.h\"\n\nnamespace example {\nclass SpecialBird: public Bird {\npublic:\nSpecialBird(const std::string&amp; name, SpecialBird* mother = nullptr, SpecialBird* father = nullptr);\nSpecialBird(const SpecialBird&amp; other) = delete;\nSpecialBird(SpecialBird&amp;&amp; SpecialBird) noexcept;\n~SpecialBird() = default;\n\nvoid swap(SpecialBird&amp; other) noexcept;\nvoid do_something_special();\n\nSpecialBird&amp; operator = (const SpecialBird&amp; other) = delete;\nSpecialBird&amp; operator = (SpecialBird&amp;&amp; other) noexcept;\n};\n}\n\n#endif\n</code></pre>"},{"location":"animal/namespaces/","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p> <ul> <li>namespace example <ul> <li>namespace inner_namespace </li> </ul> </li> <li>namespace std </li> </ul>"},{"location":"animal/classes/","title":"Class Index","text":""},{"location":"animal/classes/#a","title":"a","text":"<ul> <li>Animal (example)</li> <li>AnimalInterface (example)</li> </ul>"},{"location":"animal/classes/#b","title":"b","text":"<ul> <li>Bird (example)</li> <li>BirdOrRodent</li> </ul>"},{"location":"animal/classes/#c","title":"c","text":"<ul> <li>CustomException (example)</li> <li>CuteChinchilla</li> </ul>"},{"location":"animal/classes/#n","title":"n","text":"<ul> <li>NumericException (example)</li> </ul>"},{"location":"animal/classes/#r","title":"r","text":"<ul> <li>Result (example::Animal)</li> </ul>"},{"location":"animal/classes/#s","title":"s","text":"<ul> <li>SpecialBird (example)</li> </ul>"},{"location":"animal/classes/#v","title":"v","text":"<ul> <li>Vector (example::inner_namespace)</li> </ul>"},{"location":"animal/hierarchy/","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p> <ul> <li>interface example::AnimalInterface <ul> <li>class example::Animal Base class for all animals from which Bird derives. <ul> <li>class example::Bird <ul> <li>class example::SpecialBird </li> </ul> </li> </ul> </li> </ul> </li> <li>class example::inner_namespace::Vector </li> <li>struct BirdOrRodent </li> <li>struct example::Animal::Result Some random inner class of Animal .</li> <li>class QObject <ul> <li>class CuteChinchilla </li> </ul> </li> <li>class std::exception <ul> <li>class example::CustomException </li> <li>class example::NumericException </li> </ul> </li> </ul>"},{"location":"animal/modules/","title":"Modules","text":"<p>Here is a list of all modules:</p> <ul> <li> <p>Some organism example This is a brief description to the organism group. </p> <ul> <li>An animal group example This is a brief description to the animals group. </li> </ul> </li> </ul>"},{"location":"animal/bug/","title":"Bug","text":"<p>Bug List</p>"},{"location":"animal/bug/#class-exampleanimal","title":"Class example::Animal","text":"<p>Some random bug </p>"},{"location":"animal/test/","title":"Test","text":"<p>Test List</p>"},{"location":"animal/test/#class-exampleanimal","title":"Class example::Animal","text":"<p>Some random test description </p>"},{"location":"animal/todo/","title":"Todo","text":"<p>Todo List</p>"},{"location":"animal/todo/#class-exampleanimal","title":"Class example::Animal","text":"<p>Some random todo </p>"},{"location":"animal/pages/","title":"Related Pages","text":"<p>Here is a list of all related documentation pages:</p> <ul> <li>Bug List </li> <li>Test List </li> <li>Todo List </li> </ul>"},{"location":"animal/class_members/","title":"Class Members","text":""},{"location":"animal/class_members/#a","title":"a","text":"<ul> <li>Animal (example::Animal)</li> </ul>"},{"location":"animal/class_members/#b","title":"b","text":"<ul> <li>Bird (example::Bird)</li> </ul>"},{"location":"animal/class_members/#c","title":"c","text":"<ul> <li>CuteChinchilla (CuteChinchilla)</li> <li>CustomException (example::CustomException)</li> </ul>"},{"location":"animal/class_members/#d","title":"d","text":"<ul> <li>do_something_special (example::SpecialBird)</li> </ul>"},{"location":"animal/class_members/#f","title":"f","text":"<ul> <li>father (example::Animal::Result, example::Animal)</li> <li>find_child_by_name (example::Animal)</li> <li>find_parent_by_name (example::Animal)</li> </ul>"},{"location":"animal/class_members/#g","title":"g","text":"<ul> <li>get_name (example::Animal)</li> <li>get_num_of_eyes (example::Animal, example::AnimalInterface)</li> <li>get_num_of_limbs (example::Animal, example::AnimalInterface)</li> <li>get_parents (example::Animal)</li> </ul>"},{"location":"animal/class_members/#h","title":"h","text":"<ul> <li>has_tail (example::Animal, example::AnimalInterface)</li> </ul>"},{"location":"animal/class_members/#l","title":"l","text":"<ul> <li>legs (BirdOrRodent)</li> </ul>"},{"location":"animal/class_members/#m","title":"m","text":"<ul> <li>m_weight (CuteChinchilla)</li> <li>mother (example::Animal::Result, example::Animal)</li> <li>make_sound (example::Animal, example::Bird)</li> <li>move (example::Animal, example::Bird)</li> <li>msg (example::CustomException, example::NumericException)</li> </ul>"},{"location":"animal/class_members/#n","title":"n","text":"<ul> <li>name (example::Animal::Result, example::Animal)</li> <li>NumericException (example::NumericException)</li> </ul>"},{"location":"animal/class_members/#o","title":"o","text":"<ul> <li>operator bool (example::Animal)</li> <li>operator= (example::Animal, example::Bird, example::SpecialBird)</li> </ul>"},{"location":"animal/class_members/#p","title":"p","text":"<ul> <li>Parents (example::Animal)</li> </ul>"},{"location":"animal/class_members/#s","title":"s","text":"<ul> <li>Species (CuteChinchilla)</li> <li>some_inline_member_function (example::Animal)</li> <li>swap (example::Animal, example::Bird, example::SpecialBird)</li> <li>SpecialBird (example::SpecialBird)</li> </ul>"},{"location":"animal/class_members/#t","title":"t","text":"<ul> <li>Type (example::Animal)</li> <li>type (example::Animal::Result)</li> </ul>"},{"location":"animal/class_members/#w","title":"w","text":"<ul> <li>wingspan (BirdOrRodent)</li> <li>weight (CuteChinchilla)</li> <li>what (example::CustomException, example::NumericException)</li> </ul>"},{"location":"animal/class_members/#x","title":"x","text":"<ul> <li>x (example::inner_namespace::Vector)</li> </ul>"},{"location":"animal/class_members/#y","title":"y","text":"<ul> <li>y (example::inner_namespace::Vector)</li> </ul>"},{"location":"animal/class_members/#z","title":"z","text":"<ul> <li>z (example::inner_namespace::Vector)</li> </ul>"},{"location":"animal/class_members/#_1","title":"~","text":"<ul> <li>~Animal (example::Animal)</li> <li>~Bird (example::Bird)</li> <li>~SpecialBird (example::SpecialBird)</li> </ul>"},{"location":"animal/class_members/#_2","title":"@","text":"<ul> <li>@1 (BirdOrRodent)</li> </ul>"},{"location":"animal/class_member_functions/","title":"Class Member Functions","text":""},{"location":"animal/class_member_functions/#a","title":"a","text":"<ul> <li>Animal (example::Animal)</li> </ul>"},{"location":"animal/class_member_functions/#b","title":"b","text":"<ul> <li>Bird (example::Bird)</li> </ul>"},{"location":"animal/class_member_functions/#c","title":"c","text":"<ul> <li>CuteChinchilla (CuteChinchilla)</li> <li>CustomException (example::CustomException)</li> </ul>"},{"location":"animal/class_member_functions/#d","title":"d","text":"<ul> <li>do_something_special (example::SpecialBird)</li> </ul>"},{"location":"animal/class_member_functions/#f","title":"f","text":"<ul> <li>find_child_by_name (example::Animal)</li> <li>find_parent_by_name (example::Animal)</li> </ul>"},{"location":"animal/class_member_functions/#g","title":"g","text":"<ul> <li>get_name (example::Animal)</li> <li>get_num_of_eyes (example::Animal, example::AnimalInterface)</li> <li>get_num_of_limbs (example::Animal, example::AnimalInterface)</li> <li>get_parents (example::Animal)</li> </ul>"},{"location":"animal/class_member_functions/#h","title":"h","text":"<ul> <li>has_tail (example::Animal, example::AnimalInterface)</li> </ul>"},{"location":"animal/class_member_functions/#m","title":"m","text":"<ul> <li>make_sound (example::Animal, example::Bird)</li> <li>move (example::Animal, example::Bird)</li> </ul>"},{"location":"animal/class_member_functions/#n","title":"n","text":"<ul> <li>NumericException (example::NumericException)</li> </ul>"},{"location":"animal/class_member_functions/#o","title":"o","text":"<ul> <li>operator bool (example::Animal)</li> <li>operator= (example::Animal, example::Bird, example::SpecialBird)</li> </ul>"},{"location":"animal/class_member_functions/#s","title":"s","text":"<ul> <li>some_inline_member_function (example::Animal)</li> <li>swap (example::Animal, example::Bird, example::SpecialBird)</li> <li>SpecialBird (example::SpecialBird)</li> </ul>"},{"location":"animal/class_member_functions/#w","title":"w","text":"<ul> <li>weight (CuteChinchilla)</li> <li>what (example::CustomException, example::NumericException)</li> </ul>"},{"location":"animal/class_member_functions/#_1","title":"~","text":"<ul> <li>~Animal (example::Animal)</li> <li>~Bird (example::Bird)</li> <li>~SpecialBird (example::SpecialBird)</li> </ul>"},{"location":"animal/class_member_variables/","title":"Class Member Variables","text":""},{"location":"animal/class_member_variables/#f","title":"f","text":"<ul> <li>father (example::Animal::Result, example::Animal)</li> </ul>"},{"location":"animal/class_member_variables/#l","title":"l","text":"<ul> <li>legs (BirdOrRodent)</li> </ul>"},{"location":"animal/class_member_variables/#m","title":"m","text":"<ul> <li>m_weight (CuteChinchilla)</li> <li>mother (example::Animal::Result, example::Animal)</li> <li>msg (example::CustomException, example::NumericException)</li> </ul>"},{"location":"animal/class_member_variables/#n","title":"n","text":"<ul> <li>name (example::Animal::Result, example::Animal)</li> </ul>"},{"location":"animal/class_member_variables/#t","title":"t","text":"<ul> <li>type (example::Animal::Result)</li> </ul>"},{"location":"animal/class_member_variables/#w","title":"w","text":"<ul> <li>wingspan (BirdOrRodent)</li> </ul>"},{"location":"animal/class_member_variables/#x","title":"x","text":"<ul> <li>x (example::inner_namespace::Vector)</li> </ul>"},{"location":"animal/class_member_variables/#y","title":"y","text":"<ul> <li>y (example::inner_namespace::Vector)</li> </ul>"},{"location":"animal/class_member_variables/#z","title":"z","text":"<ul> <li>z (example::inner_namespace::Vector)</li> </ul>"},{"location":"animal/class_member_variables/#_1","title":"@","text":"<ul> <li>@1 (BirdOrRodent)</li> </ul>"},{"location":"animal/class_member_typedefs/","title":"Class Member Typedefs","text":""},{"location":"animal/class_member_typedefs/#p","title":"p","text":"<ul> <li>Parents (example::Animal)</li> </ul>"},{"location":"animal/class_member_enums/","title":"Class Member Enums","text":""},{"location":"animal/class_member_enums/#s","title":"s","text":"<ul> <li>Species (CuteChinchilla)</li> </ul>"},{"location":"animal/class_member_enums/#t","title":"t","text":"<ul> <li>Type (example::Animal)</li> </ul>"},{"location":"animal/namespace_members/","title":"Namespace Members","text":""},{"location":"animal/namespace_members/#c","title":"c","text":"<ul> <li>Callback (example)</li> <li>CallbackType (example)</li> </ul>"},{"location":"animal/namespace_members/#s","title":"s","text":"<ul> <li>some_namespace_function (example)</li> </ul>"},{"location":"animal/namespace_member_functions/","title":"Namespace Member Functions","text":""},{"location":"animal/namespace_member_functions/#s","title":"s","text":"<ul> <li>some_namespace_function (example)</li> </ul>"},{"location":"animal/namespace_member_variables/","title":"Namespace Member Variables","text":"<p>Nothing related to Namespace Member Variables found.</p>"},{"location":"animal/namespace_member_typedefs/","title":"Namespace Member Typedefs","text":""},{"location":"animal/namespace_member_typedefs/#c","title":"c","text":"<ul> <li>Callback (example)</li> </ul>"},{"location":"animal/namespace_member_enums/","title":"Namespace Member Enums","text":""},{"location":"animal/namespace_member_enums/#c","title":"c","text":"<ul> <li>CallbackType (example)</li> </ul>"},{"location":"animal/functions/","title":"Functions","text":""},{"location":"animal/functions/#m","title":"m","text":"<ul> <li>main (main.cpp)</li> </ul>"},{"location":"animal/functions/#s","title":"s","text":"<ul> <li>some_global_function (animal.h)</li> </ul>"},{"location":"animal/macros/","title":"Macros","text":""},{"location":"animal/macros/#c","title":"c","text":"<ul> <li>CONFIG_HELLO (config.h)</li> <li>CONFIG_WORLD (config.h)</li> </ul>"},{"location":"animal/macros/#p","title":"p","text":"<ul> <li>PI (config.h)</li> <li>PRINT_PRETTY (config.h)</li> </ul>"},{"location":"animal/variables/","title":"Variables","text":"<p>Nothing related to Variables found.</p>"},{"location":"animal/links/","title":"Links","text":"<ul> <li>Related Pages</li> <li>Modules</li> <li>Class List</li> <li>Namespace ListNamespace List</li> <li>Namespace Members</li> <li>Namespace Member Functions</li> <li>Namespace Member Variables</li> <li>Namespace Member Typedefs</li> <li>Namespace Member Enumerations</li> <li>Class Index</li> <li>Class Hierarchy</li> <li>Class Members</li> <li>Class Member Functions</li> <li>Class Member Variables</li> <li>Class Member Typedefs</li> <li>Class Member Enumerations</li> <li>Files</li> <li>File Variables</li> <li>File Functions</li> <li>File Macros</li> </ul>"}]}